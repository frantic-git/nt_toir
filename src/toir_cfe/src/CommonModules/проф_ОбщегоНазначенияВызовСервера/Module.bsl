
#Область ПрограммныйИнтерфейс

//++ Проф-ИТ, #183, Соловьев А.А., 15.09.2023

Процедура ПроверитьПревышениеОстатка(МенеджерВТ, Отказ, ФОИспользоватьСерии,
									ФОИспользоватьХарактеристики, Объект, Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Представление КАК Номенклатура,
	|	ТабТовары.Склад.Представление КАК Склад,
	|	ТабТовары.Характеристика.Представление КАК Характеристика,
	|	ТабТовары.Серия.Представление КАК Серия,
	|	ТабТовары.Назначение.Представление КАК Назначение,
	|	ТабТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	СУММА(ТабТовары.СвобОстаток - ТабТовары.Количество) КАК ОтрОстаток
	|ИЗ
	|	проф_Остатки КАК ТабТовары
	|ГДЕ
	|	ТабТовары.СвобОстаток - ТабТовары.Количество < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабТовары.Номенклатура.Представление,
	|	ТабТовары.Склад.Представление,
	|	ТабТовары.Характеристика.Представление,
	|	ТабТовары.Серия.Представление,
	|	ТабТовары.Назначение.Представление,
	|	ТабТовары.ЕдиницаИзмерения.Представление";
	
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
		
	Выборка = РезЗапроса.Выбрать();
	Отказ = Истина;
	Пока Выборка.Следующий() Цикл 
		ШаблонСообщения = "Номенклатура %Номенклатура% / %Характеристика% / %Серия% / %Назначение%.
			|Превышен свободный остаток товара на складе %СкладОтправитель% на %Количество% %ЕдИзм%";
		
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", Выборка.Номенклатура);
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%СкладОтправитель%", Склад);
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Количество%", - Число(Выборка.ОтрОстаток));
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%ЕдИзм%", Выборка.ЕдиницаИзмерения);
		
		Если ФОИспользоватьСерии И Не ПустаяСтрока(Выборка.Серия) Тогда 				
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Серия%", Выборка.Серия);
		Иначе 
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, " / %Серия%", "");
		КонецЕсли;
		
		Если ФОИспользоватьХарактеристики И Не ПустаяСтрока(Выборка.Характеристика) Тогда 				
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", Выборка.Характеристика);
		Иначе 
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, " / %Характеристика%", "");
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.Назначение) Тогда 
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Назначение%", Выборка.Назначение);
		Иначе
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, " / %Назначение%", "");
		КонецЕсли;	
		
		ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения, Объект);
	КонецЦикла;		
	
КонецПроцедуры  

//-- Проф-ИТ, #183, Соловьев А.А., 15.09.2023

//++ Проф-ИТ, #341, Корнилов М.С., 10.11.2023
Функция ЕстьРоль(ИмяРоли, Пользователь = Неопределено) Экспорт

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
	|ПОМЕСТИТЬ ВТ_ГруппаПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ГруппыДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль.Имя = &Роль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	ВТ_ГруппыДоступа КАК ВТ_ГруппыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГруппаПользователей КАК ВТ_ГруппаПользователей
	|		ПО ВТ_ГруппыДоступа.Пользователь = ВТ_ГруппаПользователей.ГруппаПользователей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	ВТ_ГруппыДоступа КАК ВТ_ГруппыДоступа
	|ГДЕ
	|	ВТ_ГруппыДоступа.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	ВТ_ГруппыДоступа КАК ВТ_ГруппыДоступа
	|ГДЕ
	|	ВТ_ГруппыДоступа.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", ИмяРоли);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции
//-- Проф-ИТ, #341, Корнилов М.С., 10.11.2023

//++ Проф-ИТ, #340, Корнилов М.С., 23.11.2023
Функция РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаПериодов) Экспорт
	
	Если ТаблицаПериодов.Количество() = 0 Тогда
		ТаблицаПериодов.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросГрафиков = Новый Запрос;
	ЗапросГрафиков.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросГрафиков.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период КАК Период,
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы,
	|	ГрафикРаботыСотрудников.ДействуетДо
	|ПОМЕСТИТЬ ВТ_ГрафикиРаботыСотрудников
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ИсходныеДанные.Сотрудник
	|			ИЗ
	|				ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_ГрафикиРаботыСотрудников.Период) КАК ПериодГрафика,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ПериодыГрафиковНаНачалоРемонта
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ИсходныеДанные.ДатаНачала >= ВТ_ГрафикиРаботыСотрудников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала КАК НачалоИнтервала,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|			ТОГДА ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ КАК КонецИнтервала
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиков
	|ИЗ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта КАК ВТ_ПериодыГрафиковНаНачалоРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ПериодыГрафиковНаНачалоРемонта.ПериодГрафика = ВТ_ГрафикиРаботыСотрудников.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ВТ_ГрафикиРаботыСотрудников.Период,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ИсходныеДанные.ДатаОкончания
	|			ТОГДА ВТ_ИсходныеДанные.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И (ВТ_ГрафикиРаботыСотрудников.Период > ВТ_ИсходныеДанные.ДатаНачала)
	|			И (ВТ_ГрафикиРаботыСотрудников.Период < ВТ_ИсходныеДанные.ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков";
	
	ЗапросГрафиков.УстановитьПараметр("ВТ_ИсходныеДанные", ТаблицаПериодов);
	
	ТабГрафиков = ЗапросГрафиков.Выполнить().Выгрузить();
	МассивГрафиков = ТабГрафиков.ВыгрузитьКолонку("ГрафикРаботы");
	
	МинДата = ТаблицаПериодов[0].ДатаНачала;
	МаксДата = ТаблицаПериодов[0].ДатаОкончания;
	
	Для каждого Строка из ТаблицаПериодов Цикл
		Если Строка.ДатаНачала < МинДата Или Не ЗначениеЗаполнено(МинДата) Тогда
			МинДата = Строка.ДатаНачала;
		КонецЕсли;
		Если Строка.ДатаОкончания > МаксДата Тогда
			МаксДата = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	МинДата = НачалоДня(МинДата);
    МаксДата = КонецДня(МаксДата);
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, МинДата, МаксДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.НачалоИнтервала, СЕКУНДА) КАК НачалоИнтервалаСек,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.КонецИнтервала, СЕКУНДА) КАК КонецИнтервалаСек,
	|	ВТРасписанияРаботы.ДатаГрафика,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА) КАК ВремяНачалаСек,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА) КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО ВТ_ПериодыДействияГрафиков.ГрафикРаботы = ВТРасписанияРаботы.ГрафикРаботы
	|			И (ВТРасписанияРаботы.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиковПоДням.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|			И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|	КОНЕЦ КАК ВремяНачалаСек,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|	КОНЕЦ КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням2
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням КАК ВТ_ПериодыДействияГрафиковПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек = 86399
	|				ТОГДА 86400
	|			ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек
	|		КОНЕЦ - ВТ_ПериодыДействияГрафиковПоДням2.ВремяНачалаСек) КАК ВремяРаботы
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням2 КАК ВТ_ПериодыДействияГрафиковПоДням2
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
//-- Проф-ИТ, #340, Корнилов М.С., 23.11.2023

//++ Проф-ИТ, #401, Соловьев А.А., 11.12.2023
Процедура УстановитьПараметрВыбораПодразделения(Элементы, ИмяЭлементаФормыПодразделение = "Подразделение") Экспорт
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.проф_ПризнакПодразделенияОрганизации", Ложь);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы[ИмяЭлементаФормыПодразделение].ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

Процедура ПроверитьПризнакПодразделенияОрганизации(Подразделение, Отказ, ИмяЭлементаФормыПодразделение = "Подразделение") Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		Возврат;
	КонецЕсли;
	
	ПризнакПодразделенияОрганизации =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "проф_ПризнакПодразделенияОрганизации");
		
	Если ПризнакПодразделенияОрганизации Тогда 
		ТекстСообщения = НСтр("ru = 'Подразделение должно быть структурой предприятия. Укажите другое подразделение'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяЭлементаФормыПодразделение, , Отказ);
	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #401, Соловьев А.А., 11.12.2023

//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024

Процедура ВывестиТоварыВПути(Форма, Номенклатура, ПодразделенияСлужбыТОИР, ГруппаНаФорме, ЭлементПередКоторымВставляем = Неопределено) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип("ДинамическийСписок"));
	ОписаниеТиповДинамическийСписок = Новый ОписаниеТипов(ТипыРеквизита); 
	
	СписокТоварыВПути = Новый РеквизитФормы("СписокТоварыВПути", ОписаниеТиповДинамическийСписок);
	ДобавляемыеРеквизиты.Добавить(СписокТоварыВПути);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИмяСписка = "СписокТоварыВПути";
	
	РеквизитДинамическийСписок = Форма[ИмяСписка];
	РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
	РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапросаТоварыВПути();
	
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоНоменклатуре", ЗначениеЗаполнено(Номенклатура));
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ПодразделенияСлужбыТОИР", ПодразделенияСлужбыТОИР);
	
	ГруппаТоварыВПути = Форма.Элементы.Вставить("Группа" + ИмяСписка, Тип("ГруппаФормы"), ГруппаНаФорме, ЭлементПередКоторымВставляем);
	ГруппаТоварыВПути.Вид						= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТоварыВПути.Заголовок					= НСтр("ru = 'Товары в пути'");
	ГруппаТоварыВПути.Отображение				= ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаТоварыВПути.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТоварыВПути.Поведение					= ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаТоварыВПути.ОтображениеУправления 	= ОтображениеУправленияОбычнойГруппы.Картинка;
	ГруппаТоварыВПути.ОтображатьЗаголовок		= Истина;
	ГруппаТоварыВПути.РастягиватьПоГоризонтали	= Истина;
	ГруппаТоварыВПути.Скрыть();
	
	ТаблицаФормы = Форма.Элементы.Добавить(ИмяСписка, Тип("ТаблицаФормы"), ГруппаТоварыВПути);
	ТаблицаФормы.ПутьКДанным = ИмяСписка;
	ТаблицаФормы.КоманднаяПанель.Видимость = Ложь;
	ТаблицаФормы.Высота = 3;
	ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура", Ложь);
	СтруктураКолонок.Вставить("Назначение", Истина);
	СтруктураКолонок.Вставить("Количество", Истина);
	СтруктураКолонок.Вставить("Местонахождение", Истина);
	СтруктураКолонок.Вставить("СтатусОтгрузки", Истина);
	СтруктураКолонок.Вставить("ДатаУстановкиСтатуса", Истина);
	СтруктураКолонок.Вставить("ТипДоставки", Истина);
	СтруктураКолонок.Вставить("НомерКонтейнера", Истина);
	
	ВывестиКолонкиДинамическогоСписка(Форма, ИмяСписка, СтруктураКолонок, ТаблицаФормы);
	
	ЭлементОтбора = РеквизитДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	
КонецПроцедуры

Функция ТекстЗапросаТоварыВПути()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	проф_ВнутреннееТовародвижение.Номенклатура КАК Номенклатура,
	|	проф_ВнутреннееТовародвижение.Назначение КАК Назначение,
	|	проф_ВнутреннееТовародвижение.ТипДоставки КАК ТипДоставки,
	|	проф_ВнутреннееТовародвижение.Количество КАК Количество,
	|	проф_ВнутреннееТовародвижение.Местонахождение КАК Местонахождение,
	|	проф_ВнутреннееТовародвижение.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	|	проф_ВнутреннееТовародвижение.СтатусОтгрузки КАК СтатусОтгрузки,
	|	проф_ВнутреннееТовародвижение.НомерКонтейнера КАК НомерКонтейнера
	|ИЗ
	|	РегистрСведений.проф_ВнутреннееТовародвижение КАК проф_ВнутреннееТовародвижение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО проф_ВнутреннееТовародвижение.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|ГДЕ
	|	НЕ &ИспользоватьОтборПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ВнутреннееТовародвижение.Номенклатура,
	|	проф_ВнутреннееТовародвижение.Назначение,
	|	проф_ВнутреннееТовародвижение.ТипДоставки,
	|	проф_ВнутреннееТовародвижение.Количество,
	|	проф_ВнутреннееТовародвижение.Местонахождение,
	|	проф_ВнутреннееТовародвижение.ДатаУстановкиСтатуса,
	|	проф_ВнутреннееТовародвижение.СтатусОтгрузки,
	|	проф_ВнутреннееТовародвижение.НомерКонтейнера
	|ИЗ
	|	РегистрСведений.проф_ВнутреннееТовародвижение КАК проф_ВнутреннееТовародвижение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО проф_ВнутреннееТовародвижение.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|ГДЕ
	|	&ИспользоватьОтборПоНоменклатуре
	|	И проф_ВнутреннееТовародвижение.Номенклатура = &Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВывестиКолонкиДинамическогоСписка(Форма, ИмяСписка, СтруктураКолонок, ТаблицаФормы) Экспорт
	
	Для Каждого Элемент Из СтруктураКолонок Цикл
		
		ПараметрыКолонки = СтрЗаменить(Элемент.Ключ, "_", Символы.ПС);
		Если СтрЧислоСтрок(ПараметрыКолонки) > 1 Тогда
			Заголовок = СтрПолучитьСтроку(ПараметрыКолонки, 1);
			ИмяКолонки = СтрПолучитьСтроку(ПараметрыКолонки, 2);
		Иначе
			Заголовок = "";
			ИмяКолонки = ПараметрыКолонки; 
		КонецЕсли;
		
		НоваяКолонкаТаблицы = Форма.Элементы.Добавить(ИмяСписка + ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
		Если Заголовок <> "" Тогда 
			НоваяКолонкаТаблицы.Заголовок = Заголовок; 
		КонецЕсли;
		НоваяКолонкаТаблицы.ПутьКДанным = ИмяСписка + "." + ИмяКолонки; 
		НоваяКолонкаТаблицы.Видимость = Элемент.Значение;
		НоваяКолонкаТаблицы.Ширина = 20;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024

#КонецОбласти