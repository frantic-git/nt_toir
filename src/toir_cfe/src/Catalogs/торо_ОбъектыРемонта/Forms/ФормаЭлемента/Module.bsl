#Область ОписаниеПеременных

//++ Проф-ИТ, #141, Ровенский О.В., 20.09.2023

&НаКлиенте
Перем СтруктураНеОсновныхРеквизитовОР; 

//-- Проф-ИТ, #141, Ровенский О.В., 20.09.2023

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура проф_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	//++ Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023
	Если Параметры.Ключ.Пустая() Тогда
		Если Не Параметры.Свойство("СсылкаРодитель")
		Или (Параметры.Свойство("СсылкаРодитель") 
		И (Параметры.СсылкаРодитель.ЭтоГруппа
			Или ТипЗнч(Параметры.СсылкаРодитель) = Тип("СправочникСсылка.торо_СтруктурыОР"))) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					"Объект ремонта не может быть создан в системе ТОИР, необходимо его внести в ЕРП", , , , Отказ);
				Возврат;
		КонецЕсли;
	КонецЕсли;
	//-- Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023

КонецПроцедуры

&НаСервере
Процедура проф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка) 
	
	//++ Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.Свойство("СсылкаРодитель") 
		И ЗначениеЗаполнено(Параметры.СсылкаРодитель) Тогда
			
			Родитель = Параметры.СсылкаРодитель; 
			ЗначенияРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Параметры.СсылкаРодитель, "Подразделение, Организация");
			Объект.Подразделение = ЗначенияРодителя.Подразделение;
			Объект.Организация = ЗначенияРодителя.Организация;  
			
		КонецЕсли;
	КонецЕсли;
	//++ Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023 
	
	//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	Элементы.ПанельОР.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	Элементы.ТипОбъекта.Видимость = Ложь;
	Элементы.СтраницаОграниченияИТиповойСостав.Видимость = Ложь;
	Элементы.ОсновноеИЗависимоеОборудование.Видимость = Ложь;
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	Элементы.Основное.Видимость = Ложь;
	//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	СтрПолеФормы = "ПолеФормы";
	Элементы.Переместить(Элементы.ИнвентарныйНомер,Элементы.ГруппаНаименованиеКод,Элементы.Код); 
	
	НовыйЭлементМодель = Элементы.Вставить("Модель", Тип(СтрПолеФормы), Элементы.ТиповойОРИНаправление,Элементы.ТиповойОР);
    НовыйЭлементМодель.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементМодель.ПутьКДанным = "Объект.проф_Модель";
	НовыйЭлементМодель.Заголовок = "Модель";  
	       
	НовыйЭлементМарка = Элементы.Вставить("Марка", Тип(СтрПолеФормы), Элементы.ТиповойОРИНаправление,Элементы.ТиповойОР);
    НовыйЭлементМарка.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементМарка.ПутьКДанным = "Объект.проф_Марка";
	НовыйЭлементМарка.Заголовок = "Марка";
	НовыйЭлементМарка.ТолькоПросмотр = Истина;
	НовыйЭлементМарка.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлементМарка.МаксимальнаяШирина = 25;     
	//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #305, Корнилов М.С., 27.10.2023
	ГруппаГруппаОС = Элементы.Вставить("ГруппаГруппаОС", Тип("ГруппаФормы"), ЭтаФорма, Элементы.ОсновныеКоманды);
	ГруппаГруппаОС.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГруппаОС.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаГруппаОС.ОтображатьЗаголовок = Ложь; 
	ГруппаГруппаОС.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовыйЭлементГруппаОС = Элементы.Добавить("ГруппаОС", Тип(СтрПолеФормы), Элементы.ГруппаГруппаОС);
    НовыйЭлементГруппаОС.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементГруппаОС.ТолькоПросмотр = Истина;
    НовыйЭлементГруппаОС.ПутьКДанным = "Объект.проф_ГруппаОС";
	//-- Проф-ИТ, #305, Корнилов М.С., 27.10.2023
	
	//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	СоздатьСтраницуОсновное();			
	СоздатьСтраницуДопольнительныеПараметры();	
	СоздатьСтраницуРегистрационныеДокументы();
	СоздатьСтраницуЭкипаж(); 
	СоздатьСтраницуМестонахождение();
	СоздатьСтраницуТекущееМестоположение();	  		
	СоздатьСтраницуПоказателиЭксплуатации();
	СоздатьСтраницуКонтролируемыеПоказатели();
	СоздатьГруппуНаработка();	
	СоздатьСтраницуПутевыеЛисты();                 
	//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
 
	//++ Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023     	
	СоздатьСтраницуНормыРасходаГСМ();
	//-- Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023     	
		
	//++ Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023     
	СоздатьСтраницуНормыРасходаТЖ();
    //-- Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023
	
	//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	Элементы.Переместить(Элементы.ГруппаОсновное, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаДопПараметры, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.СтраницаГарантийныеРемонты, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаРегистрационныеДокументы, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаЭкипаж, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаМестонахождение, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаТекущееМестоположение, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.СтраницаИсторияПеремещенияОборудования, Элементы.ПанельОР);
	Элементы.СтраницаИсторияПеремещенияОборудования.Заголовок = "Перемещение оборудования";
	Элементы.Переместить(Элементы.СтраницаНормативыПланирования, Элементы.ПанельОР);
	Элементы.СтраницаНормативыПланирования.Заголовок = "Планирование ремонтов";
	Элементы.Переместить(Элементы.СтраницаЗапчасти, Элементы.ПанельОР);
	Элементы.СписокОбъектовРемонта.Ширина = 80;
	Элементы.Переместить(Элементы.ГруппаПоказателиЭксплуатации, Элементы.ПанельОР); 
	Элементы.Переместить(Элементы.ГруппаКонтролируемыеПоказатели, Элементы.ПанельОР);	
	Элементы.Переместить(Элементы.ГруппаПутевыеЛисты, Элементы.ПанельОР);
	Элементы.Переместить(Элементы.ГруппаНормыРасходаГСМ, Элементы.ПанельОР);  
	Элементы.Переместить(Элементы.ГруппаНормыРасходаТЖ, Элементы.ПанельОР);
	//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	УстановитьПараметрыЗапросовНаСервереПроф();  
	//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	
КонецПроцедуры  

&НаКлиенте
Процедура проф_ПриОткрытииПосле(Отказ)
	
	//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	СтруктураНеОсновныхРеквизитовОР = Новый Структура("ЭтоГруппа, ДатаВводаВЭксплуатацию, ДатаВыпуска");
	//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	КоманднаяПанельСписокПараметровНаработки = Элементы.СписокПараметровНаработки.КоманднаяПанель;
	Если КоманднаяПанельСписокПараметровНаработки.ПодчиненныеЭлементы.Найти("СписокПараметровНаработкиДобавить") <> Неопределено Тогда
		КоманднаяПанельСписокПараметровНаработки.ПодчиненныеЭлементы.СписокПараметровНаработкиДобавить.Видимость = Ложь;
	КонецЕсли;
	Если КоманднаяПанельСписокПараметровНаработки.ПодчиненныеЭлементы.Найти("СписокПараметровНаработкиПереместить") <> Неопределено Тогда
		КоманднаяПанельСписокПараметровНаработки.ПодчиненныеЭлементы.СписокПараметровНаработкиПереместить.Видимость = Ложь; 
	КонецЕсли;
	
	КоманднаяПанельСписокПараметровНаработкиСтратегический = Элементы.СписокПараметровНаработкиСтратегический.КоманднаяПанель;
	Если КоманднаяПанельСписокПараметровНаработкиСтратегический.ПодчиненныеЭлементы.Найти("СписокПараметровНаработкиСтратегическийДобавить") <> Неопределено Тогда 
		КоманднаяПанельСписокПараметровНаработкиСтратегический.ПодчиненныеЭлементы.СписокПараметровНаработкиСтратегическийДобавить.Видимость = Ложь; 
	КонецЕсли; 
	Если КоманднаяПанельСписокПараметровНаработкиСтратегический.ПодчиненныеЭлементы.Найти("СписокПараметровНаработкиСтратегическийПереместить") <> Неопределено Тогда
		КоманднаяПанельСписокПараметровНаработкиСтратегический.ПодчиненныеЭлементы.СписокПараметровНаработкиСтратегическийПереместить.Видимость = Ложь;  
	КонецЕсли;

	КоманднаяПанельтабЭкипаж = Элементы.табЭкипаж.КоманднаяПанель;
	Если КоманднаяПанельтабЭкипаж.ПодчиненныеЭлементы.Найти("табЭкипажСоздать") <> Неопределено Тогда
		КоманднаяПанельтабЭкипаж.ПодчиненныеЭлементы.табЭкипажСоздать.Видимость = Ложь; 
	КонецЕсли;
    Если КоманднаяПанельтабЭкипаж.ПодчиненныеЭлементы.Найти("табЭкипажСкопировать") <> Неопределено Тогда
		КоманднаяПанельтабЭкипаж.ПодчиненныеЭлементы.табЭкипажСкопировать.Видимость = Ложь; 
	КонецЕсли;
	
	КоманднаяПанельтабМестонахождение = Элементы.табМестонахождение.КоманднаяПанель;
	Если КоманднаяПанельтабМестонахождение.ПодчиненныеЭлементы.Найти("табМестонахождениеСоздать") <> Неопределено Тогда
		КоманднаяПанельтабМестонахождение.ПодчиненныеЭлементы.табМестонахождениеСоздать.Видимость = Ложь; 
	КонецЕсли;
    Если КоманднаяПанельтабМестонахождение.ПодчиненныеЭлементы.Найти("табМестонахождениеСкопировать") <> Неопределено Тогда
		КоманднаяПанельтабМестонахождение.ПодчиненныеЭлементы.табМестонахождениеСкопировать.Видимость = Ложь;
	КонецЕсли;
	//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	УстановитьВидимостьКоманднаяПанельтабМестонахождениеОС();
	//-- Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	
	//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023	
	КоманднаяПанельТабТекущееМестоположение = Элементы.ТабТекущееМестоположение.КоманднаяПанель;
	Если КоманднаяПанельТабТекущееМестоположение.ПодчиненныеЭлементы.Найти("ТабТекущееМестоположениеСоздать") <> Неопределено Тогда
		КоманднаяПанельТабТекущееМестоположение.ПодчиненныеЭлементы.ТабТекущееМестоположениеСоздать.Видимость = Ложь;
	КонецЕсли;
    Если КоманднаяПанельТабТекущееМестоположение.ПодчиненныеЭлементы.Найти("ТабТекущееМестоположениеСкопировать") <> Неопределено Тогда
		КоманднаяПанельТабТекущееМестоположение.ПодчиненныеЭлементы.ТабТекущееМестоположениеСкопировать.Видимость = Ложь;
	КонецЕсли;

	КоманднаяПанельТабПутевыеЛисты = Элементы.ТабПутевыеЛисты.КоманднаяПанель;
	Если КоманднаяПанельТабПутевыеЛисты.ПодчиненныеЭлементы.Найти("ТабПутевыеЛистыСоздать") <> Неопределено Тогда
		КоманднаяПанельТабПутевыеЛисты.ПодчиненныеЭлементы.ТабПутевыеЛистыСоздать.Видимость = Ложь; 
	КонецЕсли;
    Если КоманднаяПанельТабПутевыеЛисты.ПодчиненныеЭлементы.Найти("ТабПутевыеЛистыСкопировать") <> Неопределено Тогда
		КоманднаяПанельТабПутевыеЛисты.ПодчиненныеЭлементы.ТабПутевыеЛистыСкопировать.Видимость = Ложь;
    КонецЕсли;

    КоманднаяПанельтабДокументыТС = Элементы.табДокументыТС.КоманднаяПанель;
	Если КоманднаяПанельтабДокументыТС.ПодчиненныеЭлементы.Найти("табДокументыТССоздать") <> Неопределено Тогда
		КоманднаяПанельтабДокументыТС.ПодчиненныеЭлементы.табДокументыТССоздать.Видимость = Ложь; 
	КонецЕсли;
    Если КоманднаяПанельтабДокументыТС.ПодчиненныеЭлементы.Найти("табДокументыТССкопировать") <> Неопределено Тогда
		КоманднаяПанельтабДокументыТС.ПодчиненныеЭлементы.табДокументыТССкопировать.Видимость = Ложь; 
	КонецЕсли;                                     
	//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023
	
	//++ Проф-ИТ, #242, Лавриненко Т.В., 20.09.2023	
    Элементы.Изготовитель.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.НомерПаспорта.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.ЗаводскойНомер.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.ПодразделениеИсполнитель.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.ДатаВводаВЭксплуатацию1.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.ДатаВводаВЭксплуатацию.ТолькоПросмотр = НЕ РодительУзел();
    Элементы.ДатаВыпуска.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.ПлановыйГрафикРаботы.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.Модель.ТолькоПросмотр = НЕ РодительУзел(); 
		
	Элементы.ТиповойОР.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.НомерДвигателя.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.МодельДвигателя.ТолькоПросмотр = НЕ РодительУзел(); 
	Элементы.МощностьДвигателяЛС.ТолькоПросмотр = НЕ РодительУзел(); 
	Элементы.МощностьДвигателяКВт.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.НомерКузова.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.НомерШасси.ТолькоПросмотр = НЕ РодительУзел();
	Элементы.НомерКПП.ТолькоПросмотр = НЕ РодительУзел(); 
	Элементы.Наименование.ТолькоПросмотр = НЕ РодительУзел(); 
	Элементы.ИнвентарныйНомер.ТолькоПросмотр = НЕ РодительУзел(); 
	Элементы.СрокПолезногоИспользования.ТолькоПросмотр = НЕ РодительУзел(); 
    Элементы.СрокПолезногоИспользования.ТолькоПросмотр =  НЕ РодительУзел();
	//-- Проф-ИТ, #242, Лавриненко Т.В., 20.09.2023	
	
	//++ Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023
	Элементы.Организация.ТолькоПросмотр = РодительУзел();
	Элементы.Подразделение.ТолькоПросмотр = РодительУзел();
    //++ Проф-ИТ, #251, Карпов Д.Ю., 15.09.2023
//++ Проф-ИТ, #262, Горетовская М.С., 19.09.2023 - Замечания Заказчика по ЗНР 141
	Элементы.Организация.ТолькоПросмотр = Истина;
	Элементы.Подразделение.ТолькоПросмотр = Истина;
	
	Элементы.СобственныйВес.ТолькоПросмотр = не РодительУзел();
	Элементы.ГабаритныйРазмерДлина.ТолькоПросмотр = не РодительУзел();
	Элементы.ГабаритныйРазмерШирина.ТолькоПросмотр = не РодительУзел();
	Элементы.ГабаритныйРазмерВысота.ТолькоПросмотр = не РодительУзел();
	Элементы.ПолезныйРазмерДлина.ТолькоПросмотр = не РодительУзел();
	Элементы.ПолезныйРазмерШирина.ТолькоПросмотр = не РодительУзел();
	Элементы.ПолезныйРазмерВысота.ТолькоПросмотр = не РодительУзел();
	
	Элементы.ГруппаПутевыеЛисты.Видимость = Ложь;
	
	ОбновитьОсновныеТаблицы();
//-- Проф-ИТ, #262, Горетовская М.С., 19.09.2023 - Замечания Заказчика по ЗНР 141

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//++ Проф-ИТ, #33, Башинская А.Ю., 24.08.2023

&НаКлиенте
Процедура ТиповойОРПриИзмененииПрограммныйВызов(Элемент) Экспорт
	
	проф_ЗаполнитьОграниченияИзТОР();
					
	ЗаполнитьНормативныеРемонты();
	
	// обновить нормативные ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(Объект.ТиповойОР);		
	
	проф_ОбновитьНормативныеРемонты(СтруктураВозврата);	
	
	// обновить предшествующие ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуПредшествующихРемонтов(Объект.ТиповойОР);
	
	проф_ОбновитьПредшествующиеРемонты(СтруктураВозврата);
	
	МодифицированностьПредшествующихРемонтов = Истина;
	
	// Обновить фиксированные ремонтные циклы
	МассивЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Объект.Ссылка, Объект.ТиповойОР, Ложь);

	проф_ОбновитьФиксированныеРемонтныеЦиклы(МассивЦепочек);
	
	МодифицированностьРемЦиклов = Истина;
	
	// Обновить замещаемые ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуЗамещаемыхРемонтов(Объект.ТиповойОР);
	
	проф_ОбновитьЗамещаемыеРемонты(СтруктураВозврата);
	
	МодифицированностьЗамещаемыхРемонтов = Истина;
	
	Если Элемент = Элементы.ТиповойОР Тогда
		ИзмененИзготовитель = Ложь;
		ИзмененоНаправление = Ложь;
		текИзготовительТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Изготовитель");
		текНаправлениеТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Направление");
		Если текИзготовительТипового = Объект.Изготовитель ИЛИ НЕ ЗначениеЗаполнено(Объект.Изготовитель) Тогда
			Объект.Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Изготовитель");
			Элементы.Изготовитель.ЦветТекста = WebЦвета.Серый;
		КонецЕсли; 
		Если текНаправлениеТипового = Объект.Направление ИЛИ НЕ ЗначениеЗаполнено(Объект.Направление) Тогда
			Объект.Направление  = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Направление");
			Элементы.Направление.ЦветТекста = WebЦвета.Серый;
		КонецЕсли; 
		
	КонецЕсли;	
	
	МодифицированностьНормРемонтов = Истина;
	
	ТекТиповойОР = Объект.ТиповойОР;
	
	// Заполнить таблицу запчастей.
	проф_ЗаполнитьТаблицуЗапчастей();
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		
		СтрВозврата = ПолучитьЗапчастиИзТиповогоОР(Объект.ТиповойОР);
		
		// ТабЗатратПоВидамРемонта
		мУдаления = Новый Массив;		
		проф_ЗаполнитьТабЗатратПоВидамРемонта(мУдаления, СтрВозврата);
				
		// ТабЗапчастейОбъектовРемонта
		проф_ЗаполнитьТабЗапчастейОбъектовРемонта(мУдаления, СтрВозврата);
		
	Иначе		
		проф_УдалитьСтрокиСПризнакомИзТиповогоУТаблицФормы();				
	КонецЕсли;
	
	Если ИспользоватьФМ()
	И Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
		ЗаполнитьДеревоОграниченийНаСервере();
	КонецЕсли;
	
	ПанельОРПриСменеСтраницы(Элементы.ПанельОР, Элементы.ПанельОР.ТекущаяСтраница);
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(
																ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ЗаполнитьОграниченияИзТОР()
	
	Если ИспользоватьФМ() Тогда  
		Если ЗначениеЗаполнено(Объект.ТиповойОР) И НЕ ПроверитьТипТОР(Объект.ТиповойОР) Тогда
			ПоказатьПредупреждение(Неопределено,
				НСтр("ru = 'Тип объекта выбранного Типового ОР не соответствует типу объекта ремонта!'"));
			Объект.ТиповойОР = ТекТиповойОР;
			Возврат;
		КонецЕсли;
		
		Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
			ЗаполнитьОграниченияИзТОР();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_УдалитьСтрокиСПризнакомИзТиповогоУТаблицФормы()
	
	мУдаления = Новый Массив;
	Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
		Если ТекСтрока.ИзТипового = Истина Тогда
			мУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из мУдаления Цикл
		ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
	КонецЦикла;
	
	мУдаления.Очистить();
	Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
		Если ТекСтрока.ИзТипового = Истина Тогда
			мУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из мУдаления Цикл
		ТабЗатратПоВидамРемонта.Удалить(текСтрока);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ОбновитьЗамещаемыеРемонты(СтруктураВозврата)
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		Отбор = Новый Структура("ТиповойОР", ТекТиповойОР);
		СтрокиДляУдаления = ЗамещаемыеРемонты.НайтиСтроки(Отбор);
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ЗамещаемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ОбновитьФиксированныеРемонтныеЦиклы(МассивЦепочек)
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда 
		Отбор = Новый Структура("ГруппаОбъектовРемонтов, ТиповойОР", ТекТиповойОР, Истина);
		СтрокиДляУдаления = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиДляУдаления Цикл 
			ТабличноеПолеРемонтныеЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
		
		Отбор = Новый Структура("ГруппаОбъектовРемонтов, ТиповойОР", ТекТиповойОР, Истина);
		СтрокиДляУдаления = РемЦиклыОборудования.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиДляУдаления Цикл
			РемЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из МассивЦепочек Цикл
		НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
		НС = РемЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ОбновитьНормативныеРемонты(СтруктураВозврата)
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		Отбор = Новый Структура("ТиповойОР", ТекТиповойОР);
		СтрокиДляУдаления = НормативныеРемонты.НайтиСтроки(Отбор);
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			НормативныеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = НормативныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ОбновитьПредшествующиеРемонты(СтруктураВозврата)
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		Отбор = Новый Структура("ТиповойОР", ТекТиповойОР);
		СтрокиДляУдаления = ПредшествующиеРемонты.НайтиСтроки(Отбор);
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ПредшествующиеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;		
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ЗаполнитьТаблицуЗапчастей()

	Если НЕ МодифицированностьЗапчастейОР Тогда
		СтруктураВозврата = ЗаполнитьТабЗапчастейОбъектовРемонта(Параметры.Ключ);
		Если СтруктураВозврата.Свойство("Запчасти") Тогда
			
			ТабЗапчастейОбъектовРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.Запчасти Цикл
				
				НС = ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				НС.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(НС.Номенклатура);
				
			КонецЦикла;
			
		КонецЕсли;
		Если СтруктураВозврата.Свойство("НормаЗапчастей") Тогда
			
			ТабЗатратПоВидамРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.НормаЗапчастей Цикл
				
				НС = ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ЗаполнитьТабЗатратПоВидамРемонта(МассивУдаления, СтрВозврата)
	
	Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
		Если ТекСтрока.ИзТипового = Истина Тогда
			МассивУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из МассивУдаления Цикл
		ТабЗатратПоВидамРемонта.Удалить(текСтрока);
	КонецЦикла;
	
	Если СтрВозврата.Свойство("НормативныеЗатраты") Тогда
		Для каждого ТекСтрока из СтрВозврата.НормативныеЗатраты Цикл
			нс = ТабЗатратПоВидамРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
			нс.ИзТипового = Истина;
			нс.ТиповойОр = Объект.ТиповойОР;
			нс.ОбъектРемонта = Объект.Ссылка;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура проф_ЗаполнитьТабЗапчастейОбъектовРемонта(МассивУдаления, СтрВозврата)
	
	МассивУдаления.Очистить();
	Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
		Если ТекСтрока.ИзТипового = Истина Тогда
			МассивУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из МассивУдаления Цикл
		ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
	КонецЦикла;
	
	Если Не СтрВозврата.Свойство("Запчасти") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТекСтрока из СтрВозврата.Запчасти Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		Отбор.Вставить("Характеристика", ТекСтрока.Характеристика);		
		НайС = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Отбор);
		нс = ТабЗапчастейОбъектовРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
		нс.ИзТипового = Истина;
		нс.ТиповойОр = Объект.ТиповойОР;
		нс.ОбъектРемонта = Объект.Ссылка;
		нс.Удален = НайС.Количество() > 0;
		нс.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекСтрока.Номенклатура);
		
		Если нс.Удален Тогда
			ОтборЗатрат = Новый Структура("Номенклатура, Характеристика, ИзТипового", 
							ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Истина);
			НайС = ТабЗатратПоВидамРемонта.НайтиСтроки(ОтборЗатрат);				
			Для Каждого текЗатрата Из Найс Цикл
				текЗатрата.Удален = Истина;	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

//-- Проф-ИТ, #33, Башинская А.Ю., 24.08.2023

//++ Проф-ИТ, #251, Башинская А.Ю., 24.08.2023

&НаКлиенте
Процедура проф_ПанельОРПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаПоказателиЭксплуатации Тогда
		ОбновитьОсновныеТаблицы()
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаЗапчасти Тогда
		ЗаполнитьЗапчасти();
	КонецЕсли; 
 КонецПроцедуры

//-- Проф-ИТ, #251, Башинская А.Ю., 24.08.2023 
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из ЭтаФорма.СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура;
	ПараметрыФормыСтруктура.Вставить("КлючНазначенияИспользования", "ОбъектыРемонта");
	ПараметрыФормыСтруктура.Вставить("ЗакрыватьПриВыборе", Истина);	
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора",
		ПараметрыФормыСтруктура, Элемент, Объект.Ссылка);

КонецПроцедуры   

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтруктураПоиска = Новый Структура("Показатель", ВыбранноеЗначение);
	СписокПоказателейВТаблице = ЭтаФорма.СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска);
	СтандартнаяОбработка = Ложь;

	Если СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
		ЭтаФорма.СписокИзмеряемыхПоказателей.Удалить(СписокПоказателейВТаблице[0]);
		ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, Объект.Ссылка, Истина);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
		ТекущиеДанные.Показатель = ВыбранноеЗначение;
		ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		ТекущиеДанные.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		ТекущиеДанные.ИзТиповогоОР = Ложь;
		ТекущиеДанные.Удален = Ложь;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
		
	ИначеЕсли СписокПоказателейВТаблице.Количество() >= 1 И ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Показатель <> ВыбранноеЗначение Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));	
		
	Иначе
		ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		ПоказательДоИзменения = ТекущиеДанные.Показатель;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, Объект.Ссылка, Истина);
		СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
		СтруктураЗначенийПолей.Вставить("Показатель" , ВыбранноеЗначение);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
		
		МодифицированностьИзмеряемыхПоказателей = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКонтролируемыхПоказателей(Знач ИзмеряемыйПоказатель, Знач ОР, Знач НеУчитыватьОР = Ложь)
	
	СтрЧисло = "Число";
	
	СтруктураЗначенийПолей = Новый Структура();
	МенеджерПВХ = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта;
	МассивПоказателей = МенеджерПВХ.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(
										   ОР, ИзмеряемыйПоказатель, Истина, НеУчитыватьОР);
	Если МассивПоказателей.Количество() > 0 Тогда
		СтрокаПоказателя = МассивПоказателей[0];
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", СтрокаПоказателя.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум", СтрокаПоказателя.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум", СтрокаПоказателя.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум", СтрокаПоказателя.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР",
											СтрокаПоказателя.ЗначенияКонтролируемыхПоказателейИзОР);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР", СтрокаПоказателя.ИзТиповогоОР);
	ИначеЕсли НеУчитыватьОР Тогда
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", ИзмеряемыйПоказатель.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум", ИзмеряемыйПоказатель.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум", ИзмеряемыйПоказатель.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум", ИзмеряемыйПоказатель.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР", Ложь);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР", Ложь);
	Иначе
		СтруктураЗначенийПолей = Новый Структура();	
	КонецЕсли;
	
	Если ИзмеряемыйПоказатель.ТипЗначения = Неопределено Тогда
		Возврат СтруктураЗначенийПолей;
	КонецЕсли;	
		
	Если ИзмеряемыйПоказатель.ТипЗначения.СодержитТип(Тип(СтрЧисло)) Тогда
		Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМаксимум) = Тип(СтрЧисло) Тогда
			СтруктураЗначенийПолей.ДопустимыйМаксимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМинимум) = Тип(СтрЧисло) Тогда
			СтруктураЗначенийПолей.КритическийМинимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМаксимум) = Тип(СтрЧисло) Тогда
			СтруктураЗначенийПолей.КритическийМаксимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМинимум) = Тип(СтрЧисло) Тогда
			СтруктураЗначенийПолей.ДопустимыйМинимум = 0;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СтруктураЗначенийПолей;
	
КонецФункции   

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
		ТекущиеДанные.ИзТиповогоОР = Не ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР;
	КонецЕсли;
	
	ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из ЭтаФорма.СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе", "ОбъектыРемонта", СписокОтбора, Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные.ИзТиповогоОР Тогда
		СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", Объект.Ссылка, ТекущиеДанные.Показатель);
		
		// Взамен удаленной добавим строку типового, если такая есть
		ДанныеПоказателяТипового = ПолучитьДанныеПоказателяТипового(ТекущиеДанные.Показатель, Объект.ТиповойОР);
		Если ДанныеПоказателяТипового <> Неопределено Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоказателяТипового);
		КонецЕсли;
	Иначе 
		Отказ = Истина;
		ТекущиеДанные.Удален = Не ТекущиеДанные.Удален;
		Если ТекущиеДанные.Удален Тогда
			ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка, "СписокИзмеряемыхПоказателей");
		Иначе
			ТекущиеДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьИзмеряемыхПоказателей = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если Копирование И ТекущиеДанные.ИзТиповогоОР Тогда
		ТекущиеДанные.ИзТиповогоОР = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		Иначе
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ТекущиеДанные.Показатель, Объект.Ссылка, Истина);
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
			
			ЗначениеРеквизита = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Показатель, "ТипЗначения");
			Если Не ЗначениеРеквизита = Неопределено Тогда
				ТекущиеДанные.Доступность = ЗначениеРеквизита.СодержитТип(Тип("Число"));
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		СтруктураПоиска = Новый Структура("Показатель", ВыбранноеЗначение);
		СписокПоказателейВТаблице = ЭтаФорма.СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска);
		
		Если СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
			Строка = СписокПоказателейВТаблице[0];
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(Строка.Показатель, Объект.Ссылка, Истина);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);
			Строка.ОбъектРемонта = Объект.Ссылка;
			Строка.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
			Строка.ИзТиповогоОР = Ложь;
			Строка.Удален = Ложь;
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		ИначеЕсли СписокПоказателейВТаблице.Количество() >= 1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));	
			
		Иначе	
			НС = ЭтаФорма.СписокИзмеряемыхПоказателей.Добавить();
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, Объект.Ссылка, Истина);
			СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
			СтруктураЗначенийПолей.Вставить("Показатель", ВыбранноеЗначение);
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				СтруктураЗначенийПолей.Вставить("Доступность", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ТипЗначения").СодержитТип(Тип("Число")));
			Иначе
				СтруктураЗначенийПолей.Вставить("Доступность", Ложь);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НС, СтруктураЗначенийПолей);
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	МодифицированностьИзмеряемыхПоказателей = Истина;
	Элементы.СписокИзмеряемыхПоказателей.Обновить();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоказателяТипового(Показатель, Типовой)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ТиповойОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |	КОНЕЦ КАК ДопустимыйМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |	КОНЕЦ КАК ДопустимыйМаксимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |	КОНЕЦ КАК КритическийМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |	КОНЕЦ КАК КритическийМаксимум,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера
	               |ИЗ
	               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ПВХИзмеряемыеПоказателиОбъектовРемонта
	               |		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.Ссылка
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ТиповыеОР)) = &ТиповойОР
	               |	И торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = &Показатель";
	
	Запрос.УстановитьПараметр("ТиповойОР", Типовой);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврат = Новый Структура("ТиповойОР,Показатель, ДопустимыйМинимум,ДопустимыйМаксимум, 
											|КритическийМинимум, КритическийМаксимум,ЗначенияКонтролируемыхПоказателейИзОР,
											|ТочкаЗамера,ИзТиповогоОР,Удален");
		ЗаполнитьЗначенияСвойств(СтруктураВозврат,Выборка);
		СтруктураВозврат.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		СтруктураВозврат.ИзТиповогоОР = Истина;
		СтруктураВозврат.Удален = Ложь;					
		
		Возврат СтруктураВозврат;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодборКонтролируемыхПоказателей(Команда)
	
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из ЭтаФорма.СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе",
		"ОбъектыРемонта", СписокОтбора, Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора",
		ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, Объект.Ссылка);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказыватьУдаленныеПоказатели(Команда)
	Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка = Не Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка, "СписокИзмеряемыхПоказателей");
КонецПроцедуры

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаКлиенте
Процедура СписокПараметровНаработкиПериодПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекущаяСтрока = Элементы.СписокПараметровНаработки.ТекущаяСтрока;
	Если ТекущиеДанные <> Неопределено И СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа <> Неопределено Тогда
		Если НЕ СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа И ТекущиеДанные.Период < СтруктураНеОсновныхРеквизитовОР.ДатаВыпуска Тогда
			ТекстСообщения = Нстр("ru='Дата ввода наработки не может быть меньше даты выпуска.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СписокПараметровНаработки[" + ТекущаяСтрока + "].Период");
			ТекущиеДанные.Период = ?(ЗначениеЗаполнено(СтруктураДанныхДоРедактирования["СписокПараметровНаработки"]),
										СтруктураДанныхДоРедактирования["СписокПараметровНаработки"].Период,
										ТекущиеДанные.Период);							
		КонецЕсли;
		торо_СобытияФормКлиентСервер.ОбновитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Родитель.Имя, "Период", ТекущиеДанные.Период);								
	КонецЕсли;
КонецПроцедуры  

&НаКлиенте
Процедура СписокПараметровНаработкиПоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		НайденныеСтроки = ЭтаФорма.СписокПараметровНаработки.НайтиСтроки(Новый Структура("Показатель", ТекущиеДанные.Показатель));
		Если НайденныеСтроки.Количество() = 1 Тогда 
			ТекущиеДанные.Период = СтруктураНеОсновныхРеквизитовОР.ДатаВводаВЭксплуатацию;
		Иначе 
			ТекущиеДанные.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Показатель", ТекущиеДанные.Показатель);
	Если Не Элементы.ТаблицаМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксимальныеЗначенияНаработки.Пометка Тогда
		СтруктураОтбора.Вставить("Удален", Ложь);
	КонецЕсли;
	Элементы.ТаблицаМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не НоваяСтрока Тогда
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
		Элемент.ТекущиеДанные.НаработкаОбъектРемонта = Объект.Ссылка;
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда 
			Элемент.ТекущиеДанные.Период = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДатаВводаВЭксплуатацию");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И ОтменаРедактирования Тогда
		// Возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.НаработкаОбъектРемонта = Объект.Ссылка;
		
		МодифицированностьПараметровНаработки = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПослеУдаления(Элемент)
	МодифицированностьПараметровНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОсновныеТаблицы()
	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.ТиповойОР);
	ЭтаФорма.СписокПараметровНаработки.Очистить();
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = ЭтаФорма.СписокПараметровНаработки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		НС.НаработкаОбъектРемонта = Элем.ОбъектРемонта;
		НС.НаработкаПоказатель = Элем.Показатель;
	КонецЦикла;
		
	МассивСтруктураКонтролируемыхПоказателей = ОбновитьИзмеряемыеПоказатели(Объект.Ссылка, Объект.ТиповойОР);
	ЭтаФорма.СписокИзмеряемыхПоказателей.Очистить();
	Для каждого ЭлементМассива Из МассивСтруктураКонтролируемыхПоказателей Цикл
		НС = ЭтаФорма.СписокИзмеряемыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
		//++ Проф-ИТ, #260, Иванова Е.С., 19.09.2023   
		НС.ПоказателиОбъектРемонта = ЭлементМассива.ОбъектРемонта;
		НС.ПоказателиТиповойОР = ЭлементМассива.ТиповойОР;
		//-- Проф-ИТ, #260, Иванова Е.С., 19.09.2023
	КонецЦикла; 
	
	СтруктураВозвратаСтратегический = ОбновитьПолучитьТаблицуПараметровНаработкиСтратегический(Объект.Ссылка, Объект.ТиповойОР);
	ЭтаФорма.СписокПараметровНаработкиСтратегический.Очистить();
	
	Для каждого Элем Из СтруктураВозвратаСтратегический Цикл
		НС = ЭтаФорма.СписокПараметровНаработкиСтратегический.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		НС.СтратегическийОбъектРемонта = Элем.ОбъектРемонта;
		НС.СтратегическийПоказатель = Элем.Показатель;
	КонецЦикла;   
		   
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ОбновитьИзмеряемыеПоказатели(ОбъектРемонта, ТиповойОР)
	СтруктураВозврата = Новый Массив;
	
	СписокТиповых = Новый Массив;
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		СписокТиповых.Добавить(ТиповойОР);
	КонецЕсли;
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	ТаблицаРодителейТиповых.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРодителейТиповых.ЗаполнитьЗначения(ОбъектРемонта, "ОбъектРемонта");
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,,Истина,,ТаблицаРодителейТиповых);
	
	Для каждого СтрокаПоказатель из МассивПоказателей Цикл
		СтруктураСтроки = Новый Структура("ОбъектРемонта, Показатель, ДопустимыйМинимум,
										  |ДопустимыйМаксимум, КритическийМинимум, КритическийМаксимум,
										  |ЗначенияКонтролируемыхПоказателейИзОР, ИзТиповогоОР,
    									  |ТочкаЗамера ,ТиповойОР, Удален, Доступность");
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаПоказатель);
		СтруктураСтроки.Доступность = Истина;
		
		Если Не ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.ДопустимыйМаксимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.КритическийМинимум) = Тип("Число") Тогда
			СтруктураСтроки.КритическийМинимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.КритическийМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.КритическийМаксимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.ДопустимыйМаксимум = Неопределено;
		КонецЕсли;
		
		СтруктураСтроки.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураСтроки.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
		
		СтруктураВозврата.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции 

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023

&НаСервереБезКонтекста
Функция ОбновитьПолучитьТаблицуПараметровНаработкиСтратегический (ОбъектРемонта, ТиповойОР)
		Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Период КАК Период,
	|	0 КАК Приоритет,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка КАК ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Основной КАК Основной
	|ПОМЕСТИТЬ ПоказателиОР
	|ИЗ
	|	РегистрСведений.проф_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|ГДЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРодителей.Уровень КАК Приоритет,
	|	ТаблицаРодителей.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	ТаблицаРодителей.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ПоказателиГрупп
	|ИЗ
	|	РегистрСведений.проф_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|					(ВЫБРАТЬ
	|						ТаблицаРодителей.Родитель КАК Родитель
	|					ИЗ
	|						ТаблицаРодителей КАК ТаблицаРодителей)
	|				И НЕ Показатель В
	|						(ВЫБРАТЬ
	|							ПоказателиОР.Показатель КАК Показатель
	|						ИЗ
	|							ПоказателиОР КАК ПоказателиОР)) КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
	|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиГрупп.ОбъектРемонта КАК ОбъектРемонта,
	|	ПоказателиГрупп.Показатель КАК Показатель,
	|	ПоказателиГрупп.Период КАК Период,
	|	ПоказателиГрупп.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ПоказателиГруппУникальные
	|ИЗ
	|	ПоказателиГрупп КАК ПоказателиГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоказателиГрупп.Показатель КАК Показатель,
	|			МИНИМУМ(ПоказателиГрупп.Приоритет) КАК Приоритет
	|		ИЗ
	|			ПоказателиГрупп КАК ПоказателиГрупп
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПоказателиГрупп.Показатель) КАК ВложенныйЗапрос
	|		ПО ПоказателиГрупп.Показатель = ВложенныйЗапрос.Показатель
	|			И ПоказателиГрупп.Приоритет = ВложенныйЗапрос.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПоказательНаработки КАК ПоказательНаработки,
	|	МАКСИМУМ(торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ЗначениеНаработки) КАК ЗначениеНаработки
	|ПОМЕСТИТЬ ГарантийныеРесурсы
	|ИЗ
	|	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	|ГДЕ
	|	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПроверятьНаработку
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПоказательНаработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказательНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ПоказателиОР.Показатель КАК Показатель,
	|	ПоказателиОР.Период КАК Период,
	|	ПоказателиОР.Приоритет КАК Приоритет,
	|	ПоказателиОР.ПлановаяНаработка КАК ПлановаяНаработка,
	|	ПоказателиОР.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
	|	ПоказателиОР.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
	|	ПоказателиОР.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования,
	|	ЕСТЬNULL(ГарантийныеРесурсы.ЗначениеНаработки, 0) КАК РесурсГарантии,
	|	ПоказателиОР.Основной КАК Основной
	|ИЗ
	|	ПоказателиОР КАК ПоказателиОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГарантийныеРесурсы КАК ГарантийныеРесурсы
	|		ПО ПоказателиОР.Показатель = ГарантийныеРесурсы.ПоказательНаработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиГруппУникальные.ОбъектРемонта,
	|	ПоказателиГруппУникальные.Показатель,
	|	ПоказателиГруппУникальные.Период,
	|	ПоказателиГруппУникальные.Приоритет,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ЕСТЬNULL(ГарантийныеРесурсы.ЗначениеНаработки, 0),
	|	ЛОЖЬ
	|ИЗ
	|	ПоказателиГруппУникальные КАК ПоказателиГруппУникальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГарантийныеРесурсы КАК ГарантийныеРесурсы
	|		ПО ПоказателиГруппУникальные.Показатель = ГарантийныеРесурсы.ПоказательНаработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ТиповойОР, Истина);
	
	// Увеличим приоритеты на 1, т.к. 0 - это приоритет самого ОР.
	Для каждого СтрокаРодителя из ТаблицаРодителей Цикл
		СтрокаРодителя.Уровень = СтрокаРодителя.Уровень + 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивВозврата = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
	
	Возврат МассивВозврата;	
КонецФункции	

&НаСервереБезКонтекста
Функция ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта, ТиповойОР)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_МаксимальныеЗначенияНаработкиОР.Показатель КАК Показатель,
	|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс КАК НазначенныйРесурс,
	|	0 КАК Приоритет,
	|	торо_МаксимальныеЗначенияНаработкиОР.Удален КАК Удален
	|ПОМЕСТИТЬ ВсеПараметры
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс,
	|	1,
	|	торо_МаксимальныеЗначенияНаработкиОР.Удален
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &Типовой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПараметры.ОбъектРемонта КАК ОбъектРемонта,
	|	ВсеПараметры.Показатель КАК Показатель,
	|	ВсеПараметры.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	ВсеПараметры.НазначенныйРесурс КАК НазначенныйРесурс,
	|	ВсеПараметры.Удален КАК Удален
	|ИЗ
	|	ВсеПараметры КАК ВсеПараметры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			ВсеПараметры.Показатель КАК Показатель,
	|			МИНИМУМ(ВсеПараметры.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВсеПараметры КАК ВсеПараметры
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВсеПараметры.Показатель) КАК ВложенныйЗапрос
	|		ПО ВсеПараметры.Показатель = ВложенныйЗапрос.Показатель
	|			И ВсеПараметры.Приоритет = ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Типовой", ТиповойОР);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл	
		СтруктураПараметр = Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс, Удален");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
		СтруктураВозврата.Добавить(СтруктураПараметр);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции

//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаКлиенте
Процедура ЗаполнитьПоказательИзТипового(Команда)
	ЗаполнитьПоказатели(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(ЗаполнитьТекущийПоказатель = Ложь, ЗаполнитьВыбранныеПоказатели = Ложь)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	МассивПоказателей = Новый Массив();
	МассивСтрокПоказателей = Новый Массив();
	ЕстьЗаполненныеПоля = Ложь;
	
	Если ЗаполнитьТекущийПоказатель И Не ТекущиеДанные = Неопределено Тогда
	    МассивПоказателей.Добавить(ТекущиеДанные.НаработкаПоказатель);
		ЕстьЗаполненныеПоля = ЗначениеЗаполнено(ТекущиеДанные.ПлановаяНаработка)
								Или ЗначениеЗаполнено(ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки)
								Или ЗначениеЗаполнено(ТекущиеДанные.ПериодПлановойНаработки)
								Или ЗначениеЗаполнено(ТекущиеДанные.КоэффициентИспользованияОборудования);
	ИначеЕсли ЗаполнитьВыбранныеПоказатели Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.СписокПараметровНаработки.ВыделенныеСтроки Цикл
			Показатель = ЭтаФорма.СписокПараметровНаработки.НайтиПоИдентификатору(ВыделеннаяСтрока);
			МассивПоказателей.Добавить(Показатель.НаработкаПоказатель);
			МассивСтрокПоказателей.Добавить(Показатель);
			ЕстьЗаполненныеПоля = ЗначениеЗаполнено(Показатель.ПлановаяНаработка)
									Или ЗначениеЗаполнено(Показатель.ПродолжительностьПериодаПлановойНаработки)
									Или ЗначениеЗаполнено(Показатель.ПериодПлановойНаработки)
									Или ЗначениеЗаполнено(Показатель.КоэффициентИспользованияОборудования);
		КонецЦикла;
	Иначе
		Для каждого СтрокаПоказателя Из ЭтаФорма.СписокПараметровНаработки Цикл
			МассивПоказателей.Добавить(СтрокаПоказателя.НаработкаПоказатель);
			ЕстьЗаполненныеПоля = ЗначениеЗаполнено(СтрокаПоказателя.ПлановаяНаработка)
									Или ЗначениеЗаполнено(СтрокаПоказателя.ПродолжительностьПериодаПлановойНаработки)
									Или ЗначениеЗаполнено(СтрокаПоказателя.ПериодПлановойНаработки)
									Или ЗначениеЗаполнено(СтрокаПоказателя.КоэффициентИспользованияОборудования);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивПоказателей.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Выберите показатель!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивПоказателейСЗначениями = ПоказателиИзТиповыхОР(Объект.ТиповойОР, МассивПоказателей);
	Если МассивПоказателейСЗначениями.Количество() = 0 Тогда
	    ШаблонСообщения = НСтр("ru = 'Не выбран ни один показатель из типового ОР %1!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.ТиповойОР);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметр = Новый Структура;
	СтруктураПараметр.Вставить("ТекущиеДанные", ?(ЗаполнитьТекущийПоказатель, ТекущиеДанные, Неопределено));
	СтруктураПараметр.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметр.Вставить("МассивСтрокПоказателей", МассивСтрокПоказателей);
	СтруктураПараметр.Вставить("ПоказателиСЗначениями", МассивПоказателейСЗначениями);
	Если ЕстьЗаполненныеПоля Тогда
		ТекстВопроса = НСтр("ru = 'У некоторых показателей заполнены поля. Перезаполнить их?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоказателиЗавершение", ЭтотОбъект, СтруктураПараметр);
	    ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
	    ЗаполнитьПоказателиЗавершение(КодВозвратаДиалога.Да, СтруктураПараметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	МассивПоказателей = ДополнительныеПараметры.МассивПоказателей;
	МассивСтрокПоказателей = ДополнительныеПараметры.МассивСтрокПоказателей;
	ПоказателиСЗначениями = ДополнительныеПараметры.ПоказателиСЗначениями;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗаполнитьПоказатель(ТекущиеДанные, ПоказателиСЗначениями[0], РезультатВопроса);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ПоказателиСЗначениями) = Тип("Соответствие") Тогда
	    Для каждого СтрокаТЧ Из МассивСтрокПоказателей Цикл
		    НайденныйПоказатель = ПоказателиСЗначениями.Получить(СтрокаТЧ.Показатель);
			Если Не ЗначениеЗаполнено(НайденныйПоказатель) Тогда
			    Продолжить;
			КонецЕсли;
			
			ЗаполнитьПоказатель(СтрокаТЧ, НайденныйПоказатель, РезультатВопроса);
		КонецЦикла;
	КонецЕсли;	
	
	Если ТипЗнч(ПоказателиСЗначениями) = Тип("Массив") Тогда
	    Для каждого Показатель Из ПоказателиСЗначениями Цикл
			СтруктураПоиска = Новый Структура("НаработкаПоказатель", Показатель.Показатель);
			НайденныеПоказатели = ЭтаФорма.СписокПараметровНаработки.НайтиСтроки(СтруктураПоиска);
			
			Для каждого НайденныйПоказатель Из НайденныеПоказатели Цикл
				ЗаполнитьПоказатель(НайденныйПоказатель, Показатель, РезультатВопроса);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранныеПоказателиИзТипового(Команда)
	ЗаполнитьПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиИзТипового(Команда)
	ЗаполнитьПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатель(СтрокаПоказателя, НайденныйПоказатель, РезультатВопроса)
	ИсключаемыеСвойства = "";
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПлановаяНаработка) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПлановаяНаработка,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПродолжительностьПериодаПлановойНаработки) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПродолжительностьПериодаПлановойНаработки,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПериодПлановойНаработки) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПериодПлановойНаработки,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.КоэффициентИспользованияОборудования) И РезультатВопроса = КодВозвратаДиалога.Нет, "КоэффициентИспользованияОборудования,", "");
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
	    ИсключаемыеСвойства = Лев(ИсключаемыеСвойства, СтрДлина(ИсключаемыеСвойства) - 1);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПоказателя, НайденныйПоказатель,, ИсключаемыеСвойства);
	СтрокаПоказателя.НаработкаОбъектРемонта = Объект.Ссылка;
	МодифицированностьПараметровНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказателиИзТиповыхОР(Знач ТиповойОР, Знач МассивПоказателей, Знач ВернутьСоответствие = Ложь)
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРодителей.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	
	НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
	НоваяСтрокаТабл.Родитель = ТиповойОР;
	НоваяСтрокаТабл.Приоритет = 1;
	
	СчетчикЦикла = 2;
	
	Пока ЗначениеЗаполнено(ТиповойОР.Родитель) Цикл
		НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
		НоваяСтрокаТабл.Родитель = ТиповойОР.Родитель;;
		НоваяСтрокаТабл.Приоритет = СчетчикЦикла;
		СчетчикЦикла = СчетчикЦикла + 1;
		ТиповойОР = ТиповойОР.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ТаблицаРодителей.Приоритет КАК Приоритет,
					|	ТаблицаРодителей.Родитель КАК Родитель
					|	
					|ПОМЕСТИТЬ ТаблицаРодителей
					|ИЗ
					|	&ТаблицаРодителей КАК ТаблицаРодителей
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
					|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка КАК ПлановаяНаработка,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
					|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования,
					|	ТаблицаРодителей.Приоритет
					|ПОМЕСТИТЬ ПоказателиГрупп
					|ИЗ
					|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
					|			,
					|			ОбъектРемонта В
					|					(ВЫБРАТЬ
					|						ТаблицаРодителей.Родитель
					|					ИЗ
					|						ТаблицаРодителей КАК ТаблицаРодителей)
					|			И Показатель В (&Показатели)) КАК торо_ПараметрыНаработкиОбъектовРемонта
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
					|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПоказателиГрупп.ОбъектРемонта КАК ОбъектРемонта,
					|	ПоказателиГрупп.Показатель КАК Показатель,
					|	ПоказателиГрупп.ПлановаяНаработка КАК ПлановаяНаработка,
					|	ПоказателиГрупп.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
					|	ПоказателиГрупп.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
					|	ПоказателиГрупп.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
					|ИЗ
					|	ПоказателиГрупп КАК ПоказателиГрупп
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ  (ВЫБРАТЬ
					|									ПоказателиГрупп.Показатель КАК Показатель,
					|									МИНИМУМ(ПоказателиГрупп.Приоритет) КАК Приоритет
					|						    	ИЗ
					|									ПоказателиГрупп КАК ПоказателиГрупп
					|		
					|								СГРУППИРОВАТЬ ПО
					|									ПоказателиГрупп.Показатель) КАК ВложенныйЗапрос
					|		ПО ПоказателиГрупп.Показатель = ВложенныйЗапрос.Показатель
					|			И ПоказателиГрупп.Приоритет = ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("Показатели", МассивПоказателей);
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВернутьСоответствие Тогда
	    ПоказателиСЗначениями = Новый Соответствие;
	Иначе
	    ПоказателиСЗначениями = Новый Массив;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметра = Новый Структура("ОбъектРемонта, Показатель, ПлановаяНаработка, ПериодПлановойНаработки, ПродолжительностьПериодаПлановойНаработки, КоэффициентИспользованияОборудования");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, ВыборкаДетальныеЗаписи);
		Если ВернутьСоответствие Тогда
		    ПоказателиСЗначениями.Вставить(ВыборкаДетальныеЗаписи.Показатель, СтруктураПараметра);
		Иначе
		    ПоказателиСЗначениями.Добавить(СтруктураПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиСЗначениями;
КонецФункции

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовСтраницыЖурналОбъектовРемонта

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАктыРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеДокументы(ЭлементФормы)
	Если Не ТипЗнч(ЭлементФормы) = Тип("Строка") Тогда
	    Возврат;
	КонецЕсли;
	
	Кнопка = Элементы[ЭлементФормы];
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьТолькоЗавершенныеАктыРМ(Команда)
	Кнопка = Элементы.ВыполненныеРегламентныеМероприятияОтображатьТолькоЗавершенныеАктыРМ;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервереПроф();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	Если Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРемонты Тогда
		ИмяВложеннойСтраницы = Элементы.СтраницыРемонтов.ТекущаяСтраница.Имя;
	ИначеЕсли Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРегламентныеМероприятия Тогда
		ИмяВложеннойСтраницы = Элементы.СтраницыРегламентныхМероприятий.ТекущаяСтраница.Имя;
	Иначе
	    Возврат;
	КонецЕсли;
	
	ИмяТаблицы = СтрЗаменить(ИмяВложеннойСтраницы, "Страница", "");
	Элементы[ИмяТаблицы].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРегламентныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, Поле = "Документ")
	Если Не ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ТекущиеДанные[Поле];
	ID = "";
	ИмяФормыДляОткрытия = "Документ." + ПолучитьИмяОбъектаМетаданных(Документ) + ".ФормаОбъекта";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ID = ТекущиеДанные.ID;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Документ);
	Если ЗначениеЗаполнено(ID) Тогда
	    ПараметрыФормы.Вставить("ID", ID);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
	    Возврат "";
	КонецЕсли;
	
	Возврат Ссылка.Метаданные().Имя;
КонецФункции

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеНарядыНаРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НарядыНаРегламентныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДефект(Команда)
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ОбъектРемонта", Объект.Ссылка);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ФормаДокумента = ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеДефекты(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеВД(Команда)
	Кнопка = Элементы.ВыявленныеДефектыОтображатьОтмененныеВД;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервереПроф();
КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеДефектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры  

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеВнешниеОснования(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеВО(Команда)
	Кнопка = Элементы.ВнешниеОснованияОтображатьОтмененныеВО;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервереПроф();
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеППР(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененные(Команда)
	Кнопка = Элементы.ПредстоящиеРемонтыОтображатьОтмененные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервереПроф();
КонецПроцедуры

&НаКлиенте
Процедура ПредстоящиеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не СтрНайти(Поле.Имя, "Документ") = 0 Тогда
	    ИмяПоля = СтрЗаменить(Поле.Имя, "ПредстоящиеРемонты", "");
		ТаблицаВыбор(Элемент, ИмяПоля);
	Иначе
	    ТаблицаВыбор(Элемент);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеЗаявки(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеНаряды(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НарядыНаВыполнениеРемонтныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАкты(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоЗавершенные(Команда)
	Кнопка = Элементы.ВыполненныеРемонтыОтображатьТолькоЗавершенные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервереПроф();
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАктыПриемки(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АктПриемкиОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПуски(Команда)
	ОбновитьПускиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПускиНаСервере()
	ЭтаФорма.КоличествоПусков.Загрузить(РегистрыНакопления.торо_КоличествоПусковОР.Обороты(,, Новый Структура("ОбъектРемонта", Объект.Ссылка)));
КонецПроцедуры 

&НаКлиенте
Процедура ВводЗначенияКонтролируемыхПоказателей(Команда)
	
	СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Объект.Ссылка);
	Если СтруктураВозврата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для выбранного объекта ремонта не заданы контролируемые показатели.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ПараметрыОповещения = Новый Структура("ИмяДокумента", "торо_УчетКонтролируемыхПоказателей");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПоказателиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ТекстЗаголовкаОкна = НСтр("ru = 'Выберите необходимые показатели'");
	
	ОбщийСписокКонтролируемыхПоказателей = Новый СписокЗначений;
	Для каждого Строка Из СтруктураВозврата Цикл
	    ОбщийСписокКонтролируемыхПоказателей.Добавить(Строка.Показатель,, Истина);
	КонецЦикла; 
	
	ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Знач ОбъектРемонта)
	Возврат ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта, , Истина);
КонецФункции 

&НаКлиенте
Процедура ПолучитьПоказателиЗавершение(СписокЗначенийСПометками, ДополнительныеПараметры) Экспорт
	
	Если СписокЗначенийСПометками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОснования = ПолучитьСтруктуруОснованияПоказателей(СписокЗначенийСПометками);
	Если Не ЗначениеЗаполнено(СтруктураОснования) Тогда
	    Возврат;
	КонецЕсли;
	
	ИмяДокумента = "Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	ОткрытьФорму("Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруОснованияПоказателей(СписокЗначенийСПометками)
	
	ВыбранныеПоказатели = Новый Массив;
	
	Для каждого Показатель из СписокЗначенийСПометками Цикл
		Если Показатель.Пометка Тогда
			СтруктураСтроки = Новый Структура("Иерархия, Показатель", ТекСтруктураИерархии, Показатель.Значение);
			ВыбранныеПоказатели.Добавить(СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеПоказатели.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОР = Новый Структура("ОбъектРемонта, Показатели", Объект.Ссылка, ВыбранныеПоказатели);
	
	МассивОР = Новый Массив();
	МассивОР.Добавить(СтруктураОР);
	
	СтруктураОснования = Новый Структура("ОбъектыРемонта", МассивОР);
	Возврат СтруктураОснования;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначенияКонтролируемыхПоказателей(Команда)
	ОбновитьЗначенияКонтролируемыхПоказателейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияКонтролируемыхПоказателейНаСервере()
	СписокТиповых = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		СписокТиповых.Добавить(Объект.ТиповойОР);
	КонецЕсли;
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	ТаблицаРодителейТиповых.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРодителейТиповых.ЗаполнитьЗначения(Объект.Ссылка, "ОбъектРемонта");
	
	ТаблицаПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(Объект.Ссылка,, Истина,, ТаблицаРодителейТиповых, Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМинимум КАК ДопустимыйМинимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.КритическийМинимум КАК КритическийМинимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.КритическийМаксимум КАК КритическийМаксимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ИсходныйОР КАК ОбъектРемонта,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ВТ_ТаблицаМаксимальныхЗначенийПоказателей
	               |ИЗ
	               |	&ТаблицаМаксимальныхЗначений КАК ТаблицаМаксимальныхЗначенийПоказателей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Период КАК Период,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Регистратор КАК Регистратор,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.НомерСтроки КАК НомерСтроки,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Активность КАК Активность,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля КАК ДатаКонтроля,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта КАК ОбъектРемонта,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Показатель КАК Показатель,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение КАК Значение,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.МоментВремени КАК МоментВремени,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМинимум КАК ДопустимыйМинимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.КритическийМинимум КАК КритическийМинимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.КритическийМаксимум КАК КритическийМаксимум,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗначениеКПОР,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакНедопустимоеЗначение
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВыделятьКакНедопустимоеЗначение,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакКритическоеЗначение
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВыделятьКакКритическоеЗначение
	               |ИЗ
	               |	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаМаксимальныхЗначенийПоказателей КАК ВТ_ТаблицаМаксимальныхЗначенийПоказателей
	               |		ПО РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ОбъектРемонта
	               |			И РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Показатель = ВТ_ТаблицаМаксимальныхЗначенийПоказателей.Показатель
	               |ГДЕ
	               |	НЕ РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Регистратор.Организация ЕСТЬ NULL
	               |	И РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаМаксимальныхЗначений", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.ЗначенияКонтролируемыхПоказателей.Загрузить(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоКонтролируемымПоказателям(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПараметрыОтбора = Новый Структура("ПериодОтчета", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ОтчетПоКонтролируемымПоказателям.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостоянияПоПоказателям(Команда)
	ТекущиеДанные = Элементы.ЗначенияКонтролируемыхПоказателей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В журнале контролируемых показателей нет ни одной строки. Невозможно сформировать отчет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыОтбора = Новый Структура("ПериодВыполнени", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыОтчет = Новый Структура();
	ПараметрыОтчет.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыОтчет.Вставить("ОбъектРемонта", Объект.Ссылка);	
	ПараметрыОтчет.Вставить("ТекПоказатель", ТекущиеДанные.Показатель);
	ПараметрыОтчет.Вставить("ТекПоказательНаработки", Неопределено);
	ПараметрыОтчет.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек", Ложь);
	
	ОткрытьФорму("Отчет.торо_СостояниеОборудования.Форма",ПараметрыОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПоказатьЛегенду(Команда)
	ЭлементФормыКнопка = Элементы.ЗначенияКонтролируемыхПоказателейПоказатьЛегенду;
	ВидимостьЛегенды = Не ЭлементФормыКнопка.Пометка;
	ЭлементФормыКнопка.Пометка = ВидимостьЛегенды;
	Элементы.ЗначенияКонтролируемыхПоказателейЛегенда.Видимость = ВидимостьЛегенды;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ВводНаработки(Команда)
	
	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.ТиповойОР);
	Если СтруктураВозврата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для выбранного объекта ремонта не заданы показатели наработки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ОбщийСписокКонтролируемыхПоказателей = Новый СписокЗначений;
	СписокНезаполненныхПоказателей = Новый СписокЗначений;
	Для каждого Строка Из СтруктураВозврата Цикл
		Если ОбщийСписокКонтролируемыхПоказателей.НайтиПоЗначению(Строка.Показатель) = Неопределено 
			И ЗначениеЗаполнено(Строка.ПродолжительностьПериодаПлановойНаработки) Тогда
			ОбщийСписокКонтролируемыхПоказателей.Добавить(Строка.Показатель,, Истина);
		Иначе
			СписокНезаполненныхПоказателей.Добавить(Строка.Показатель,, Истина);
		КонецЕсли;
	КонецЦикла; 
	
	Если Не ОбщийСписокКонтролируемыхПоказателей.Количество() = 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяДокумента", "торо_УчетНаработкиОборудования");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПоказателиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите необходимые показатели'");
	
		ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	КонецЕсли;
	
	Для Каждого Значение Из СписокНезаполненныхПоказателей Цикл	
		ШаблонСообщения = НСтр("ru = 'Для показателя <%1> не заполнено значение плановой наработки.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Значение.Значение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖурналНаработки(Команда)
	МассивСтрокНаработки = ПолучитьМассивДокументовНаработки(Объект.Ссылка);
	ЭтаФорма.ТаблицаВыработкиОбъектаРемонта.Очистить();
	Для каждого Элемент Из МассивСтрокНаработки Цикл
		НС = ЭтаФорма.ТаблицаВыработкиОбъектаРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элемент);
	КонецЦикла;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовНаработки(Ссылка)
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НаработкаОбъектовРемонта.Период КАК Период,
	|	торо_НаработкаОбъектовРемонта.Регистратор КАК Регистратор,
	|	торо_НаработкаОбъектовРемонта.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонта.Наработка КАК Наработка,
	|	торо_НаработкаОбъектовРемонта.ДатаНач КАК ДатаНач,
	|	торо_НаработкаОбъектовРемонта.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 28
	|		ИНАЧЕ 29
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	|ГДЕ
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И НЕ торо_НаработкаОбъектовРемонта.Регистратор.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
				   
	Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Структура = Новый Структура("Период, Регистратор, Показатель, Наработка, ВидДвижения, Картинка");
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			Массив.Добавить(Структура);	
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетНаработкаОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	//++ Проф-ИТ, #93, Башинская А.Ю., 16.09.2023
	ОткрытьФорму("Отчет.проф_НаработкаОборудования.Форма", ПараметрыФормы);
	//-- Проф-ИТ, #93, Башинская А.Ю., 16.09.2023
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОбъектРемонта", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_НаработкаОборудованияСПоследнихРемонтов.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостоянияПоНаработке(Команда)
	ТекущиеДанные = Элементы.ТаблицаВыработкиОбъектаРемонта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В журнале наработки нет ни одной строки. Невозможно сформировать отчет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыОтбора = Новый Структура("ПериодВыполнени", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыОтчет = Новый Структура();
	ПараметрыОтчет.Вставить("ОбъектРемонта",Объект.Ссылка);
	ПараметрыОтчет.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыОтчет.Вставить("ТекПоказатель", Неопределено);
	ПараметрыОтчет.Вставить("ТекПоказательНаработки", ТекущиеДанные.Показатель);
	ПараметрыОтчет.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек", Ложь);
	
	ОткрытьФорму("Отчет.торо_СостояниеОборудования.Форма", ПараметрыОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыработкиОбъектаРемонтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыработкиОбъектаРемонтаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		МассивСтрок = ЭтаФорма.ТаблицаВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		НаработкаАбсолютная  = 0;
		НаработкаПослеСброса = 0;
		Для Каждого Строка Из МассивСтрок Цикл
			Наработка = ?(Строка.ВидДвижения = ВидДвиженияНакопления.Приход, 1, -1) * Строка.Наработка;
			НаработкаПослеСброса = НаработкаПослеСброса + Наработка;
			Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НаработкаАбсолютная = НаработкаАбсолютная + Наработка;
			КонецЕсли;
		КонецЦикла;
		ТекстПодвалаНаработки = Строка(НаработкаПослеСброса) + " / " + Строка(НаработкаАбсолютная);
	Иначе
		ТекстПодвалаНаработки = "0 / 0";
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура Обновить(Команда)
	Строить = Истина;
	Если ЭтаФорма.ОтборПоПериоду Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.ДатаНачала) Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала для отбора!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания) Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания для отбора!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Строить И ЭтаФорма.ДатаНачала > ЭтаФорма.ДатаОкончания Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Дата начала для отбора больше даты окончания!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
	Если Строить Тогда	
		ПостроитьГрафикСостоянийОР();	
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ПостроитьГрафикСостоянийОР()
	
	ЭтаФорма.ГрафикСостоянийОР.Очистить();
	ЭтаФорма.ГрафикСостоянийОР.АвтоОпределениеПолногоИнтервала = Ложь;
	ЭтаФорма.ГрафикСостоянийОР.ОтображатьЛегенду = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.Период КАК Период,
	|	торо_ТекущееСостояниеОР.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаСостояний
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|ГДЕ
	|	торо_ТекущееСостояниеОР.ОбъектРемонта = &ОбъектРемонта
	|	И торо_ТекущееСостояниеОР.Период > &ДатаНачала
	|	И торо_ТекущееСостояниеОР.Период < &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОРСрезПоследних.Период,
	|	торо_ТекущееСостояниеОРСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ДатаНачала, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_ТекущееСостояниеОРСрезПервых.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОРСрезПервых.Период,
	|	торо_ТекущееСостояниеОРСрезПервых.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПервых(&ДатаОкончания, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПервых
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаСостояний.Период КАК Период,
	|	МИНИМУМ(ЕСТЬNULL(ВспромогательнаяТаблица.Период, &ТекДата)) КАК ДатаКон,
	|	ТаблицаСостояний.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОткрытоеСостояние
	|ИЗ
	|	ТаблицаСостояний КАК ТаблицаСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ВспромогательнаяТаблица
	|		ПО ТаблицаСостояний.Период < ВспромогательнаяТаблица.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСостояний.Период,
	|	ТаблицаСостояний.ВидЭксплуатации,
	|	ТаблицаСостояний.Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	ВидЭксплуатации";
	
	НачальныйПериод = Макс('0001.01.01', ЭтаФорма.ДатаВводаВЭксплуатацию);
	КонечныйПериод = ?(ДатаСнятияСУчета = '0001.01.01','2999.12.31',Мин('2999.12.31', ДатаСнятияСУчета));
	Если ЭтаФорма.ОтборПоПериоду Тогда			   
		Запрос.УстановитьПараметр("ДатаНачала", ЭтаФорма.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ЭтаФорма.ДатаОкончания);
		Если ЭтаФорма.ДатаНачала > ЭтаФорма.ДатаОкончания Тогда
			ТекстСообщения = НСтр("ru = 'Дата окончания периода меньше даты начала!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", НачальныйПериод); 
		Запрос.УстановитьПараметр("ДатаОкончания", '2999.12.31');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПоВидЭксплуатации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаполнитьТабличноеПолеСостоянийОР(Результат);
	
	Серия = ЭтаФорма.ГрафикСостоянийОР.Серии.Добавить();
	Серия.Цвет = WebЦвета.Красный;
	
	НачалоПериода = Дата('0001.01.01');
	КонецПериода = Дата('0001.01.01');
	
	ЭтаФорма.ГрафикСостоянийОР.Окантовка = Истина;
	
	Пока ВыборкаПоВидЭксплуатации.Следующий() Цикл
		ТочкаДиаграммы = ГрафикСостоянийОР.Точки.Добавить();
		ТочкаДиаграммы.Текст = ВыборкаПоВидЭксплуатации.ВидЭксплуатации; 
		
		Если ТочкаДиаграммы.Текст = "" Тогда
			ТочкаДиаграммы.Текст = "Не установлено";
		КонецЕсли;
		
		Выборка = ВыборкаПоВидЭксплуатации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  Выборка.Следующий() Цикл
			Если Выборка.Период > Выборка.ДатаКон Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ЭтаФорма.ГрафикСостоянийОР.ПолучитьЗначение(ТочкаДиаграммы, Серия);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.Период;
			Интервал.Расшифровка = Выборка.Регистратор;
			
			Если Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
				Интервал.Цвет = WebЦвета.Зеленый;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
				Интервал.Цвет = WebЦвета.Красный;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
				Интервал.Цвет = WebЦвета.Синий;
			КонецЕсли;
			
			НачалоПериода = ?(НачалоПериода = Дата('0001.01.01'), Выборка.Период, Мин(НачалоПериода, Выборка.Период));	
			
			КонецПериода = Макс(Выборка.ДатаКон, КонецПериода);
			
			Если Выборка.ОткрытоеСостояние Тогда
				Интервал.Текст = "с " + Строка(Выборка.Период);
				Интервал.Конец = КонецДня(?(КонечныйПериод = '2999.12.31', Макс(Выборка.ДатаКон, ТекущаяДатаСеанса()), Макс(Выборка.ДатаКон, КонечныйПериод, ТекущаяДатаСеанса())));
			Иначе 
				Интервал.Текст = Строка(Выборка.Период) + " - " + Строка(Выборка.ДатаКон);
				Интервал.Конец = Выборка.ДатаКон;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ЭтаФорма.ОтборПоПериоду Тогда
		ДатаПланированияДляИнтервала = ЭтаФорма.ДатаНачала;
		ДатаОкончанияДляИнтервала = ЭтаФорма.ДатаОкончания;
	Иначе	
		Если ЗначениеЗаполнено(НачальныйПериод) Тогда
			ДатаПланированияДляИнтервала = НачальныйПериод;
		Иначе
			Если ЗначениеЗаполнено(НачалоПериода) Тогда
				ДатаПланированияДляИнтервала = НачалоПериода;
			Иначе
				ДатаПланированияДляИнтервала = '1000.01.01';
			КонецЕсли;
		КонецЕсли;	

		Если ЗначениеЗаполнено(КонецПериода) И Не КонечныйПериод = '2999.12.31' Тогда
			ДатаОкончанияДляИнтервала = Макс(КонецПериода, КонечныйПериод);
		Иначе
			Если КонечныйПериод = '2999.12.31' И ЗначениеЗаполнено(КонецПериода) Тогда
				ДатаОкончанияДляИнтервала = Макс(ТекущаяДатаСеанса(), КонецПериода);
			ИначеЕсли КонечныйПериод = '2999.12.31' Тогда
				ДатаОкончанияДляИнтервала = ТекущаяДатаСеанса();
			Иначе
				ДатаОкончанияДляИнтервала = КонечныйПериод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.ГрафикСостоянийОР.УстановитьПолныйИнтервал(НачалоДня(ДатаПланированияДляИнтервала),КонецДня(ДатаОкончанияДляИнтервала)); 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТабличноеПолеСостоянийОР(РезультатЗапроса)
	ЭтаФорма.ПолеТДТаблицаСостояний.Очистить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗСостояний = РезультатЗапроса.Выгрузить();
	ТЗСостояний.Сортировать("Период Возр");
	Пока ТЗСостояний[0].Период = null Цикл
		ТзСостояний.Удалить(0);
	КонецЦикла;
	ТабДок = ЭтаФорма.ПолеТДТаблицаСостояний;
	ПервичныйСдвигСтрок = 0;
	
	ВыборкаПоВидЭксплуатации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивВидов = Новый Массив;
	Пока ВыборкаПоВидЭксплуатации.Следующий() Цикл
		МассивВидов.Добавить(ВыборкаПоВидЭксплуатации.ВидЭксплуатации); 	
	КонецЦикла;
	
	ИндексСтроки = 2 + ТЗСостояний.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	ВысотаТаблицыОтКоличества = 3 + МассивВидов.Количество();
	
	КоличествоСостояний = ТЗСостояний.Количество();
	КоличествоКолонокПоляТД = 15;
	ЭтоПерваяЧастьТаблицы = Истина;

	Пока Не флВсеНарисовано Цикл
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоСостояний + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоСостояний = КоличествоСостояний - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоСостояний + 1;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ТабДок.Область(1,1,1,1);
		ОбластьВывода.ШиринаКолонки = 4; 
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,ВысотаТаблицыОтКоличества + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ОбластьВывода.ВысотаСтроки = 22;
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,ВысотаТаблицыОтКоличества + СдвигСтрокПоляТД+1);
		ОбластьВывода.ШиринаКолонки = 15;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 3,3 + СдвигСтрокПоляТД,ЧертитьКолонок+1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода.Объединить();
		
		ОбластьВывода.Текст = "Период:";
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Состояние:"; 
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
		СдвигПоляТекущий = 4;
		Для Каждого ТекущийВидЭксплуатации Из МассивВидов Цикл
			ОбластьВывода = ТабДок.Область(СдвигПоляТекущий + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = ТекущийВидЭксплуатации;
			ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			СдвигПоляТекущий = СдвигПоляТекущий + 1;
		КонецЦикла;
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ВысотаТаблицыОтКоличества;
	КонецЦикла;
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	Номер = 1;
	
	ЭтаФорма.СписокСостояний.Очистить();
	
	Для Каждого СтрокаСостояния Из ТЗСостояний Цикл
		ДопИндекс = 4;
		Для Каждого ТекущийВидЭксплуатации Из МассивВидов Цикл
			Если СтрокаСостояния.ВидЭксплуатации = ТекущийВидЭксплуатации Тогда
				Прервать;
			КонецЕсли;
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		
		ОбластьВывода2 = ТабДок.Область(ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.ШиринаКолонки = 10;
		ОбластьВывода2.Текст = Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy")) + " -"+ Символы.ПС + Строка(Формат(СтрокаСостояния.ДатаКон,"ДФ=dd.MM.yyyy"));
		
		Номер = Номер + 1;
		
		Если ОбластьВывода2.Лево = КоличествоКолонокПоляТД + 1 Тогда
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ВысотаТаблицыОтКоличества;
			Номер = 1;	
		КонецЕсли;
		
		ДобавитьСостояние(СтрокаСостояния, ОбластьВывода2.Лево, ДопИндекс + СдвигСтрокПоляТД);
		
	КонецЦикла;
	
	Если СтрокаСостояния.ОткрытоеСостояние Тогда
		ОбластьВывода2.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода2.Текст ="с " + Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСостояние(СтрокаСостояния, Лево, Низ)
	НоваяСтрока = ЭтаФорма.СписокСостояний.Добавить();
	НоваяСтрока.Ссылка = СтрокаСостояния.Регистратор;
	НоваяСтрока.Лево = Лево;
	НоваяСтрока.Низ = Низ;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЛегенду(Команда)
	Элементы.ПоказыватьЛегенду.Пометка = Не Элементы.ПоказыватьЛегенду.Пометка;
	Элементы.ЛегендаГрафика.Видимость = Элементы.ПоказыватьЛегенду.Пометка;
КонецПроцедуры

 &НаКлиенте
Процедура ПолосаРегулированияИнтервалаГрафикаПриИзменении(Элемент)
	Если ЭтаФорма.ПолосаРегулированияИнтервалаГрафика < 1 Тогда
		 ЭтаФорма.ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		 ЭтаФорма.ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		 ЭтаФорма.ГрафикСостоянийОР.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени["День"];
		 ЭтаФорма.ГрафикСостоянийОР.КратностьПериодическогоВарианта =  ЭтаФорма.ПолосаРегулированияИнтервалаГрафика;	
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОтборПоПериодуПриИзменении(Элемент)
	Если ЭтаФорма.ОтборПоПериоду Тогда
		Элементы.ДатаНачала.Доступность = Истина;
		Элементы.ДатаОкончания.Доступность = Истина;
	Иначе
		Элементы.ДатаНачала.Доступность = Ложь;
		Элементы.ДатаОкончания.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если ЭтаФорма.ДатаНачала < ЭтаФорма.ДатаВводаВЭксплуатацию Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала меньше, чем дата ввода в эксплуатацию объекта ремонта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикСостоянийОРОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	// Обход бага платформы, который выводит в расшифровке множество дублей одного документа.
	Если ТипЗнч(Расшифровки) = Тип("Массив") И Расшифровки.Количество() > 2 Тогда
		Расшифровки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Расшифровки);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Расшифровки, Неопределено);
		Если Расшифровки.Количество() = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(Неопределено, Расшифровки[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТДТаблицаСостоянийПриАктивизации(Элемент)
	СтрокаДокумент = ЭтаФорма.СписокСостояний.НайтиСтроки(Новый Структура("Лево, Низ", Элемент.ТекущаяОбласть.Лево, Элемент.ТекущаяОбласть.Низ));
	Если ЗначениеЗаполнено(СтрокаДокумент) Тогда
		ПоказатьЗначение(неопределено, СтрокаДокумент[0].Ссылка);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВводСостоянияНаДату(Команда)
	ВводСостояния();
КонецПроцедуры  

&НаКлиенте
Процедура ВводСостояния(ВидЭксплуатацииНаПериод = Ложь)
	Если Не ПроверитьСтатус("торо_СостоянияОбъектовРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = ?(Не ВидЭксплуатацииНаПериод,
		ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации"),
		ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
	
	Попытка
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
		ЗначенияЗаполнения.Вставить("ОбъектРемонта", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, СтруктураИерархии", ЗначенияЗаполнения, ТекСтруктураИерархии);
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Исключение
		ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке().Причина.Описание);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатус(ВидСоздаваемогоДокумента)
	
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Возврат Истина;
	КонецЕсли; 	
	
	ТекущийСтатусОР = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(Объект.Ссылка);
	
	ДоступныеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеЗначения.Добавить(Выборка.СтатусОРВУчете);
	КонецЦикла;
	
	Если ВидСоздаваемогоДокумента = "торо_УчетНаработкиОборудования"
		ИЛИ ВидСоздаваемогоДокумента = "торо_СостоянияОбъектовРемонта" Тогда
		
		Если ТекущийСтатусОР <> Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету
			И Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			ШаблонСообщения = НСтр("ru = 'В статусе <%1> создание документа недоступно.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийСтатусОР);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСоздаваемогоДокумента = "торо_УчетКонтролируемыхПоказателей" Тогда 
		
		Если Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			ШаблонСообщения = НСтр("ru = 'В статусе <%1> создание документа недоступно.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийСтатусОР);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ВводСостоянияНаПериод(Команда)
	ВводСостояния(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостоянияОР(Команда)
	Элементы.ТаблицаСостоянийОР.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПростойОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПараметрыОтбора = Новый Структура("ПериодОтчета", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ПростойОборудования.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстановЗапускОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Период.ДатаОкончания = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ИсторияОстановаЗапускаОборудования.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСостоянийОРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПоказателейЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаНаработка Тогда
		ОбновитьЖурналНаработки(Команды.Найти("ОбновитьЖурналНаработки"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСостояниеОР Тогда
		ПостроитьГрафикСостоянийОР();
	КонецЕсли;
КонецПроцедуры

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СозданиеЭлементовФормы

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаСервере
Процедура СоздатьСтраницуОсновное()
	
	НовыйЭлементОсновное = Элементы.Добавить("ГруппаОсновное", Тип("ГруппаФормы"), Элементы.ПанельОР);
    НовыйЭлементОсновное.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементОсновное.Заголовок = "Основное";
	НовыйЭлементОсновное.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаОсновноеВерх = Элементы.Добавить("ГруппаОсновноеВерх", Тип("ГруппаФормы"), Элементы.ГруппаОсновное);
	ГруппаОсновноеВерх.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеВерх.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ГруппаОсновноеВерхЛево = Элементы.Добавить("ГруппаОсновноеВерхЛево", Тип("ГруппаФормы"), Элементы.ГруппаОсновноеВерх);
	ГруппаОсновноеВерхЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеВерхЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеВерхЛево.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеВерхЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	НовыйЭлементГосномер = Элементы.Добавить("Госномер", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхЛево);
    НовыйЭлементГосномер.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементГосномер.ПутьКДанным = "Объект.проф_Госномер"; 
	НовыйЭлементГосномер.Заголовок = "Гос. номер";
    НовыйЭлементГосномер.ТолькоПросмотр = Истина;  
	
	НовыйЭлементVIN = Элементы.Добавить("VIN", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхЛево);
    НовыйЭлементVIN.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементVIN.ПутьКДанным = "Объект.проф_VIN";
	НовыйЭлементVIN.Заголовок = "VIN";
   	НовыйЭлементVIN.ТолькоПросмотр = Истина; 
	
	НовыйЭлементЦветКузова = Элементы.Добавить("ЦветКузова", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхЛево);
    НовыйЭлементЦветКузова.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементЦветКузова.ПутьКДанным = "Объект.проф_ЦветКузова";
	НовыйЭлементЦветКузова.Заголовок = "Цвет кузова";
   	НовыйЭлементЦветКузова.ТолькоПросмотр = Истина; 
	
	Элементы.Переместить(Элементы.ДатаВыпуска, Элементы.ГруппаОсновноеВерхЛево); 
	Элементы.Переместить(Элементы.ДатаВводаВЭксплуатацию1, Элементы.ГруппаОсновноеВерхЛево); 
	Элементы.Переместить(Элементы.ГруппаСтатусОбъектаРемонта, Элементы.ГруппаОсновноеВерхЛево);
	Элементы.ГруппаСтатусОбъектаРемонта.ОтображатьЗаголовок = Ложь;

	ГруппаОсновноеВерхПраво = Элементы.Добавить("ГруппаОсновноеВерхПраво", Тип("ГруппаФормы"), Элементы.ГруппаОсновноеВерх);
	ГруппаОсновноеВерхПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеВерхПраво.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеВерхПраво.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеВерхПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 

	НовыйЭлементГараж = Элементы.Добавить("Гараж", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхПраво);
    НовыйЭлементГараж.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементГараж.ПутьКДанным = "Объект.проф_Гараж";
	НовыйЭлементГараж.Заголовок = "Гараж";
	НовыйЭлементГараж.ТолькоПросмотр = Истина; 
	
	НовыйЭлементГаражныйНомер = Элементы.Добавить("ГаражныйНомер", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхПраво);
    НовыйЭлементГаражныйНомер.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементГаражныйНомер.ПутьКДанным = "Объект.проф_ГаражныйНомер";
	НовыйЭлементГаражныйНомер.Заголовок = "Гаражный номер";
   	НовыйЭлементГаражныйНомер.ТолькоПросмотр = Истина;   
	
	ГруппаОсновноеГрузоподъемность = Элементы.Добавить("ГруппаОсновноеГрузоподъемность",
														Тип("ГруппаФормы"),
														Элементы.ГруппаОсновноеВерхПраво);
	ГруппаОсновноеГрузоподъемность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеГрузоподъемность.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеГрузоподъемность.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеГрузоподъемность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;  
	
	НовыйЭлементГрузоподъемностьВТоннах = Элементы.Добавить("ГрузоподъемностьВТоннах",
															Тип("ПолеФормы"),
															Элементы.ГруппаОсновноеГрузоподъемность);
    НовыйЭлементГрузоподъемностьВТоннах.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементГрузоподъемностьВТоннах.ПутьКДанным = "Объект.проф_ГрузоподъемностьВТоннах";
	НовыйЭлементГрузоподъемностьВТоннах.Заголовок = "Грузоподъемность";
   	НовыйЭлементГрузоподъемностьВТоннах.ТолькоПросмотр = Истина; 

    НовыйДекорацияГрузоподъемность = Элементы.Добавить("ДекорацияГрузоподъемность",
														Тип("ДекорацияФормы"),
														ГруппаОсновноеГрузоподъемность);
	НовыйДекорацияГрузоподъемность.Вид = ВидДекорацииФормы.Надпись;
	НовыйДекорацияГрузоподъемность.Заголовок = "т";  
	
    ГруппаОсновноеВместимость = Элементы.Добавить("ГруппаОсновноеВместимость",
												 Тип("ГруппаФормы"),
												 Элементы.ГруппаОсновноеВерхПраво);
	ГруппаОсновноеВместимость.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеВместимость.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеВместимость.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеВместимость.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;  
	
	НовыйЭлементВместимостьВКубическихМетрах = Элементы.Добавить("ВместимостьВКубическихМетрах",
																Тип("ПолеФормы"),
																Элементы.ГруппаОсновноеВместимость);
    НовыйЭлементВместимостьВКубическихМетрах.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементВместимостьВКубическихМетрах.ПутьКДанным = "Объект.проф_ВместимостьВКубическихМетрах";
	НовыйЭлементВместимостьВКубическихМетрах.Заголовок = "Вместимость";
   	НовыйЭлементВместимостьВКубическихМетрах.ТолькоПросмотр = Истина; 

    НовыйДекорацияВместимость = Элементы.Добавить("ДекорацияВместимость",
												 Тип("ДекорацияФормы"),
												 ГруппаОсновноеВместимость);
	НовыйДекорацияВместимость.Вид = ВидДекорацииФормы.Надпись;
	НовыйДекорацияВместимость.Заголовок = "м3";
	
	НовыйЭлементСобственныйВес = Элементы.Добавить("СобственныйВес", Тип("ПолеФормы"), Элементы.ГруппаОсновноеВерхПраво);
    НовыйЭлементСобственныйВес.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементСобственныйВес.ПутьКДанным = "Объект.проф_СобственныйВес";
	НовыйЭлементСобственныйВес.Заголовок = "Собственный вес";
   	НовыйЭлементСобственныйВес.ТолькоПросмотр = Истина; 
	
	ГруппаОсновноеНиз = Элементы.Добавить("ГруппаОсновноеНиз", Тип("ГруппаФормы"), Элементы.ГруппаОсновное);
	ГруппаОсновноеНиз.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеНиз.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеНиз.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	
    ГруппаОсновноеНизЛево = ЭтаФорма.Элементы.Добавить("ГруппаОсновноеНизЛево", Тип("ГруппаФормы"), Элементы.ГруппаОсновноеНиз);
	ГруппаОсновноеНизЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеНизЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеНизЛево.ОтображатьЗаголовок = Ложь;  
	ГруппаОсновноеНизЛево.Ширина = 50;
	ГруппаОсновноеНизЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаТекущееМестонахождение = Элементы.Добавить("ГруппаТекущееМестонахождение",
													Тип("ГруппаФормы"),
													Элементы.ГруппаОсновноеНизЛево);
	ГруппаТекущееМестонахождение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТекущееМестонахождение.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаТекущееМестонахождение.ОтображатьЗаголовок = Истина; 
	ГруппаТекущееМестонахождение.Заголовок = "Текущее местонахождение"; 
	ГруппаТекущееМестонахождение.ШрифтЗаголовка = Новый Шрифт(,,Истина);
    ГруппаТекущееМестонахождение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	Элементы.Переместить(Элементы.Организация, Элементы.ГруппаТекущееМестонахождение);
	Элементы.Организация.АвтоМаксимальнаяШирина = Ложь; 
	Элементы.Организация.МаксимальнаяШирина = 40;
	Элементы.Переместить(Элементы.Подразделение, Элементы.ГруппаТекущееМестонахождение);
	Элементы.Подразделение.АвтоМаксимальнаяШирина = Ложь; 
    Элементы.Подразделение.МаксимальнаяШирина = 40;
	Элементы.Подразделение.Заголовок = "Подразделение"; 
		
	НовыйЭлементКолонна = Элементы.Добавить("Колонна", Тип("ПолеФормы"), Элементы.ГруппаТекущееМестонахождение);
    НовыйЭлементКолонна.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементКолонна.ПутьКДанным = "Объект.проф_Колонна";
	НовыйЭлементКолонна.Заголовок = "Колонна";
   	НовыйЭлементКолонна.ТолькоПросмотр = Истина; 
	
	Элементы.Переместить(Элементы.ПлановыйГрафикРаботы, Элементы.ГруппаОсновноеНизЛево);
	Элементы.ПлановыйГрафикРаботы.АвтоМаксимальнаяШирина = Ложь;
	Элементы.ПлановыйГрафикРаботы.МаксимальнаяШирина = 40;
	
	ГруппаОсновноеНизПраво = ЭтаФорма.Элементы.Добавить("ГруппаОсновноеНизПраво", Тип("ГруппаФормы"), Элементы.ГруппаОсновноеНиз);
	ГруппаОсновноеНизПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеНизПраво.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеНизПраво.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеНизПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    
	ГруппаОсновноеЛицензионнаяКарточка = Элементы.Добавить("ГруппаОсновноеЛицензионнаяКарточка",
															Тип("ГруппаФормы"),
															Элементы.ГруппаОсновноеНизПраво);
	ГруппаОсновноеЛицензионнаяКарточка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеЛицензионнаяКарточка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеЛицензионнаяКарточка.ОтображатьЗаголовок = Истина; 
	ГруппаОсновноеЛицензионнаяКарточка.Заголовок = "Лицензионная карточка"; 
	ГруппаОсновноеЛицензионнаяКарточка.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаОсновноеЛицензионнаяКарточка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	ГруппаЛицензСерияНомер = Элементы.Добавить("ГруппаЛицензСерияНомер",
												Тип("ГруппаФормы"),
												Элементы.ГруппаОсновноеЛицензионнаяКарточка);
	ГруппаЛицензСерияНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЛицензСерияНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЛицензСерияНомер.ОтображатьЗаголовок = Ложь; 
	ГруппаЛицензСерияНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	НовыйЭлементЛицензионнаяКарточкаСерия = Элементы.Добавить("ЛицензионнаяКарточкаСерия",
															 Тип("ПолеФормы"),
															 Элементы.ГруппаЛицензСерияНомер);
    НовыйЭлементЛицензионнаяКарточкаСерия.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементЛицензионнаяКарточкаСерия.ПутьКДанным = "Объект.проф_ЛицензионнаяКарточкаСерия";
	НовыйЭлементЛицензионнаяКарточкаСерия.Заголовок = "Серия";
   	НовыйЭлементЛицензионнаяКарточкаСерия.ТолькоПросмотр = Истина;  
	
	НовыйЭлементЛицензионнаяКарточкаНомер = Элементы.Добавить("ЛицензионнаяКарточкаНомер",
															 Тип("ПолеФормы"),
															 Элементы.ГруппаЛицензСерияНомер);
    НовыйЭлементЛицензионнаяКарточкаНомер.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементЛицензионнаяКарточкаНомер.ПутьКДанным = "Объект.проф_ЛицензионнаяКарточкаНомер";
	НовыйЭлементЛицензионнаяКарточкаНомер.Заголовок = "№";
   	НовыйЭлементЛицензионнаяКарточкаНомер.ТолькоПросмотр = Истина; 

    НовыйЭлементЛицензионнаяКарточкаВид = Элементы.Добавить("ЛицензионнаяКарточкаВид",
															Тип("ПолеФормы"),
															Элементы.ГруппаОсновноеЛицензионнаяКарточка);
    НовыйЭлементЛицензионнаяКарточкаВид.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементЛицензионнаяКарточкаВид.ПутьКДанным = "Объект.проф_ЛицензионнаяКарточкаВид";
	НовыйЭлементЛицензионнаяКарточкаВид.Заголовок = "Вид";
   	НовыйЭлементЛицензионнаяКарточкаВид.ТолькоПросмотр = Истина; 

   	НовыйЭлементЛицензионнаяКарточкаРегистрационныйНомер = Элементы.Добавить("ЛицензионнаяКарточкаРегистрационныйНомер",
	   																		Тип("ПолеФормы"),
																			Элементы.ГруппаОсновноеЛицензионнаяКарточка);
    НовыйЭлементЛицензионнаяКарточкаРегистрационныйНомер.Вид = ВидПоляФормы.ПолеВвода;
    НовыйЭлементЛицензионнаяКарточкаРегистрационныйНомер.ПутьКДанным = "Объект.проф_ЛицензионнаяКарточкаРегистрационныйНомер";
	НовыйЭлементЛицензионнаяКарточкаРегистрационныйНомер.Заголовок = "Рег. №";
   	НовыйЭлементЛицензионнаяКарточкаРегистрационныйНомер.ТолькоПросмотр = Истина;	
	
//++ Проф-ИТ, #141, Горетовская М.С., 03.10.2023 - ТОиР, БП: EAM.2.1.4 Форма справочника ОР в ТОиР 
	НовыйЭлементРасположение = Элементы.Добавить("ГруппаОсновноеРасположениеОР",
															Тип("ПолеФормы"),
															Элементы.ГруппаОсновноеНизПраво);
	НовыйЭлементРасположение.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементРасположение.ПутьКДанным = "Объект.АдресМестонахождения";
	НовыйЭлементРасположение.Заголовок = "Расположение";
   	НовыйЭлементРасположение.ТолькоПросмотр = не РодительУзел();	
//-- Проф-ИТ, #141, Горетовская М.С., 03.10.2023 - ТОиР, БП: EAM.2.1.4 Форма справочника ОР в ТОиР

	ГруппаПрочееИсполнители = Элементы.Добавить("ГруппаПрочееИсполнители", Тип("ГруппаФормы"), Элементы.ГруппаОсновное);
	ГруппаПрочееИсполнители.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПрочееИсполнители.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаПрочееИсполнители.ОтображатьЗаголовок = Истина; 
	ГруппаПрочееИсполнители.Заголовок = "Исполнители ремонта";
	ГруппаПрочееИсполнители.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаПрочееИсполнители.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	Элементы.Переместить(Элементы.ПодразделениеИсполнитель, Элементы.ГруппаПрочееИсполнители); 
	//++ Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	//Элементы.Переместить(Элементы.СкладОбеспеченияМТР, Элементы.ГруппаПрочееИсполнители);
	
	ГруппаОсновноеФункцияТип = Элементы.Добавить("ГруппаОсновноеФункцияТип", Тип("ГруппаФормы"), ГруппаПрочееИсполнители);
	ГруппаОсновноеФункцияТип.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеФункцияТип.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеФункцияТип.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеФункцияТип.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	ФункцияОР = Элементы.Добавить("ФункцияОР", Тип("ПолеФормы"), ГруппаОсновноеФункцияТип);
	ФункцияОР.Вид = ВидПоляФормы.ПолеВвода;
	ФункцияОР.ПутьКДанным = "Объект.проф_ФункцияОР";
	ФункцияОР.Заголовок = НСтр("ru = 'Функция'");
	ФункцияОР.АвтоМаксимальнаяШирина = Ложь; 
	ФункцияОР.МаксимальнаяШирина = 40;
	
	ТипОР = Элементы.Добавить("ТипОР", Тип("ПолеФормы"), ГруппаОсновноеФункцияТип);
	ТипОР.Вид = ВидПоляФормы.ПолеВвода;
	ТипОР.ПутьКДанным = "Объект.проф_ТипОР";
	ТипОР.Заголовок = НСтр("ru = 'Тип'");
	ТипОР.АвтоМаксимальнаяШирина = Ложь; 
	ТипОР.МаксимальнаяШирина = 40;
	//-- Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	ГруппаОсновноеКритичность = Элементы.Добавить("ГруппаОсновноеКритичность", Тип("ГруппаФормы"), Элементы.ГруппаОсновное);
	ГруппаОсновноеКритичность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновноеКритичность.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновноеКритичность.ОтображатьЗаголовок = Ложь; 
	ГруппаОсновноеКритичность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	Элементы.Переместить(Элементы.Приоритет, Элементы.ГруппаОсновноеКритичность); 
	Элементы.Приоритет.Заголовок = "Критичность"; 
	Элементы.Приоритет.РастягиватьПоГоризонтали = Ложь; 
	Элементы.Переместить(Элементы.Направление, Элементы.ГруппаОсновноеКритичность); 
	Элементы.Направление.Заголовок = "Направление объекта ремонта";
	Элементы.Направление.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Направление.МаксимальнаяШирина = 25;
	
КонецПроцедуры

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаСервере
Процедура СоздатьСтраницуДопольнительныеПараметры()
	
	НовыйЭлементДопПараметры = Элементы.Добавить("ГруппаДопПараметры", Тип("ГруппаФормы"), Элементы.ПанельОР);
	НовыйЭлементДопПараметры.Вид = ВидГруппыФормы.Страница;
	НовыйЭлементДопПараметры.Заголовок = "Доп. параметры";
	НовыйЭлементДопПараметры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	ГруппаДопПараметрыВерх = Элементы.Добавить("ГруппаДопПараметрыВерх", Тип("ГруппаФормы"), Элементы.ГруппаДопПараметры);
	ГруппаДопПараметрыВерх.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыВерх.ОтображатьЗаголовок = Ложь; 
	ГруппаДопПараметрыВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	ГруппаДопПараметрыЛево = Элементы.Добавить("ГруппаДопПараметрыЛево",
												Тип("ГруппаФормы"),
												Элементы.ГруппаДопПараметрыВерх);
	ГруппаДопПараметрыЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыЛево.ОтображатьЗаголовок = Ложь; 
	ГруппаДопПараметрыЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	ГруппаДопПараметрыДвигатель = Элементы.Добавить("ГруппаДопПараметрыДвигатель",
													Тип("ГруппаФормы"),
													Элементы.ГруппаДопПараметрыЛево);
	ГруппаДопПараметрыДвигатель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыДвигатель.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыДвигатель.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыДвигатель.Заголовок = "Двигатель";
	ГруппаДопПараметрыДвигатель.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыДвигатель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	НовыйЭлементНомерДвигателя = Элементы.Добавить("НомерДвигателя",
												  Тип("ПолеФормы"),
												  Элементы.ГруппаДопПараметрыДвигатель);
	НовыйЭлементНомерДвигателя.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНомерДвигателя.ПутьКДанным = "Объект.проф_НомерДвигателя";
	НовыйЭлементНомерДвигателя.Заголовок = "Номер двигателя";
	НовыйЭлементНомерДвигателя.ТолькоПросмотр = Истина; 
	
	НовыйЭлементМодельДвигателя = Элементы.Добавить("МодельДвигателя",
													Тип("ПолеФормы"),
													Элементы.ГруппаДопПараметрыДвигатель);
	НовыйЭлементМодельДвигателя.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементМодельДвигателя.ПутьКДанным = "Объект.проф_МодельДвигателя";
	НовыйЭлементМодельДвигателя.Заголовок = "Модель двигателя";
	НовыйЭлементМодельДвигателя.ТолькоПросмотр = Истина;     
	
	ГруппаДопПараметрыМощность = Элементы.Добавить("ГруппаДопПараметрыМощность",
													Тип("ГруппаФормы"),
													Элементы.ГруппаДопПараметрыДвигатель);
	ГруппаДопПараметрыМощность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыМощность.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыМощность.ОтображатьЗаголовок = Ложь; 
	ГруппаДопПараметрыМощность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	НовыйДекорацияДопПараметрыМощностьДвигателя = Элементы.Добавить("ДекорацияДопПараметрыМощностьДвигателя",
																	Тип("ДекорацияФормы"),
																	ГруппаДопПараметрыМощность);
	НовыйДекорацияДопПараметрыМощностьДвигателя.Вид = ВидДекорацииФормы.Надпись;
	НовыйДекорацияДопПараметрыМощностьДвигателя.Заголовок = "Мощность двигателя"; 
	
	НовыйЭлементМощностьДвигателяЛС = Элементы.Добавить("МощностьДвигателяЛС",
														Тип("ПолеФормы"),
														Элементы.ГруппаДопПараметрыМощность);
	НовыйЭлементМощностьДвигателяЛС.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементМощностьДвигателяЛС.ПутьКДанным = "Объект.проф_МощностьДвигателяЛС";
	НовыйЭлементМощностьДвигателяЛС.Заголовок = "л.с."; 
	НовыйЭлементМощностьДвигателяЛС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовыйЭлементМощностьДвигателяЛС.ТолькоПросмотр = Истина; 
	
	НовыйЭлементМощностьДвигателяКВт = Элементы.Добавить("МощностьДвигателяКВт",
														 Тип("ПолеФормы"),
														 Элементы.ГруппаДопПараметрыМощность);
	НовыйЭлементМощностьДвигателяКВт.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементМощностьДвигателяКВт.ПутьКДанным = "Объект.проф_МощностьДвигателяКВт";
	НовыйЭлементМощностьДвигателяКВт.Заголовок = "КВт"; 
	НовыйЭлементМощностьДвигателяКВт.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовыйЭлементМощностьДвигателяКВт.ТолькоПросмотр = Истина; 
	
	ГруппаДопПараметрыКузов = Элементы.Добавить("ГруппаДопПараметрыКузов",
												Тип("ГруппаФормы"),
												Элементы.ГруппаДопПараметрыЛево);
	ГруппаДопПараметрыКузов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыКузов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыКузов.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыКузов.Заголовок = "Кузов";  
	ГруппаДопПараметрыКузов.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыКузов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйЭлементНомерКузова = Элементы.Добавить("НомерКузова", Тип("ПолеФормы"), Элементы.ГруппаДопПараметрыКузов);
	НовыйЭлементНомерКузова.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНомерКузова.ПутьКДанным = "Объект.проф_НомерКузова";
	НовыйЭлементНомерКузова.Заголовок = "Номер кузова";
	НовыйЭлементНомерКузова.ТолькоПросмотр = Истина;     
	
	//++ Проф-ИТ, #81, Соловьев А.А., 09.01.2024
	ГруппаДопПараметрыШасси = Элементы.Добавить("ГруппаДопПараметрыШасси",
															Тип("ГруппаФормы"),
															Элементы.ГруппаДопПараметрыКузов);
	ГруппаДопПараметрыШасси.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыШасси.ОтображатьЗаголовок = Ложь;
	ГруппаДопПараметрыШасси.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыШасси.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовыйЭлементМодельШасси = Элементы.Добавить("МодельШасси", Тип("ПолеФормы"), ГруппаДопПараметрыШасси);
	НовыйЭлементМодельШасси.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементМодельШасси.ПутьКДанным = "Объект.проф_МодельШасси";
	НовыйЭлементМодельШасси.Заголовок = "Модель шасси";
	НовыйЭлементМодельШасси.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлементМодельШасси.МаксимальнаяШирина = 14;
	//-- Проф-ИТ, #81, Соловьев А.А., 09.01.2024
	
	НовыйЭлементНомерШасси = Элементы.Добавить("НомерШасси", Тип("ПолеФормы"), ГруппаДопПараметрыШасси);
	НовыйЭлементНомерШасси.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНомерШасси.ПутьКДанным = "Объект.проф_НомерШасси";
	НовыйЭлементНомерШасси.Заголовок = "Номер шасси";
	НовыйЭлементНомерШасси.ТолькоПросмотр = Истина;
	НовыйЭлементНомерШасси.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлементНомерШасси.МаксимальнаяШирина = 14;
	
	НовыйЭлементНомерКПП = Элементы.Добавить("НомерКПП", Тип("ПолеФормы"), Элементы.ГруппаДопПараметрыКузов);
	НовыйЭлементНомерКПП.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНомерКПП.ПутьКДанным = "Объект.проф_НомерКПП";
	НовыйЭлементНомерКПП.Заголовок = "Номер КПП";
	НовыйЭлементНомерКПП.ТолькоПросмотр = Истина;    
	
	ГруппаДопПараметрыПраво = Элементы.Добавить("ГруппаДопПараметрыПраво",
												Тип("ГруппаФормы"),
												Элементы.ГруппаДопПараметрыВерх);
	ГруппаДопПараметрыПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыПраво.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыПраво.ОтображатьЗаголовок = Ложь; 
	ГруппаДопПараметрыПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	ГруппаДопПараметрыГабариты = Элементы.Добавить("ГруппаДопПараметрыГабариты",
													Тип("ГруппаФормы"),
													Элементы.ГруппаДопПараметрыПраво);
	ГруппаДопПараметрыГабариты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыГабариты.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыГабариты.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыГабариты.Заголовок = "Габаритные размеры";
	ГруппаДопПараметрыГабариты.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыГабариты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	НовыйГабаритныйРазмерДлина = Элементы.Добавить("ГабаритныйРазмерДлина",
													Тип("ПолеФормы"),
													Элементы.ГруппаДопПараметрыГабариты);
	НовыйГабаритныйРазмерДлина.Вид = ВидПоляФормы.ПолеВвода;
	НовыйГабаритныйРазмерДлина.ПутьКДанным = "Объект.проф_ГабаритныйРазмерДлина";
	НовыйГабаритныйРазмерДлина.Заголовок = "Длина, мм";
	НовыйГабаритныйРазмерДлина.ТолькоПросмотр = Истина; 
	
	НовыйГабаритныйРазмерШирина = Элементы.Добавить("ГабаритныйРазмерШирина",
													Тип("ПолеФормы"),
													Элементы.ГруппаДопПараметрыГабариты);
	НовыйГабаритныйРазмерШирина.Вид = ВидПоляФормы.ПолеВвода;
	НовыйГабаритныйРазмерШирина.ПутьКДанным = "Объект.проф_ГабаритныйРазмерШирина";
	НовыйГабаритныйРазмерШирина.Заголовок = "Ширина, мм";
	НовыйГабаритныйРазмерШирина.ТолькоПросмотр = Истина; 
	
	НовыйГабаритныйРазмерВысота = Элементы.Добавить("ГабаритныйРазмерВысота",
													Тип("ПолеФормы"),
													Элементы.ГруппаДопПараметрыГабариты);
	НовыйГабаритныйРазмерВысота.Вид = ВидПоляФормы.ПолеВвода;
	НовыйГабаритныйРазмерВысота.ПутьКДанным = "Объект.проф_ГабаритныйРазмерВысота";
	НовыйГабаритныйРазмерВысота.Заголовок = "Высота, мм";
	НовыйГабаритныйРазмерВысота.ТолькоПросмотр = Истина; 
	
	ГруппаДопПараметрыРазмеры = Элементы.Добавить("ГруппаДопПараметрыРазмеры",
												 Тип("ГруппаФормы"),
												 Элементы.ГруппаДопПараметрыПраво);
	ГруппаДопПараметрыРазмеры.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыРазмеры.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыРазмеры.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыРазмеры.Заголовок = "Полезные размеры";
	ГруппаДопПараметрыРазмеры.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыРазмеры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	НовыйПолезныйРазмерДлина = Элементы.Добавить("ПолезныйРазмерДлина",
												Тип("ПолеФормы"),
												Элементы.ГруппаДопПараметрыРазмеры);
	НовыйПолезныйРазмерДлина.Вид = ВидПоляФормы.ПолеВвода;
	НовыйПолезныйРазмерДлина.ПутьКДанным = "Объект.проф_ПолезныйРазмерДлина";
	НовыйПолезныйРазмерДлина.Заголовок = "Длина, мм";
	НовыйПолезныйРазмерДлина.ТолькоПросмотр = Истина; 
	
	НовыйПолезныйРазмерШирина = Элементы.Добавить("ПолезныйРазмерШирина",
												 Тип("ПолеФормы"),
												 Элементы.ГруппаДопПараметрыРазмеры);
	НовыйПолезныйРазмерШирина.Вид = ВидПоляФормы.ПолеВвода;
	НовыйПолезныйРазмерШирина.ПутьКДанным = "Объект.проф_ПолезныйРазмерШирина";
	НовыйПолезныйРазмерШирина.Заголовок = "Ширина, мм";
	НовыйПолезныйРазмерШирина.ТолькоПросмотр = Истина; 
	
	НовыйПолезныйРазмерВысота = Элементы.Добавить("ПолезныйРазмерВысота",
												 Тип("ПолеФормы"),
												 Элементы.ГруппаДопПараметрыРазмеры);
	НовыйПолезныйРазмерВысота.Вид = ВидПоляФормы.ПолеВвода;
	НовыйПолезныйРазмерВысота.ПутьКДанным = "Объект.проф_ПолезныйРазмерВысота";
	НовыйПолезныйРазмерВысота.Заголовок = "Высота, мм";
	НовыйПолезныйРазмерВысота.ТолькоПросмотр = Истина; 	
	
	//++ Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	ГруппаДопПараметрыИзготовительПрочее = Элементы.Добавить("ГруппаДопПараметрыИзготовительПрочее",
															Тип("ГруппаФормы"),
															Элементы.ГруппаДопПараметры);
	ГруппаДопПараметрыИзготовительПрочее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыИзготовительПрочее.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыИзготовительПрочее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	//-- Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	
	ГруппаДопПараметрыДанныеИзготовителя = Элементы.Добавить("ГруппаДопПараметрыДанныеИзготовителя",
															Тип("ГруппаФормы"),
															ГруппаДопПараметрыИзготовительПрочее);
	ГруппаДопПараметрыДанныеИзготовителя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыДанныеИзготовителя.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыДанныеИзготовителя.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыДанныеИзготовителя.Заголовок = "Данные изготовителя"; 
	ГруппаДопПараметрыДанныеИзготовителя.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыДанныеИзготовителя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.Переместить(Элементы.Изготовитель, Элементы.ГруппаДопПараметрыДанныеИзготовителя);
	Элементы.Переместить(Элементы.НомерПаспорта, Элементы.ГруппаДопПараметрыДанныеИзготовителя);
	Элементы.Переместить(Элементы.ЗаводскойНомер, Элементы.ГруппаДопПараметрыДанныеИзготовителя);
	
	ГруппаСрокТехнологическийНомер = Элементы.Добавить("ГруппаСрокТехнологическийНомер",
													Тип("ГруппаФормы"),
													Элементы.ГруппаДопПараметры);
	ГруппаСрокТехнологическийНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСрокТехнологическийНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСрокТехнологическийНомер.ОтображатьЗаголовок = Ложь; 
	ГруппаСрокТехнологическийНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	Элементы.Переместить(Элементы.СрокПолезногоИспользования, Элементы.ГруппаСрокТехнологическийНомер);
	Элементы.Переместить(Элементы.ТехНомер, Элементы.ГруппаСрокТехнологическийНомер); 
	
	ГруппаПрочееГарантия = Элементы.Добавить("ГруппаПрочееГарантия", Тип("ГруппаФормы"), Элементы.ГруппаДопПараметры);
	ГруппаПрочееГарантия.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПрочееГарантия.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаПрочееГарантия.ОтображатьЗаголовок = Ложь; 
	ГруппаПрочееГарантия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	Элементы.Переместить(Элементы.ЕстьГарантияДляОбъекта, Элементы.ГруппаПрочееГарантия); 
	Элементы.Переместить(Элементы.НеУчаствуетВПланировании, Элементы.ГруппаПрочееГарантия);	
	Элементы.Переместить(Элементы.ЭтоАктив, Элементы.ГруппаПрочееГарантия);
	
	//++ Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	ГруппаДопПараметрыПрочее = Элементы.Добавить("ГруппаДопПараметрыПрочее",Тип("ГруппаФормы"),
		ГруппаДопПараметрыИзготовительПрочее);
	ГруппаДопПараметрыПрочее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопПараметрыПрочее.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДопПараметрыПрочее.ОтображатьЗаголовок = Истина; 
	ГруппаДопПараметрыПрочее.Заголовок = НСтр("ru = 'Прочее'"); 
	ГруппаДопПараметрыПрочее.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	ГруппаДопПараметрыПрочее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.Переместить(Элементы.ГруппаОС, ГруппаДопПараметрыПрочее);
	
	СистемаМониторинга = Элементы.Добавить("СистемаМониторинга", Тип("ПолеФормы"),
		ГруппаДопПараметрыПрочее);
	СистемаМониторинга.Вид = ВидПоляФормы.ПолеВвода;
	СистемаМониторинга.ПутьКДанным = "Объект.проф_СистемаМониторинга";
	СистемаМониторинга.Заголовок = НСтр("ru = 'Система мониторинга'");
	СистемаМониторинга.ТолькоПросмотр = Истина;
	
	Элементы.Переместить(Элементы.СкладОбеспеченияМТР, ГруппаДопПараметрыПрочее);
	//-- Проф-ИТ, #81, Соловьев А.А., 26.12.2023
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтраницуРегистрационныеДокументы()
		    
	НовыйЭлементРегистрационныеДокументы = Элементы.Добавить("ГруппаРегистрационныеДокументы",
															Тип("ГруппаФормы"),
															Элементы.ПанельОР);
    НовыйЭлементРегистрационныеДокументы.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементРегистрационныеДокументы.Заголовок = "Документы ТС";
	НовыйЭлементРегистрационныеДокументы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

        
    // СозданиеДинамическогоСписка
    ДобавляемыеРеквизиты    = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("табДокументыТС", Новый ОписаниеТипов("ДинамическийСписок")));
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.табДокументыТС.ПроизвольныйЗапрос   = Истина;
	ЭтаФорма.табДокументыТС.ТекстЗапроса = "ВЫБРАТЬ
	|	проф_РегистрационныеДокументы.Наименование КАК Наименование,
	|	проф_РегистрационныеДокументы.ВидДокумента КАК ВидДокумента,
	|	проф_РегистрационныеДокументы.Серия КАК Серия,
	|	проф_РегистрационныеДокументы.Номер КАК Номер,
	|	проф_РегистрационныеДокументы.Статус КАК Статус,
	|	проф_РегистрационныеДокументы.ДатаВыдачи КАК ДатаВыдачи,
	|	проф_РегистрационныеДокументы.ДатаОкончания КАК ДатаОкончания,
	|	проф_РегистрационныеДокументы.КемВыдан КАК КемВыдан,
	|	проф_РегистрационныеДокументы.Комментарий КАК Комментарий
	|	ИЗ
	|	Справочник.проф_РегистрационныеДокументы КАК проф_РегистрационныеДокументы
	|	ГДЕ
	|	проф_РегистрационныеДокументы.ВладелецДокументов = &ОбъектРемонта";
    
    ЭтаФорма.табДокументыТС.ОсновнаяТаблица = "Справочник.проф_РегистрационныеДокументы";
    
    табДокументыТС = Элементы.Добавить("табДокументыТС", Тип("ТаблицаФормы"), НовыйЭлементРегистрационныеДокументы);
    табДокументыТС.ПутьКДанным                    = "табДокументыТС";
    табДокументыТС.Отображение                    = ОтображениеТаблицы.Список;
	табДокументыТС.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("ДокументыТСНаименование", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.Наименование";
    
    НоваяКолонка = Элементы.Добавить("ДокументыТСВидДокумента", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.ВидДокумента";	
	
	НоваяКолонка = Элементы.Добавить("ДокументыТССерия", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.Серия";
    
    НоваяКолонка = Элементы.Добавить("ДокументыТСНомер", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.Номер";	
	
	НоваяКолонка = Элементы.Добавить("ДокументыТССтатус", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.Статус";
    
    НоваяКолонка = Элементы.Добавить("ДокументыТСДатаВыдачи", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.ДатаВыдачи";	
	
	НоваяКолонка = Элементы.Добавить("ДокументыТСДатаОкончания", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.ДатаОкончания";
    
    НоваяКолонка = Элементы.Добавить("ДокументыТСКемВыдан", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.КемВыдан";	
	
	НоваяКолонка = Элементы.Добавить("ДокументыТСКомментарий", Тип("ПолеФормы"), табДокументыТС);
    НоваяКолонка.ПутьКДанным = "табДокументыТС.Комментарий";
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуЭкипаж()
	
	НовыйЭлементЭкипаж = Элементы.Добавить("ГруппаЭкипаж", Тип("ГруппаФормы"), Элементы.ПанельОР);
    НовыйЭлементЭкипаж.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементЭкипаж.Заголовок = "Экипаж";
	НовыйЭлементЭкипаж.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	// СозданиеДинамическогоСписка
    ДобавляемыеРеквизиты    = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("табЭкипаж", Новый ОписаниеТипов("ДинамическийСписок")));
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.табЭкипаж.ПроизвольныйЗапрос   = Истина;
    ЭтаФорма.табЭкипаж.ТекстЗапроса = "ВЫБРАТЬ
		|	проф_ЭкипажТС.Сотрудник КАК Сотрудник,
		|	проф_ЭкипажТС.ЧленЭкипажа КАК ЧленЭкипажа
		|ИЗ
		|	РегистрСведений.проф_ЭкипажТС КАК проф_ЭкипажТС
		|ГДЕ
		|	проф_ЭкипажТС.ОбъектРемонта = &ОбъектРемонта";
    
    ЭтаФорма.табЭкипаж.ОсновнаяТаблица = "РегистрСведений.проф_ЭкипажТС";
    
    табЭкипаж = Элементы.Добавить("табЭкипаж", Тип("ТаблицаФормы"), НовыйЭлементЭкипаж);
    табЭкипаж.ПутьКДанным                    = "табЭкипаж";
    табЭкипаж.Отображение                    = ОтображениеТаблицы.Список;
	табЭкипаж.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Сотрудник", Тип("ПолеФормы"), табЭкипаж);
    НоваяКолонка.ПутьКДанным = "табЭкипаж.Сотрудник";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_ЧленЭкипажа", Тип("ПолеФормы"), табЭкипаж);
    НоваяКолонка.ПутьКДанным = "табЭкипаж.ЧленЭкипажа";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуМестонахождение()
	    
	НовыйЭлементМестонахождение = Элементы.Добавить("ГруппаМестонахождение", Тип("ГруппаФормы"), Элементы.ПанельОР);
    НовыйЭлементМестонахождение.Вид         = ВидГруппыФормы.Страница;
    НовыйЭлементМестонахождение.Заголовок   = "Местонахождение ТС/ОС"; 
	НовыйЭлементМестонахождение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	//++ Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	ГруппаМестонахождениеТС = Элементы.Добавить("ГруппаМестонахождениеТС", Тип("ГруппаФормы"),
		Элементы.ГруппаМестонахождение);
	ГруппаМестонахождениеТС.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаМестонахождениеТС.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаМестонахождениеТС.ОтображатьЗаголовок = Истина; 
	ГруппаМестонахождениеТС.Заголовок           = "Местонахождение транспортного средства"; 
	ГруппаМестонахождениеТС.ШрифтЗаголовка      = Новый Шрифт(,,Истина);
	
	ГруппаМестонахождениеОС = Элементы.Добавить("ГруппаМестонахождениеОС", Тип("ГруппаФормы"),
		Элементы.ГруппаМестонахождение);
	ГруппаМестонахождениеОС.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаМестонахождениеОС.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаМестонахождениеОС.ОтображатьЗаголовок = Истина; 
	ГруппаМестонахождениеОС.Заголовок           = "Местонахождение основного средства"; 
	ГруппаМестонахождениеОС.ШрифтЗаголовка      = Новый Шрифт(,,Истина);
	//-- Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	
    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты    = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТабМестонахождение", Новый ОписаниеТипов("ДинамическийСписок")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТабМестонахождениеОС", Новый ОписаниеТипов("ДинамическийСписок")));
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТабМестонахождение.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ТабМестонахождение.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	проф_МестонахождениеТС.Дата КАК Период,
		|	проф_МестонахождениеТС.Организация КАК Организация,
		|	проф_МестонахождениеТС.Подразделение КАК Подразделение,
		|	проф_МестонахождениеТС.Колонна КАК Колонна,
		//++ Проф-ИТ, #141, Лавриненко Т.В.,17.08.2023 
		|	проф_МестонахождениеТС.ПредставлениеДокумента КАК ПредставлениеДокумента
		//-- Проф-ИТ, #141, Лавриненко Т.В.,17.08.2023 
		|ИЗ
		|	РегистрСведений.проф_МестонахождениеТС КАК проф_МестонахождениеТС
		|ГДЕ
		|	проф_МестонахождениеТС.ОбъектРемонта = &ОбъектРемонта";
    
    ЭтаФорма.ТабМестонахождение.ОсновнаяТаблица = "РегистрСведений.проф_МестонахождениеТС";
    
    ТабМестонахождение = Элементы.Добавить("ТабМестонахождение", Тип("ТаблицаФормы"), Элементы.ГруппаМестонахождениеТС);
    ТабМестонахождение.ПутьКДанным                    = "ТабМестонахождение";
    ТабМестонахождение.Отображение                    = ОтображениеТаблицы.Список;
	ТабМестонахождение.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Период", Тип("ПолеФормы"), ТабМестонахождение);
    НоваяКолонка.ПутьКДанным                = "ТабМестонахождение.Период";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Организация", Тип("ПолеФормы"), ТабМестонахождение);
    НоваяКолонка.ПутьКДанным                = "ТабМестонахождение.Организация";
	
	НоваяКолонка = Элементы.Добавить("Список_Альт_Подразделение", Тип("ПолеФормы"), ТабМестонахождение);
    НоваяКолонка.ПутьКДанным                = "ТабМестонахождение.Подразделение";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Колонна", Тип("ПолеФормы"), ТабМестонахождение);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождение.Колонна";
	
	//++ Проф-ИТ, #141, Лавриненко Т.В.,17.08.2023 
	НоваяКолонка = Элементы.Добавить("Список_Альт_ПредставлениеДокумента", Тип("ПолеФормы"), ТабМестонахождение);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождение.ПредставлениеДокумента";
	НоваяКолонка.Заголовок                  = "Документ";
	//-- Проф-ИТ, #141, Лавриненко Т.В.,17.08.2023
	
	//++ Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	ЭтаФорма.ТабМестонахождениеОС.ПроизвольныйЗапрос = Истина;
	ЭтаФорма.ТабМестонахождениеОС.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	проф_МестонахождениеОС.Дата КАК Период,
	|	проф_МестонахождениеОС.ПредставлениеДокумента КАК Регистратор,
	|	проф_МестонахождениеОС.Организация КАК Организация,
	|	проф_МестонахождениеОС.МОЛ КАК МОЛ,
	|	проф_МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	проф_МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	проф_МестонахождениеОС.Арендатор КАК Арендатор,
	|	проф_МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора,
	|	проф_МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора
	|ИЗ
	|	РегистрСведений.проф_МестонахождениеОС КАК проф_МестонахождениеОС
	|ГДЕ
	|	проф_МестонахождениеОС.ОбъектРемонта = &ОбъектРемонта";
    
	ЭтаФорма.ТабМестонахождениеОС.ОсновнаяТаблица = "РегистрСведений.проф_МестонахождениеОС";
    
    ТабМестонахождениеОС = Элементы.Добавить("ТабМестонахождениеОС", Тип("ТаблицаФормы"), 
		Элементы.ГруппаМестонахождениеОС);
    ТабМестонахождениеОС.ПутьКДанным                    = "ТабМестонахождениеОС";
    ТабМестонахождениеОС.Отображение                    = ОтображениеТаблицы.Список;
	ТабМестонахождениеОС.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_Период", Тип("ПолеФормы"), ТабМестонахождениеОС);
    НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.Период";
    
    НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_Регистратор", Тип("ПолеФормы"), ТабМестонахождениеОС);
    НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.Регистратор";
    
    НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_Организация", Тип("ПолеФормы"), ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.Организация";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_МОЛ", Тип("ПолеФормы"), ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.МОЛ";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_Местонахождение", Тип("ПолеФормы"), ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.Местонахождение";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_АдресМестонахождения", Тип("ПолеФормы"), 
		ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.АдресМестонахождения";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_Арендатор", Тип("ПолеФормы"), ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.Арендатор";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_МОЛАрендатора", Тип("ПолеФормы"), ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.МОЛАрендатора";
	
	НоваяКолонка = Элементы.Добавить("СписокМестонахождениеОС_ПодразделениеАрендатора", Тип("ПолеФормы"), 
		ТабМестонахождениеОС);
   	НоваяКолонка.ПутьКДанным                = "ТабМестонахождениеОС.ПодразделениеАрендатора";
	//-- Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуТекущееМестоположение()
		
	НовыйЭлементТекущееМестоположение = Элементы.Добавить("ГруппаТекущееМестоположение",
														 Тип("ГруппаФормы"),
														 Элементы.ПанельОР);
    НовыйЭлементТекущееМестоположение.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементТекущееМестоположение.Заголовок = "Текущее местоположение";
	НовыйЭлементТекущееМестоположение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты    = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ТабТекущееМестоположение", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТабТекущееМестоположение.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ТабТекущееМестоположение.ТекстЗапроса = "ВЫБРАТЬ
	|	проф_ТекущееМестоположениеТСПоМониторингу.Дата КАК Дата,
	|	проф_ТекущееМестоположениеТСПоМониторингу.Широта КАК Широта,
	|	проф_ТекущееМестоположениеТСПоМониторингу.Долгота КАК Долгота,
	|	проф_ТекущееМестоположениеТСПоМониторингу.ПредставлениеАдреса КАК ПредставлениеАдреса,
	|	проф_ТекущееМестоположениеТСПоМониторингу.Скорость КАК Скорость,
	|	проф_ТекущееМестоположениеТСПоМониторингу.Курс КАК Курс
	|ИЗ
	|	РегистрСведений.проф_ТекущееМестоположениеТСПоМониторингу КАК проф_ТекущееМестоположениеТСПоМониторингу
	|ГДЕ
	|	проф_ТекущееМестоположениеТСПоМониторингу.ОбъектРемонта = &ОбъектРемонта";
    
    ЭтаФорма.ТабТекущееМестоположение.ОсновнаяТаблица = "РегистрСведений.проф_ТекущееМестоположениеТСПоМониторингу";
    
    ТабТекущееМестоположение = Элементы.Добавить("ТабТекущееМестоположение",
												 Тип("ТаблицаФормы"),
												 НовыйЭлементТекущееМестоположение);
    ТабТекущееМестоположение.ПутьКДанным                    = "ТабТекущееМестоположение";
    ТабТекущееМестоположение.Отображение                    = ОтображениеТаблицы.Список; 
	ТабТекущееМестоположение.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Дата", Тип("ПолеФормы"), ТабТекущееМестоположение);
    НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.Дата";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Широта", Тип("ПолеФормы"), ТабТекущееМестоположение);
    НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.Широта";
	
	НоваяКолонка = Элементы.Добавить("Список_Альт_Долгота", Тип("ПолеФормы"), ТабТекущееМестоположение);
    НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.Долгота";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_ПредставлениеАдреса", Тип("ПолеФормы"), ТабТекущееМестоположение);
   	НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.ПредставлениеАдреса";
 
	НоваяКолонка = Элементы.Добавить("Список_Альт_Скорость", Тип("ПолеФормы"), ТабТекущееМестоположение);
    НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.Скорость";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Курс", Тип("ПолеФормы"), ТабТекущееМестоположение);
   	НоваяКолонка.ПутьКДанным                = "ТабТекущееМестоположение.Курс";	
	
КонецПроцедуры		
	
&НаСервере
Функция СоздатьТаблицуЗначенийКонтролируемыеПоказатели()
	
	// Создание таблицы значений
	МассивТипа = Новый Массив;
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ЗначенияКонтролируемыхПоказателей",
		ОписаниеТипа, , "Журнал ввода контролируемых показателей");
	МассивРеквизитовФормы.Добавить(РеквизитФормы);
	
	СписокТиповРегистратор = Новый Массив;
    СписокТиповРегистратор.Добавить(Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей"));
	СписокТиповРегистратор.Добавить(Тип("ДокументСсылка.торо_ВводНачальныхДанных")); 
	ОписаниеСоставногоТипаРегистратор = Новый ОписаниеТипов(СписокТиповРегистратор);
		
	ТаблицаКонтролируемыеПоказатели = Новый ТаблицаЗначений;
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("Показатель",
													Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"),
													"Показатель");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ДатаКонтроля", Новый ОписаниеТипов("Дата"), "Дата контроля");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ОбъектРемонта",
													Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"),
													"Объект ремонта");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("Значение",
		Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип,
		"Значение"); 
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("Регистратор", ОписаниеСоставногоТипаРегистратор, "Регистратор");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ДопустимыйМинимум",
		Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип, "Допустимый минимум");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ДопустимыйМаксимум",
		Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип,
		"Допустимый максимум");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("КритическийМинимум",
		Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип,
		"Критический минимум"); 
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("КритическийМаксимум",
		Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип,
		"Критический максимум");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ЗначениеКПОР", Новый ОписаниеТипов("Булево"), "Значение КПОР");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ВыделятьКакНедопустимоеЗначение",
						Новый ОписаниеТипов("Булево"),
						"Выделять как недопустимое значение");
	ТаблицаКонтролируемыеПоказатели.Колонки.Добавить("ВыделятьКакКритическоеЗначение",
						Новый ОписаниеТипов("Булево"),
						"Выделять как критическое значение");
	   				
	Для Каждого Колонка Из ТаблицаКонтролируемыеПоказатели.Колонки Цикл
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ЗначенияКонтролируемыхПоказателей");
		МассивРеквизитовФормы.Добавить(РеквизитФормы);
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблица = Элементы.Найти("ЗначенияКонтролируемыхПоказателей");
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормы);
	КонецЕсли;	
	
	Возврат ТаблицаКонтролируемыеПоказатели;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКоманднуюПанельСтраницыКонтролируемыеПоказатели()
	
	// Заполнение командной панели 
	ГруппаСписокКоманд = Элементы.Добавить("ГруппаСписокКомандКонтролируемыхПоказателей", 
											Тип("ГруппаФормы"),
											Элементы.СтраницаКонтролируемыеПоказатели);
    ГруппаСписокКоманд.Вид = ВидГруппыФормы.КоманднаяПанель;
   		
	КомандаВводЗначенияКонтролируемыхПоказателей = Команды.Добавить("ВводЗначенияКонтролируемыхПоказателей"); 
	КомандаВводЗначенияКонтролируемыхПоказателей.Заголовок = "Ввод значения";
	КомандаВводЗначенияКонтролируемыхПоказателей.Действие  = "ВводЗначенияКонтролируемыхПоказателей"; 
	
	КнопкаФормыВводЗначенияКонтролируемыхПоказателей = Элементы.Добавить(
		"ЗначенияКонтролируемыхПоказателейВводЗначенияКонтролируемыхПоказателей",
		Тип("КнопкаФормы"),
		Элементы.ГруппаСписокКомандКонтролируемыхПоказателей);
	КнопкаФормыВводЗначенияКонтролируемыхПоказателей.ИмяКоманды = "ВводЗначенияКонтролируемыхПоказателей"; 
	КнопкаФормыВводЗначенияКонтролируемыхПоказателей.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;  
	КнопкаФормыВводЗначенияКонтролируемыхПоказателей.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаФормыВводЗначенияКонтролируемыхПоказателей.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	КомандаОбновитьЗначенияКонтролируемыхПоказателей = Команды.Добавить("ОбновитьЗначенияКонтролируемыхПоказателей"); 
	КомандаОбновитьЗначенияКонтролируемыхПоказателей.Заголовок = "Обновить значения контролируемых показателей";
	КомандаОбновитьЗначенияКонтролируемыхПоказателей.Действие  = "ОбновитьЗначенияКонтролируемыхПоказателей"; 
		
	КнопкаФормыОбновитьЗначенияКонтролируемыхПоказателей = Элементы.Добавить(
		"ЗначенияКонтролируемыхПоказателейОбновитьЗначенияКонтролируемыхПоказателей",
		Тип("КнопкаФормы"),
		Элементы.ГруппаСписокКомандКонтролируемыхПоказателей); 
	КнопкаФормыОбновитьЗначенияКонтролируемыхПоказателей.ИмяКоманды = "ОбновитьЗначенияКонтролируемыхПоказателей"; 
	КнопкаФормыОбновитьЗначенияКонтролируемыхПоказателей.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;  
	КнопкаФормыОбновитьЗначенияКонтролируемыхПоказателей.Отображение = ОтображениеКнопки.Картинка; 
	КнопкаФормыОбновитьЗначенияКонтролируемыхПоказателей.Картинка = БиблиотекаКартинок.Обновить;

	ГруппаОтчетыПоказателей = Элементы.Добавить("ОтчетыПоказателей",
												Тип("ГруппаФормы"),
												Элементы.ГруппаСписокКомандКонтролируемыхПоказателей);
    ГруппаОтчетыПоказателей.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтчетыПоказателей.Подсказка = "Отчеты показателей";
    ГруппаОтчетыПоказателей.Заголовок = "Отчеты показателей";
	ГруппаОтчетыПоказателей.Отображение = ОтображениеКнопки.Картинка;
	ГруппаОтчетыПоказателей.Картинка = БиблиотекаКартинок.Отчет; 
	
	КомандаОткрытьОтчетПоКонтролируемымПоказателям = Команды.Добавить("ОткрытьОтчетПоКонтролируемымПоказателям"); 
	КомандаОткрытьОтчетПоКонтролируемымПоказателям.Заголовок = "Отчет по контролируемым показателям";
	КомандаОткрытьОтчетПоКонтролируемымПоказателям.Действие  = "ОткрытьОтчетПоКонтролируемымПоказателям";
		
	КнопкаФормыОткрытьОтчетПоКонтролируемымПоказателям = Элементы.Добавить(
		"ЗначенияКонтролируемыхПоказателейОткрытьОтчетПоКонтролируемымПоказателям",
		Тип("КнопкаФормы"),
		Элементы.ОтчетыПоказателей); 
	КнопкаФормыОткрытьОтчетПоКонтролируемымПоказателям.ИмяКоманды = "ОткрытьОтчетПоКонтролируемымПоказателям"; 
	КнопкаФормыОткрытьОтчетПоКонтролируемымПоказателям.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетПоКонтролируемымПоказателям.Отображение = ОтображениеКнопки.Текст;	
	
	КомандаОткрытьОтчетСостоянияПоПоказателям = Команды.Добавить("ОткрытьОтчетСостоянияПоПоказателям"); 
	КомандаОткрытьОтчетСостоянияПоПоказателям.Заголовок = "Состояние оборудования";
	КомандаОткрытьОтчетСостоянияПоПоказателям.Действие  = "ОткрытьОтчетСостоянияПоПоказателям"; 
	
	КнопкаФормыОткрытьОтчетСостоянияПоПоказателям = Элементы.Добавить(
		"ЗначенияКонтролируемыхПоказателейОткрытьОтчетСостоянияПоПоказателям",
		Тип("КнопкаФормы"),
		Элементы.ОтчетыПоказателей); 
	КнопкаФормыОткрытьОтчетСостоянияПоПоказателям.ИмяКоманды = "ОткрытьОтчетСостоянияПоПоказателям"; 
	КнопкаФормыОткрытьОтчетСостоянияПоПоказателям.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетСостоянияПоПоказателям.Отображение = ОтображениеКнопки.Текст;
	
	КомандаЗначенияКонтролируемыхПоказателейПоказатьЛегенду = Команды.Добавить(
																"ЗначенияКонтролируемыхПоказателейПоказатьЛегенду"); 
	КомандаЗначенияКонтролируемыхПоказателейПоказатьЛегенду.Заголовок = "Показать легенду";
	КомандаЗначенияКонтролируемыхПоказателейПоказатьЛегенду.Действие  = "ЗначенияКонтролируемыхПоказателейПоказатьЛегенду"; 
		
	КнопкаФормыПоказатьЛегенду = Элементы.Добавить("ЗначенияКонтролируемыхПоказателейПоказатьЛегенду",
													Тип("КнопкаФормы"),
													Элементы.ГруппаСписокКомандКонтролируемыхПоказателей); 
	КнопкаФормыПоказатьЛегенду.ИмяКоманды = "ЗначенияКонтролируемыхПоказателейПоказатьЛегенду"; 
	КнопкаФормыПоказатьЛегенду.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаФормыПоказатьЛегенду.Картинка = БиблиотекаКартинок.торо_Диаграмма;	
    КнопкаФормыПоказатьЛегенду.Отображение = ОтображениеКнопки.Картинка;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуНаработка()

	НовыйЭлементНаработка = Элементы.Добавить("СтраницаНаработка",
		Тип("ГруппаФормы"), Элементы.СтраницыПоказателейЭксплуатации);
    НовыйЭлементНаработка.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементНаработка.Заголовок = "Наработка"; 
	НовыйЭлементНаработка.Подсказка = "Страница наработка";
	НовыйЭлементНаработка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	НовыйЭлементНаработка.РастягиватьПоВертикали = Истина; 
	НовыйЭлементНаработка.Видимость = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	
	ГруппаНаработки = Элементы.Добавить("ГруппаНаработки", Тип("ГруппаФормы"), Элементы.СтраницаНаработка);
    ГруппаНаработки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    ГруппаНаработки.Заголовок = "Группа наработки"; 
	ГруппаНаработки.Подсказка = "Группа наработки"; 
	ГруппаНаработки.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНаработки.ОтображатьЗаголовок = Ложь;
	ГруппаНаработки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНаработки.РастягиватьПоВертикали = Истина;

	ГруппаСписокДокументовНаработки = Элементы.Добавить("ГруппаСписокДокументовНаработки",
		Тип("ГруппаФормы"), Элементы.ГруппаНаработки);
    ГруппаСписокДокументовНаработки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    ГруппаСписокДокументовНаработки.Заголовок = "Группа список документов наработки"; 
	ГруппаСписокДокументовНаработки.Подсказка = "Группа список документов наработки"; 
	ГруппаСписокДокументовНаработки.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение; 
	ГруппаСписокДокументовНаработки.ОтображатьЗаголовок = Ложь;
	ГруппаСписокДокументовНаработки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСписокДокументовНаработки.РастягиватьПоВертикали = Истина;

	// Создание таблицы значений
	МассивТипа = Новый Массив;
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ТаблицаВыработкиОбъектаРемонта",
		ОписаниеТипа, , "Таблица выработки объекта ремонта");
	МассивРеквизитовФормы.Добавить(РеквизитФормы);
	
	СписокТиповРегистратор = Новый Массив;
    СписокТиповРегистратор.Добавить(Тип("ДокументСсылка.торо_УчетНаработкиОборудования"));
	СписокТиповРегистратор.Добавить(Тип("ДокументСсылка.торо_ВводНачальныхДанных")); 
	СписокТиповРегистратор.Добавить(Тип("ДокументСсылка.торо_УстановкаПроизвольногоЗначенияНаработки"));
	ОписаниеСоставногоТипаРегистратор = Новый ОписаниеТипов(СписокТиповРегистратор);
		
	ТаблицаНаработка = Новый ТаблицаЗначений;
	ТаблицаНаработка.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "Номер строки"); 
	ТаблицаНаработка.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"), "Период");
	ТаблицаНаработка.Колонки.Добавить("Наработка", Новый ОписаниеТипов("Число"), "Наработка");
	ТаблицаНаработка.Колонки.Добавить("Показатель",
		Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"), "Показатель"); 
	ТаблицаНаработка.Колонки.Добавить("Регистратор", ОписаниеСоставногоТипаРегистратор, "Регистратор");
	ТаблицаНаработка.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ВидДвиженияНакопления"), "Вид движения");
	ТаблицаНаработка.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Число"), "Картинка");
   				
	Для Каждого Колонка Из ТаблицаНаработка.Колонки Цикл
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаВыработкиОбъектаРемонта");
		МассивРеквизитовФормы.Добавить(РеквизитФормы);
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблица = Элементы.Найти("ТаблицаВыработкиОбъектаРемонта");
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормы);
	КонецЕсли;  
	
	// Заполнение командной панели 
	ГруппаСписокКоманд = Элементы.Добавить("ГруппаСписокКомандДокументовНаработки",
										  Тип("ГруппаФормы"),
										  Элементы.ГруппаСписокДокументовНаработки);
    ГруппаСписокКоманд.Вид = ВидГруппыФормы.КоманднаяПанель;
   		
	КомандаВводНаработки = Команды.Добавить("ВводНаработки"); 
	КомандаВводНаработки.Заголовок = "Ввод наработки";
	КомандаВводНаработки.Действие  = "ВводНаработки"; 
	
	КнопкаФормыВводНаработки = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаВводНаработки",
												Тип("КнопкаФормы"),
												Элементы.ГруппаСписокКомандДокументовНаработки);
	КнопкаФормыВводНаработки.ИмяКоманды = "ВводНаработки"; 
	КнопкаФормыВводНаработки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;  
	КнопкаФормыВводНаработки.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаФормыВводНаработки.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	КомандаОбновитьЖурналНаработки = Команды.Добавить("ОбновитьЖурналНаработки"); 
	КомандаОбновитьЖурналНаработки.Заголовок = "Обновить журнал наработки";
	КомандаОбновитьЖурналНаработки.Действие  = "ОбновитьЖурналНаработки"; 
	КомандаОбновитьЖурналНаработки.Картинка = БиблиотекаКартинок.Обновить;
	
	КнопкаФормыОбновитьЖурналНаработки = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаОбновитьЖурналНаработки",
														  Тип("КнопкаФормы"),
														  Элементы.ГруппаСписокКомандДокументовНаработки);
	КнопкаФормыОбновитьЖурналНаработки.ИмяКоманды = "ОбновитьЖурналНаработки"; 
	КнопкаФормыОбновитьЖурналНаработки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;  
	КнопкаФормыОбновитьЖурналНаработки.Отображение = ОтображениеКнопки.Картинка;
		
	ГруппаОтчетыНаработки = Элементы.Добавить("ОтчетыНаработки",
		Тип("ГруппаФормы"),Элементы.ГруппаСписокКомандДокументовНаработки);
    ГруппаОтчетыНаработки.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтчетыНаработки.Подсказка = "Отчеты по наработке";
    ГруппаОтчетыНаработки.Заголовок = "Отчеты по наработке";
	ГруппаОтчетыНаработки.Отображение = ОтображениеКнопки.Картинка;
	ГруппаОтчетыНаработки.Картинка = БиблиотекаКартинок.Отчет; 
	
	КомандаОткрытьОтчетНаработкаОборудования = Команды.Добавить("ОткрытьОтчетНаработкаОборудования"); 
	КомандаОткрытьОтчетНаработкаОборудования.Заголовок = "Наработка оборудования";
	КомандаОткрытьОтчетНаработкаОборудования.Действие  = "ОткрытьОтчетНаработкаОборудования";
		
	КнопкаФормыОткрытьОтчетНаработкаОборудования = Элементы.Добавить(
		"ТаблицаВыработкиОбъектаРемонтаОткрытьОтчетНаработкаОборудования", Тип("КнопкаФормы"), Элементы.ОтчетыНаработки);
	КнопкаФормыОткрытьОтчетНаработкаОборудования.ИмяКоманды = "ОткрытьОтчетНаработкаОборудования"; 
	КнопкаФормыОткрытьОтчетНаработкаОборудования.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетНаработкаОборудования.Отображение = ОтображениеКнопки.Текст;	
	
	КомандаОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов = Команды.Добавить(
																	"ОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов");
	КомандаОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов.Заголовок = "Наработка оборудования с последних ремонтов";
	КомандаОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов.Действие  = "ОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов"; 
	
	КнопкаФормыОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов = Элементы.Добавить(
		"ТаблицаВыработкиОбъектаРемонтаОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов",
		Тип("КнопкаФормы"),
		Элементы.ОтчетыНаработки);
	КнопкаФормыОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов.ИмяКоманды = "ОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов"; 
	КнопкаФормыОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов.Отображение = ОтображениеКнопки.Текст;
	
	КомандаОткрытьОтчетСостоянияПоНаработке = Команды.Добавить("ОткрытьОтчетСостоянияПоНаработке"); 
	КомандаОткрытьОтчетСостоянияПоНаработке.Заголовок = "Состояние оборудования";
	КомандаОткрытьОтчетСостоянияПоНаработке.Действие  = "ОткрытьОтчетСостоянияПоНаработке"; 
	
	КнопкаФормыОткрытьОтчетСостоянияПоНаработке = Элементы.Добавить(
		"ТаблицаВыработкиОбъектаРемонтаОткрытьОтчетСостоянияПоНаработке",
		Тип("КнопкаФормы"),
		Элементы.ОтчетыНаработки);
	КнопкаФормыОткрытьОтчетСостоянияПоНаработке.ИмяКоманды = "ОткрытьОтчетСостоянияПоНаработке"; 
	КнопкаФормыОткрытьОтчетСостоянияПоНаработке.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетСостоянияПоНаработке.Отображение = ОтображениеКнопки.Текст;
	
	// Добавление ТаблицыЗначений на форму
	ТаблицаВыработкиОбъектаРемонта = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонта",
													  Тип("ТаблицаФормы"),
													  ГруппаСписокДокументовНаработки);
	ТаблицаВыработкиОбъектаРемонта.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта";
	ТаблицаВыработкиОбъектаРемонта.Отображение = ОтображениеТаблицы.Список;
	ТаблицаВыработкиОбъектаРемонта.Заголовок = "Журнал наработки"; 
	ТаблицаВыработкиОбъектаРемонта.Подвал = Истина;
	ТаблицаВыработкиОбъектаРемонта.ПутьКДаннымКартинкиСтроки = "ТаблицаВыработкиОбъектаРемонта.Картинка";
	ТаблицаВыработкиОбъектаРемонта.КартинкаСтрок = БиблиотекаКартинок.ПиктограммыЭлементов;
	ТаблицаВыработкиОбъектаРемонта.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаВыработкиОбъектаРемонта.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ТаблицаВыработкиОбъектаРемонта.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет; 
	ТаблицаВыработкиОбъектаРемонта.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаВыработкиОбъектаРемонта.УстановитьДействие("Выбор", "ТаблицаВыработкиОбъектаРемонтаВыбор");
	ТаблицаВыработкиОбъектаРемонта.УстановитьДействие("ПриАктивизацииСтроки",
		"ТаблицаВыработкиОбъектаРемонтаПриАктивизацииСтроки");
				
			
	НовыйЭлементНомерСтроки = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаНомерСтроки",
												Тип("ПолеФормы"),
												ТаблицаВыработкиОбъектаРемонта);
	НовыйЭлементНомерСтроки.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНомерСтроки.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта.НомерСтроки";
	НовыйЭлементНомерСтроки.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементНомерСтроки.Видимость = Ложь;
	
	НовыйЭлементПериод = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаПериод",
										  Тип("ПолеФормы"),
										  ТаблицаВыработкиОбъектаРемонта);
	НовыйЭлементПериод.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПериод.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта.Период";
	НовыйЭлементПериод.Заголовок = "Дата работы по";
	НовыйЭлементПериод.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементПоказатель = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаПоказатель",
											  Тип("ПолеФормы"),
											  ТаблицаВыработкиОбъектаРемонта);
	НовыйЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоказатель.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта.Показатель";
	НовыйЭлементПоказатель.Заголовок = "Показатель"; 
	НовыйЭлементПоказатель.ПутьКДаннымПодвала = "Элементы.ТаблицаВыработкиОбъектаРемонта.ТекущиеДанные.Показатель.Наименование";
	НовыйЭлементПоказатель.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево; 
	
	НовыйЭлементНаработка = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаНаработка",
											 Тип("ПолеФормы"),
											 ТаблицаВыработкиОбъектаРемонта);
	НовыйЭлементНаработка.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта.Наработка";
	НовыйЭлементНаработка.Заголовок = "Наработка"; 
	НовыйЭлементНаработка.ПутьКДаннымПодвала = "ТекстПодвалаНаработки";
	НовыйЭлементНаработка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементРегистратор = Элементы.Добавить("ТаблицаВыработкиОбъектаРемонтаРегистратор",
												Тип("ПолеФормы"),
												ТаблицаВыработкиОбъектаРемонта);
	НовыйЭлементРегистратор.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементРегистратор.ПутьКДанным = "ТаблицаВыработкиОбъектаРемонта.Регистратор";
	НовыйЭлементРегистратор.Заголовок = "Документ"; 
	НовыйЭлементРегистратор.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	ЗначениеВРеквизитФормы(ТаблицаНаработка, "ТаблицаВыработкиОбъектаРемонта");	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуСостояниеОР()
	
	НовыйЭлементСостояниеОР = Элементы.Добавить("СтраницаСостояниеОР",
												Тип("ГруппаФормы"),
												Элементы.СтраницыПоказателейЭксплуатации);
    НовыйЭлементСостояниеОР.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСостояниеОР.Заголовок = "Состояния"; 
	НовыйЭлементСостояниеОР.Подсказка = "Страница состояние ОР";
	НовыйЭлементСостояниеОР.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
	НовыйЭлементСостояниеОР.РастягиватьПоВертикали = Истина;
	
	НовыйЭлементСтраницыСостояний = Элементы.Добавить("СтраницыСостояний",
													  Тип("ГруппаФормы"),
													  Элементы.СтраницаСостояниеОР);
    НовыйЭлементСтраницыСостояний.Вид = ВидГруппыФормы.Страницы;
    НовыйЭлементСтраницыСостояний.Заголовок = "Страницы состояний"; 
	НовыйЭлементСтраницыСостояний.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху; 
	НовыйЭлементСтраницыСостояний.РастягиватьПоВертикали = Истина;

	
	НовыйЭлементГрафикСостоянияОР = Элементы.Добавить("ГрафикСостоянияОР",
													  Тип("ГруппаФормы"),
													  Элементы.СтраницыСостояний);
    НовыйЭлементГрафикСостоянияОР.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементГрафикСостоянияОР.Заголовок = "Диаграмма состояний"; 
	НовыйЭлементГрафикСостоянияОР.Подсказка = "График состояния ОР";
	НовыйЭлементГрафикСостоянияОР.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлементГрафикСостоянияОР.РастягиватьПоВертикали = Истина; 
	
	ГруппаКомандСостояний = Элементы.Добавить("ГруппаКомандСостояний", Тип("ГруппаФормы"), Элементы.ГрафикСостоянияОР);
    ГруппаКомандСостояний.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    ГруппаКомандСостояний.Заголовок = "Команды и настройки графика состояния ОР"; 
	ГруппаКомандСостояний.Подсказка = "Группа команд состояний";
	ГруппаКомандСостояний.ОтображатьЗаголовок = Ложь;  
	
	ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ПолосаРегулированияИнтервалаГрафика", Новый ОписаниеТипов("Число"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборПоПериоду", Новый ОписаниеТипов("Булево"))); 
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаНачала", Новый ОписаниеТипов("Дата")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОкончания", Новый ОписаниеТипов("Дата")));  
	РеквизитФормы = Новый РеквизитФормы("ПолеТДТаблицаСостояний", Новый ОписаниеТипов("ТабличныйДокумент"));
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);    
	
	// Создание таблицы значений
	МассивТипаП = Новый Массив;
	МассивТипаП.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипаП = Новый ОписаниеТипов(МассивТипаП);
	МассивРеквизитовФормыП = Новый Массив;
	МассивРеквизитовФормыП.Добавить(Новый РеквизитФормы("СписокСостояний", ОписаниеТипаП, , "СписокСостояний"));
	
	ТаблицаСписокСостояний = Новый ТаблицаЗначений;
	ТаблицаСписокСостояний.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(), "Ссылка");
	ТаблицаСписокСостояний.Колонки.Добавить("Лево", Новый ОписаниеТипов("Число"), "Лево"); 
	ТаблицаСписокСостояний.Колонки.Добавить("Низ", Новый ОписаниеТипов("Число"), "Низ");
	
	Для Каждого Колонка Из ТаблицаСписокСостояний.Колонки Цикл
		МассивРеквизитовФормыП.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "СписокСостояний"));
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблицаП = Элементы.Найти("СписокСостояний");
	Если ЭлементТаблицаП <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблицаП);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормыП);
	КонецЕсли;   
	
	ЗначениеВРеквизитФормы(ТаблицаСписокСостояний, "СписокСостояний");
	
	КомПанельГрафика = Элементы.Добавить("КомПанельГрафика",Тип("ГруппаФормы"), Элементы.ГруппаКомандСостояний);
    КомПанельГрафика.Вид = ВидГруппыФормы.КоманднаяПанель;
    КомПанельГрафика.Заголовок = "Командная панель графика"; 
	КомПанельГрафика.РастягиватьПоГоризонтали = Ложь; 
	
	КомандаОбновить = Команды.Добавить("Обновить"); 
	КомандаОбновить.Действие = "Обновить";	
	
	КнопкаФормыОбновить = Элементы.Добавить("Обновить", Тип("КнопкаФормы"), Элементы.КомПанельГрафика); 
	КнопкаФормыОбновить.ИмяКоманды = "Обновить"; 
	КнопкаФормыОбновить.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;  
	КнопкаФормыОбновить.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаФормыОбновить.Картинка = БиблиотекаКартинок.торо_Перерасчитать;   
	
	КомандаПоказыватьЛегенду = Команды.Добавить("ПоказыватьЛегенду"); 
	КомандаПоказыватьЛегенду.Действие  = "ПоказыватьЛегенду"; 
	
	КнопкаФормыПоказыватьЛегенду = Элементы.Добавить("ПоказыватьЛегенду", Тип("КнопкаФормы"), Элементы.КомПанельГрафика); 
	КнопкаФормыПоказыватьЛегенду.ИмяКоманды = "ПоказыватьЛегенду"; 
	КнопкаФормыПоказыватьЛегенду.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыПоказыватьЛегенду.Отображение = ОтображениеКнопки.Картинка;
	КнопкаФормыПоказыватьЛегенду.Картинка = БиблиотекаКартинок.торо_Диаграмма;

	ПолосаРегулированияИнтервалаГрафика = Элементы.Добавить("ПолосаРегулированияИнтервалаГрафика",
															Тип("ПолеФормы"),
															Элементы.ГруппаКомандСостояний);
	ПолосаРегулированияИнтервалаГрафика.Вид = ВидПоляФормы.ПолеПолосыРегулирования;
	ПолосаРегулированияИнтервалаГрафика.ПутьКДанным = "ПолосаРегулированияИнтервалаГрафика";
	ПолосаРегулированияИнтервалаГрафика.Ориентация = ОриентацияЭлементаФормы.Горизонтально; 
	ПолосаРегулированияИнтервалаГрафика.ОтображениеРазметки =  ОтображениеРазметкиПолосыРегулирования.НеОтображать;
	ПолосаРегулированияИнтервалаГрафика.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолосаРегулированияИнтервалаГрафика.УстановитьДействие(
		"ПриИзменении",	"ПолосаРегулированияИнтервалаГрафикаПриИзменении");
		
	ОтборыГрафикаСостояний = Элементы.Добавить("ОтборыГрафикаСостояний", Тип("ГруппаФормы"), Элементы.ГрафикСостоянияОР);
	ОтборыГрафикаСостояний.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    ОтборыГрафикаСостояний.Заголовок = "Отборы графика состояний"; 
	ОтборыГрафикаСостояний.Подсказка = "Отборы графика состояний"; 
	ОтборыГрафикаСостояний.ОтображатьЗаголовок = Ложь; 
	
	КнопкаОтборПоПериоду = Элементы.Добавить("ОтборПоПериоду", Тип("ПолеФормы"), Элементы.ОтборыГрафикаСостояний);
	КнопкаОтборПоПериоду.Вид = ВидПоляФормы.ПолеФлажка;
	КнопкаОтборПоПериоду.ПутьКДанным = "ОтборПоПериоду"; 
	КнопкаОтборПоПериоду.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КнопкаОтборПоПериоду.Заголовок = "Отбор по периоду"; 
	КнопкаОтборПоПериоду.УстановитьДействие("ПриИзменении", "ОтборПоПериодуПриИзменении");
	
	ПолеДатаНачала = Элементы.Добавить("ДатаНачала", Тип("ПолеФормы"), Элементы.ОтборыГрафикаСостояний);
	ПолеДатаНачала.Вид = ВидПоляФормы.ПолеВвода;
	ПолеДатаНачала.ПутьКДанным = "ДатаНачала"; 
	ПолеДатаНачала.Заголовок = "Дата начала";
	ПолеДатаНачала.УстановитьДействие("ПриИзменении","ДатаНачалаПриИзменении");
	
	ПолеДатаОкончания = Элементы.Добавить("ДатаОкончания", Тип("ПолеФормы"), Элементы.ОтборыГрафикаСостояний);
	ПолеДатаОкончания.Вид = ВидПоляФормы.ПолеВвода;
	ПолеДатаОкончания.ПутьКДанным = "ДатаОкончания"; 
	ПолеДатаОкончания.Заголовок = "Дата окончания";
		
	ЛегендаГрафика = Элементы.Добавить("ЛегендаГрафика", Тип("ГруппаФормы"), Элементы.ГрафикСостоянияОР);
    ЛегендаГрафика.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЛегендаГрафика.Видимость = Ложь;
    ЛегендаГрафика.Заголовок = "Легенда графика"; 
	ЛегендаГрафика.Подсказка = "Легенда графика";
	ЛегендаГрафика.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("Декорация3", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.ЦветФона = ЦветаСтиля.МоиВариантыОтчетовЦвет;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлемент.Ширина = 2;
	НовыйЭлемент.Высота = 1; 
	
	НовыйЭлемент = Элементы.Добавить("Декорация2", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.Заголовок = "Эксплуатация";
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
	НовыйЭлемент = Элементы.Добавить("Декорация7", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветОсобогоТекста;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлемент.Ширина = 2;
	НовыйЭлемент.Высота = 1;
	
	НовыйЭлемент = Элементы.Добавить("Декорация6", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.Заголовок = "Простой"; 
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
	НовыйЭлемент = Элементы.Добавить("Декорация5", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.ЦветФона = ЦветаСтиля.ГиперссылкаЦвет;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлемент.Ширина = 2;
	НовыйЭлемент.Высота = 1;
	
	НовыйЭлемент = Элементы.Добавить("Декорация4", Тип("ДекорацияФормы"), ЛегендаГрафика);
    НовыйЭлемент.Заголовок = "Испытания"; 
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
    ЭлементГрафикСостоянийОР = Элементы.Добавить("ГрафикСостоянийОР", Тип("ПолеФормы"), Элементы.ГрафикСостоянияОР);
	ЭлементГрафикСостоянийОР.Вид = ВидПоляФормы.ПолеДиаграммыГанта;
	ЭлементГрафикСостоянийОР.ПутьКДанным = "ГрафикСостоянийОР"; 
	ЭлементГрафикСостоянийОР.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементГрафикСостоянийОР.УстановитьДействие("ОбработкаРасшифровки", "ГрафикСостоянийОРОбработкаРасшифровки");
	
    ПолеТДТаблицаСостояний = Элементы.Добавить("ПолеТДТаблицаСостояний", Тип("ПолеФормы"), Элементы.ГрафикСостоянияОР);
	ПолеТДТаблицаСостояний.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	ПолеТДТаблицаСостояний.ПутьКДанным = "ПолеТДТаблицаСостояний"; 
	ПолеТДТаблицаСостояний.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеТДТаблицаСостояний.УстановитьДействие("ПриАктивизации", "ПолеТДТаблицаСостоянийПриАктивизации");	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуСписокДокументовСостояний()
	
	НовыйЭлементСписокДокументовСостояний = Элементы.Добавить("ГруппаСписокДокументовСостояний",
															  Тип("ГруппаФормы"),
															  Элементы.СтраницыСостояний);
    НовыйЭлементСписокДокументовСостояний.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСписокДокументовСостояний.Заголовок = "Журнал состояний"; 
	НовыйЭлементСписокДокументовСостояний.Подсказка = "Группа список документов наработки";
	НовыйЭлементСписокДокументовСостояний.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	НовыйЭлементСписокДокументовСостояний.РастягиватьПоВертикали = Истина;
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ТаблицаСостоянийОР", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТаблицаСостоянийОР.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ТаблицаСостоянийОР.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_ТекущееСостояниеОР.Период КАК Период,
		|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
		|	торо_ТекущееСостояниеОР.ПричинаПростоя КАК ПричинаПростоя,
		|	торо_ТекущееСостояниеОР.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
		|ГДЕ
		|	торо_ТекущееСостояниеОР.ОбъектРемонта = &ОбъектРемонта";    
        
    ТаблицаСостоянийОР = Элементы.Добавить("ТаблицаСостоянийОР",
											Тип("ТаблицаФормы"),
											НовыйЭлементСписокДокументовСостояний);
    ТаблицаСостоянийОР.ПутьКДанным                    	= "ТаблицаСостоянийОР";
    ТаблицаСостоянийОР.Отображение                    	= ОтображениеТаблицы.ИерархическийСписок;
	ТаблицаСостоянийОР.ПутьКДаннымКартинкиСтроки 		= "ТаблицаСостоянийОР.СтандартнаяКартинка";
	ТаблицаСостоянийОР.ПоложениеСостоянияПросмотра    	= ПоложениеСостоянияПросмотра.Нет;
	ТаблицаСостоянийОР.УстановитьДействие("Выбор", "ТаблицаСостоянийОРВыбор");
    	
	// Заполнение командной панели 
	ГруппаВводСостояния = Элементы.Добавить("ВводСостояния",
											Тип("ГруппаФормы"),
											Элементы.ТаблицаСостоянийОР.КоманднаяПанель);
    ГруппаВводСостояния.Вид = ВидГруппыФормы.Подменю;
	ГруппаВводСостояния.Подсказка = "Ввод состояния";
    ГруппаВводСостояния.Заголовок = "Ввод состояния";
	ГруппаВводСостояния.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ГруппаВводСостояния.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка; 

	КомандаВводСостоянияНаДату = Команды.Добавить("ВводСостоянияНаДату"); 
	КомандаВводСостоянияНаДату.Действие = "ВводСостоянияНаДату"; 
		
	КнопкаФормыВводСостоянияНаДату = Элементы.Добавить("ВводСостоянияНаДату", Тип("КнопкаФормы"), Элементы.ВводСостояния); 
	КнопкаФормыВводСостоянияНаДату.ИмяКоманды = "ВводСостоянияНаДату"; 
	КнопкаФормыВводСостоянияНаДату.Заголовок = "На дату";
	КнопкаФормыВводСостоянияНаДату.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыВводСостоянияНаДату.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 
	
	КомандаВводСостоянияНаПериод = Команды.Добавить("ВводСостоянияНаПериод"); 
	КомандаВводСостоянияНаПериод.Действие = "ВводСостоянияНаПериод"; 
		
	КнопкаФормыВводСостоянияНаПериод = Элементы.Добавить("ВводСостоянияНаПериод",
														 Тип("КнопкаФормы"),
														 Элементы.ВводСостояния);
	КнопкаФормыВводСостоянияНаПериод.ИмяКоманды = "ВводСостоянияНаПериод"; 
	КнопкаФормыВводСостоянияНаПериод.Заголовок = "На период";
	КнопкаФормыВводСостоянияНаПериод.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыВводСостоянияНаПериод.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 
	
	КомандаОбновитьСостоянияОР = Команды.Добавить("ОбновитьСостоянияОР"); 
	КомандаОбновитьСостоянияОР.Действие = "ОбновитьСостоянияОР"; 
	КомандаОбновитьСостоянияОР.Картинка = БиблиотекаКартинок.Обновить;
	
	КнопкаФормыОбновитьСостоянияОР = Элементы.Добавить("ОбновитьСостоянияОР",
														Тип("КнопкаФормы"),
														Элементы.ТаблицаСостоянийОР.КоманднаяПанель);
	КнопкаФормыОбновитьСостоянияОР.ИмяКоманды = "ОбновитьСостоянияОР"; 
	КнопкаФормыОбновитьСостоянияОР.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОбновитьСостоянияОР.Отображение = ОтображениеКнопки.Картинка;
    КнопкаФормыОбновитьСостоянияОР.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

	ОтчетыСостояний = Элементы.Добавить("ОтчетыСостояний",
										Тип("ГруппаФормы"),
										Элементы.ТаблицаСостоянийОР.КоманднаяПанель);
    ОтчетыСостояний.Вид = ВидГруппыФормы.Подменю;
	ОтчетыСостояний.Подсказка = "Отчеты состояний";
    ОтчетыСостояний.Заголовок = "Отчеты состояний";
	ОтчетыСостояний.Отображение = ОтображениеКнопки.Картинка;
	ОтчетыСостояний.Картинка = БиблиотекаКартинок.Отчет;  
	
	КомандаОткрытьОтчетПростойОборудования = Команды.Добавить("ОткрытьОтчетПростойОборудования"); 
	КомандаОткрытьОтчетПростойОборудования.Действие = "ОткрытьОтчетПростойОборудования"; 
		
	КнопкаФормыОткрытьОтчетПростойОборудования = Элементы.Добавить("ТаблицаСостоянийОРОткрытьОтчетПростойОборудования",
																	Тип("КнопкаФормы"),
																	Элементы.ОтчетыСостояний);
	КнопкаФормыОткрытьОтчетПростойОборудования.ИмяКоманды = "ОткрытьОтчетПростойОборудования"; 
	КнопкаФормыОткрытьОтчетПростойОборудования.Заголовок = "Простой оборудования";
	КнопкаФормыОткрытьОтчетПростойОборудования.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОткрытьОтчетПростойОборудования.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 
	
	КомандаОткрытьОтчетОстановЗапускОборудования = Команды.Добавить("ОткрытьОтчетОстановЗапускОборудования"); 
	КомандаОткрытьОтчетОстановЗапускОборудования.Действие = "ОткрытьОтчетОстановЗапускОборудования"; 
		
	КнопкаФормыОткрытьОтчетОстановЗапускОборудования = Элементы.Добавить(
		"ТаблицаСостоянийОРОткрытьОтчетОстановЗапускОборудования", Тип("КнопкаФормы"),Элементы.ОтчетыСостояний);
	КнопкаФормыОткрытьОтчетОстановЗапускОборудования.ИмяКоманды = "ОткрытьОтчетОстановЗапускОборудования";
	КнопкаФормыОткрытьОтчетОстановЗапускОборудования.Заголовок = "Останов/запуск оборудования";
	КнопкаФормыОткрытьОтчетОстановЗапускОборудования.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОткрытьОтчетОстановЗапускОборудования.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 
    	

	НоваяКолонка = Элементы.Добавить("ТаблицаСостоянийОРПериод", Тип("ПолеФормы"), ТаблицаСостоянийОР);
    НоваяКолонка.ПутьКДанным = "ТаблицаСостоянийОР.Период"; 
	НоваяКолонка.Заголовок = "Дата изменения состояния";
	    
    НоваяКолонка = Элементы.Добавить("ТаблицаСостоянийОРВидЭксплуатации", Тип("ПолеФормы"), ТаблицаСостоянийОР);
    НоваяКолонка.ПутьКДанным = "ТаблицаСостоянийОР.ВидЭксплуатации";
	
	НоваяКолонка = Элементы.Добавить("ТаблицаСостоянийОРПричинаПростоя", Тип("ПолеФормы"), ТаблицаСостоянийОР);
    НоваяКолонка.ПутьКДанным = "ТаблицаСостоянийОР.ПричинаПростоя"; 
	    
    НоваяКолонка = Элементы.Добавить("ТаблицаСостоянийОРРегистратор", Тип("ПолеФормы"), ТаблицаСостоянийОР);
   	НоваяКолонка.ПутьКДанным = "ТаблицаСостоянийОР.Регистратор";   
	НоваяКолонка.Заголовок = "Документ";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуПуски()
	
	НовыйЭлементПуски = Элементы.Добавить("СтраницаПуски", Тип("ГруппаФормы"), Элементы.СтраницыПоказателейЭксплуатации);
    НовыйЭлементПуски.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементПуски.Заголовок = "Пуски"; 
	НовыйЭлементПуски.Подсказка = "Страница пуски";
	НовыйЭлементПуски.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	НовыйЭлементПуски.Видимость = ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
	
	// Создание таблицы значений
	МассивТипаП = Новый Массив;
	МассивТипаП.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипаП = Новый ОписаниеТипов(МассивТипаП);
	МассивРеквизитовФормыП = Новый Массив;
	МассивРеквизитовФормыП.Добавить(Новый РеквизитФормы("КоличествоПусков", ОписаниеТипаП, , "КоличествоПусков"));
	
	ТаблицаВидыПусковОР = Новый ТаблицаЗначений;
	ТаблицаВидыПусковОР.Колонки.Добавить("ВидПуска",
										 Новый ОписаниеТипов("СправочникСсылка.торо_ВидыПусковОР"),
										 "Вид пуска");
	ТаблицаВидыПусковОР.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"), "Количество");
	
	Для Каждого Колонка Из ТаблицаВидыПусковОР.Колонки Цикл
		МассивРеквизитовФормыП.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "КоличествоПусков"));
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблицаП = Элементы.Найти("КоличествоПусков");
	Если ЭлементТаблицаП <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблицаП);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормыП);
	КонецЕсли; 
	
	// Заполнение командной панели
	КомандаОбновитьПуски = Команды.Добавить("ОбновитьПуски"); 
	КомандаОбновитьПуски.Заголовок = "Обновить пуски";
	КомандаОбновитьПуски.Действие  = "ОбновитьПуски"; 
		
	КнопкаФормыОбновитьПуски = Элементы.Добавить("КоличествоПусковОбновитьПуски", Тип("КнопкаФормы"), НовыйЭлементПуски); 
	КнопкаФормыОбновитьПуски.ИмяКоманды = "ОбновитьПуски"; 
	КнопкаФормыОбновитьПуски.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормыОбновитьПуски.Отображение = ОтображениеКнопки.Картинка;
	КнопкаФормыОбновитьПуски.Картинка  = БиблиотекаКартинок.Обновить;
	
		
	// Добавление ТаблицыЗначений на форму 
	
	ТаблицаКоличествоПусков = Элементы.Добавить("КоличествоПусков", Тип("ТаблицаФормы"), НовыйЭлементПуски);
	ТаблицаКоличествоПусков.ПутьКДанным = "КоличествоПусков";
	ТаблицаКоличествоПусков.Отображение = ОтображениеТаблицы.Список; 
	ТаблицаКоличествоПусков.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаКоличествоПусков.ОтображениеСтрокиПоиска.Видимость = Ложь; 
	ТаблицаКоличествоПусков.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
	НовыйЭлементВидПуска = Элементы.Добавить("КоличествоПусковВидПуска", Тип("ПолеФормы"), ТаблицаКоличествоПусков);
	НовыйЭлементВидПуска.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементВидПуска.ПутьКДанным = "КоличествоПусков.ВидПуска";
	НовыйЭлементВидПуска.Заголовок = "Вид пуска";
	НовыйЭлементВидПуска.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;	
	
	НовыйЭлементКоличество = Элементы.Добавить("КоличествоПусковКоличество", Тип("ПолеФормы"), ТаблицаКоличествоПусков);
	НовыйЭлементКоличество.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементКоличество.ПутьКДанным = "КоличествоПусков.Количество";
	НовыйЭлементКоличество.Заголовок = "Количество";
	НовыйЭлементКоличество.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
		
	ЗначениеВРеквизитФормы(ТаблицаВидыПусковОР, "КоличествоПусков");	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуВыявленныеДефекты()
	
	НовыйЭлементСтраницаВыявленныеДефекты = Элементы.Добавить("СтраницаВыявленныеДефекты",
															 Тип("ГруппаФормы"),
															 Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаВыявленныеДефекты.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаВыявленныеДефекты.Заголовок = "Выявленные дефекты"; 
	НовыйЭлементСтраницаВыявленныеДефекты.Подсказка = "Выявленные дефекты";
	НовыйЭлементСтраницаВыявленныеДефекты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ВыявленныеДефекты", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ВыявленныеДефекты.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ВыявленныеДефекты.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Документ,
		|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
		|	торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект КАК ТиповойДефект,
		|	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ПричинаДефекта,
		|	торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта КАК КритичностьДефекта,
		|	ВЫБОР
		|		КОГДА НЕ торо_ВыявленныеДефекты.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ВыявленныеДефекты.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		|	ВЫБОР
		|		КОГДА торо_ОтмененныеРемонты.Отменен ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отменен,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ДефектОписание,
		|	торо_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОбнаружения
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		|		ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОтмененныеРемонты КАК торо_ОтмененныеРемонты
		|		ПО торо_ВыявленныеДефектыСписокДефектов.ID = торо_ОтмененныеРемонты.ID
		|ГДЕ
		|	(торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта В (&МассивОбъектов)
		|			ИЛИ торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент В (&МассивОбъектов))
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_ВыявленныеДефекты.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтображатьОтмененные
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ торо_ОтмененныеРемонты.Отменен ЕСТЬ NULL
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	торо_ВыявленныеДефекты.ДатаОбнаружения УБЫВ";    
        
    ВыявленныеДефекты = Элементы.Добавить("ВыявленныеДефекты",
										 Тип("ТаблицаФормы"),
										 НовыйЭлементСтраницаВыявленныеДефекты);
    ВыявленныеДефекты.ПутьКДанным                    = "ВыявленныеДефекты";
    ВыявленныеДефекты.Отображение                    = ОтображениеТаблицы.ИерархическийСписок;
	ВыявленныеДефекты.ПутьКДаннымКартинкиСтроки 	 = "ВыявленныеДефекты.ИндексКартинки";
	ВыявленныеДефекты.КартинкаСтрок  				 = БиблиотекаКартинок.торо_СтатусыДокумента;
    ВыявленныеДефекты.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет; 
	ВыявленныеДефекты.УстановитьДействие("Выбор", "ВыявленныеДефектыВыбор");
    	
	// Заполнение командной панели	
	КомандаВвестиДефект = Команды.Добавить("ВвестиДефект"); 
	КомандаВвестиДефект.Заголовок 	= "Ввести дефект";
	КомандаВвестиДефект.Действие  	= "ВвестиДефект"; 
	КомандаВвестиДефект.Картинка 	= БиблиотекаКартинок.СоздатьЭлементСписка;
	КомандаВвестиДефект.Отображение = ОтображениеКнопки.КартинкаИТекст; 
	
	КнопкаФормыВвестиДефект = Элементы.Добавить("ВыявленныеДефектыВвестиДефект",
												Тип("КнопкаФормы"),
												Элементы.ВыявленныеДефекты.КоманднаяПанель);
	КнопкаФормыВвестиДефект.ИмяКоманды = "ВвестиДефект"; 
	КнопкаФормыВвестиДефект.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыВвестиДефект.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
    	
	КомандаОтображатьТолькоПроведенныеДефекты = Команды.Добавить("ОтображатьТолькоПроведенныеДефекты"); 
	КомандаОтображатьТолькоПроведенныеДефекты.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеДефекты.Действие  = "ОтображатьТолькоПроведенныеДефекты"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеДефекты = Элементы.Добавить("ОтображатьТолькоПроведенныеДефекты",
																	 Тип("КнопкаФормы"),
																	 Элементы.ВыявленныеДефекты.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеДефекты.ИмяКоманды = "ОтображатьТолькоПроведенныеДефекты"; 
	КнопкаФормыОтображатьТолькоПроведенныеДефекты.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеДефекты.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КомандаОтображатьОтмененныеВД = Команды.Добавить("ОтображатьОтмененныеВД"); 
	КомандаОтображатьОтмененныеВД.Заголовок = "Отображать отмененные ремонты";
	КомандаОтображатьОтмененныеВД.Действие  = "ОтображатьОтмененныеВД"; 
	
	КнопкаФормыОтображатьОтмененныеВД = Элементы.Добавить("ВыявленныеДефектыОтображатьОтмененныеВД",
														 Тип("КнопкаФормы"),
														 Элементы.ВыявленныеДефекты.КоманднаяПанель);
	КнопкаФормыОтображатьОтмененныеВД.ИмяКоманды = "ОтображатьОтмененныеВД"; 
	КнопкаФормыОтображатьОтмененныеВД.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьОтмененныеВД.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КомандаОбновитьСписок = Команды.Добавить("ОбновитьСписок"); 
	КомандаОбновитьСписок.Заголовок = "Обновить список";
	КомандаОбновитьСписок.Действие  = "ОбновитьСписок"; 
	КомандаОбновитьСписок.Картинка 	= БиблиотекаКартинок.Обновить;
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ВыявленныеДефектыОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ВыявленныеДефекты.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыОбъектРемонта", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ОбъектРемонта"; 
	    
    НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыДокумент", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.Документ";
	
	НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыОтказавшийЭлемент", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ОтказавшийЭлемент";
    
    НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыТиповойДефект", Тип("ПолеФормы"), ВыявленныеДефекты);
   	НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ТиповойДефект";  
	
	НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыВидДефекта", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ВидДефекта"; 
	    
    НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыПричинаДефекта", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ПричинаДефекта"; 
	НоваяКолонка.Заголовок = "Непосредственная причина дефекта";
	
	НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыКритичностьДефекта", Тип("ПолеФормы"), ВыявленныеДефекты);
    НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.КритичностьДефекта";
    
    НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыДатаОбнаружения", Тип("ПолеФормы"), ВыявленныеДефекты);
   	НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ДатаОбнаружения";  
	
	НоваяКолонка = Элементы.Добавить("ВыявленныеДефектыДефектОписание", Тип("ПолеФормы"), ВыявленныеДефекты);
   	НоваяКолонка.ПутьКДанным = "ВыявленныеДефекты.ДефектОписание"; 
	НоваяКолонка.Заголовок = "Описание дефекта";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуВнешниеОснования()
	
	НовыйЭлементСтраницаВнешниеОснования = Элементы.Добавить("СтраницаВнешниеОснования",
															Тип("ГруппаФормы"),
															Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаВнешниеОснования.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаВнешниеОснования.Заголовок = "Внешние основания"; 
	НовыйЭлементСтраницаВнешниеОснования.Подсказка = "Внешние основания";
	НовыйЭлементСтраницаВнешниеОснования.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;   
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ВнешниеОснования", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ВнешниеОснования.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ВнешниеОснования.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка КАК Документ,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Описание КАК Описание,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
		|	ЕСТЬNULL(торо_ВнешниеОснованияДляРаботСрезПоследних.Обработано, ЛОЖЬ) КАК Обработано,
		|	ВЫБОР
		|		КОГДА НЕ торо_ВнешнееОснованиеДляРабот.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ВнешнееОснованиеДляРабот.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта КАК ОбъектРемонта,
		|	ВЫБОР
		|		КОГДА торо_ОтмененныеРемонты.Отменен ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отменен
		|ИЗ
		|	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
		|		ПО торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка = торо_ВнешнееОснованиеДляРабот.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(, ОбъектРемонта В (&МассивОбъектов)) КАК торо_ВнешниеОснованияДляРаботСрезПоследних
		|		ПО торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID = торо_ВнешниеОснованияДляРаботСрезПоследних.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОтмененныеРемонты КАК торо_ОтмененныеРемонты
		|		ПО торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID = торо_ОтмененныеРемонты.ID
		|ГДЕ
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта В(&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_ВнешнееОснованиеДляРабот.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтображатьОтмененные
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ торо_ОтмененныеРемонты.Отменен ЕСТЬ NULL
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта УБЫВ";    
        
    ВнешниеОснования = Элементы.Добавить("ВнешниеОснования",
										Тип("ТаблицаФормы"),
										НовыйЭлементСтраницаВнешниеОснования);
    ВнешниеОснования.ПутьКДанным                    = "ВнешниеОснования";
    ВнешниеОснования.Отображение                    = ОтображениеТаблицы.ИерархическийСписок;
	ВнешниеОснования.ПутьКДаннымКартинкиСтроки 		= "ВнешниеОснования.ИндексКартинки";
	ВнешниеОснования.КартинкаСтрок  				= БиблиотекаКартинок.торо_СтатусыДокумента;
    ВнешниеОснования.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
	ВнешниеОснования.УстановитьДействие("Выбор", "ВнешниеОснованияВыбор");
    	
	// Заполнение командной панели	
	КомандаОтображатьТолькоПроведенныеВнешниеОснования = Команды.Добавить("ОтображатьТолькоПроведенныеВнешниеОснования"); 
	КомандаОтображатьТолькоПроведенныеВнешниеОснования.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеВнешниеОснования.Действие  = "ОтображатьТолькоПроведенныеВнешниеОснования"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеВнешниеОснования = Элементы.Добавить(
		"ОтображатьТолькоПроведенныеВнешниеОснования", Тип("КнопкаФормы"),Элементы.ВнешниеОснования.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеВнешниеОснования.ИмяКоманды = "ОтображатьТолькоПроведенныеВнешниеОснования"; 
	КнопкаФормыОтображатьТолькоПроведенныеВнешниеОснования.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеВнешниеОснования.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КомандаВнешниеОснованияОтображатьОтмененныеВО = Команды.Добавить("ОтображатьОтмененныеВО"); 
	КомандаВнешниеОснованияОтображатьОтмененныеВО.Заголовок = "Отображать отмененные ремонты";
	КомандаВнешниеОснованияОтображатьОтмененныеВО.Действие  = "ОтображатьОтмененныеВО"; 
	
	КнопкаФормыОтображатьОтмененныеВО = Элементы.Добавить("ВнешниеОснованияОтображатьОтмененныеВО",
														 Тип("КнопкаФормы"),
														 Элементы.ВнешниеОснования.КоманднаяПанель);
	КнопкаФормыОтображатьОтмененныеВО.ИмяКоманды = "ОтображатьОтмененныеВО"; 
	КнопкаФормыОтображатьОтмененныеВО.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьОтмененныеВО.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ВнешниеОснованияОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ВнешниеОснования.КоманднаяПанель); 
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ВнешниеОснованияОбъектРемонта", Тип("ПолеФормы"), ВнешниеОснования);
    НоваяКолонка.ПутьКДанным = "ВнешниеОснования.ОбъектРемонта"; 
	    
    НоваяКолонка = Элементы.Добавить("ВнешниеОснованияДокумент", Тип("ПолеФормы"), ВнешниеОснования);
    НоваяКолонка.ПутьКДанным = "ВнешниеОснования.Документ";
	
	НоваяКолонка = Элементы.Добавить("ВнешниеОснованияПлановаяДатаРемонта", Тип("ПолеФормы"), ВнешниеОснования);
    НоваяКолонка.ПутьКДанным = "ВнешниеОснования.ПлановаяДатаРемонта";
    
    НоваяКолонка = Элементы.Добавить("ВнешниеОснованияОписание", Тип("ПолеФормы"), ВнешниеОснования);
   	НоваяКолонка.ПутьКДанным = "ВнешниеОснования.Описание";  
	
	НоваяКолонка = Элементы.Добавить("ВнешниеОснованияОбработано", Тип("ПолеФормы"), ВнешниеОснования);
    НоваяКолонка.ПутьКДанным = "ВнешниеОснования.Обработано";  
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуПредстоящиеРемонты()
	
   	НовыйЭлементСтраницаПредстоящиеРемонты = Элементы.Добавить("СтраницаПредстоящиеРемонты",
																Тип("ГруппаФормы"),
																Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаПредстоящиеРемонты.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаПредстоящиеРемонты.Заголовок = "Плановые ремонты"; 
	НовыйЭлементСтраницаПредстоящиеРемонты.Подсказка = "Плановые ремонты";
	НовыйЭлементСтраницаПредстоящиеРемонты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ПредстоящиеРемонты", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ПредстоящиеРемонты.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ПредстоящиеРемонты.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачалаРемонтныхРабот,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончанияРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен КАК Отменен,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументПлановыхДат,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки КАК Документ,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID,
		|	1 КАК ИндексКартинки
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ОбъектРемонтныхРабот В (&МассивОбъектов)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ДатаНачала, ОбъектРемонта В (&МассивОбъектов)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
		|		ПО торо_ПлановыеРемонтныеРаботыСрезПоследних.ID = торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ПлановыеРемонтныеРаботыСрезПоследних.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор ЕСТЬ NULL
		|	И торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID ЕСТЬ NULL
		|	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен
		|	И ВЫБОР
		|			КОГДА &ОтображатьОтмененные
		|				ТОГДА Истина
		|			ИНАЧЕ НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен
		|		КОНЕЦ	
		|
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	ВЫБОР
		|		КОГДА торо_ПланГрафикРемонта.Проведен
		|			ТОГДА 1
		|		КОГДА торо_ПланГрафикРемонта.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.Ссылка = торо_ПланГрафикРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ НЕ торо_ПланГрафикРемонта.Проведен
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтображатьОтмененные
		|				ТОГДА Истина
		|			ИНАЧЕ НЕ торо_ПланГрафикРемонтаПланРемонтов.Отменен
		|		КОНЕЦ
		|		
		|	И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот В(&МассивОбъектов)
		|	И НЕ торо_ПланГрафикРемонтаПланРемонтов.Замещен";    
        
    ПредстоящиеРемонты = Элементы.Добавить("ПредстоящиеРемонты",
											Тип("ТаблицаФормы"),
											НовыйЭлементСтраницаПредстоящиеРемонты);
    ПредстоящиеРемонты.ПутьКДанным                    	= "ПредстоящиеРемонты";
    ПредстоящиеРемонты.Отображение                    	= ОтображениеТаблицы.ИерархическийСписок; 
	ПредстоящиеРемонты.ПутьКДаннымКартинкиСтроки 		= "ПредстоящиеРемонты.ИндексКартинки";
	ПредстоящиеРемонты.КартинкаСтрок  					= БиблиотекаКартинок.торо_СтатусыДокумента;
    ПредстоящиеРемонты.ПоложениеСостоянияПросмотра    	= ПоложениеСостоянияПросмотра.Нет;
	ПредстоящиеРемонты.УстановитьДействие("Выбор", "ПредстоящиеРемонтыВыбор");
    	
	// Заполнение командной панели	
	КомандаОтображатьТолькоПроведенныеППР = Команды.Добавить("ОтображатьТолькоПроведенныеППР"); 
	КомандаОтображатьТолькоПроведенныеППР.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеППР.Действие  = "ОтображатьТолькоПроведенныеППР"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеППР = Элементы.Добавить("ОтображатьТолькоПроведенныеППР",
																 Тип("КнопкаФормы"),
																 Элементы.ПредстоящиеРемонты.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеППР.ИмяКоманды = "ОтображатьТолькоПроведенныеППР"; 
	КнопкаФормыОтображатьТолькоПроведенныеППР.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеППР.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КомандаПредстоящиеРемонтыОтображатьОтмененные = Команды.Добавить("ОтображатьОтмененные"); 
	КомандаПредстоящиеРемонтыОтображатьОтмененные.Заголовок = "Отображать отмененные ремонты";
	КомандаПредстоящиеРемонтыОтображатьОтмененные.Действие  = "ОтображатьОтмененные"; 
	
	КнопкаФормыОтображатьОтмененные = Элементы.Добавить("ПредстоящиеРемонтыОтображатьОтмененные",
														Тип("КнопкаФормы"),
														Элементы.ПредстоящиеРемонты.КоманднаяПанель);
	КнопкаФормыОтображатьОтмененные.ИмяКоманды = "ОтображатьОтмененные"; 
	КнопкаФормыОтображатьОтмененные.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьОтмененные.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ПредстоящиеРемонтыОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ПредстоящиеРемонты.КоманднаяПанель); 
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыОбъектРемонтныхРабот", Тип("ПолеФормы"), ПредстоящиеРемонты);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.ОбъектРемонтныхРабот"; 
	    
    НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыДокументПлановыхДат", Тип("ПолеФормы"), ПредстоящиеРемонты);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.ДокументПлановыхДат";
	
	НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыДокумент", Тип("ПолеФормы"), ПредстоящиеРемонты);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.Документ";
	НоваяКолонка.Заголовок = "Основание";
    
    НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыВидРемонтныхРабот", Тип("ПолеФормы"), ПредстоящиеРемонты);
   	НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.ВидРемонтныхРабот"; 
	НоваяКолонка.Заголовок = "Вид ремонта";
	
	НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыДатаНачалаРемонтныхРабот",
									Тип("ПолеФормы"),
									ПредстоящиеРемонты);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.ДатаНачалаРемонтныхРабот";  
	
	НоваяКолонка = Элементы.Добавить("ПредстоящиеРемонтыДатаОкончанияРемонтныхРабот",
									Тип("ПолеФормы"),
									ПредстоящиеРемонты);
   	НоваяКолонка.ПутьКДанным = "ПредстоящиеРемонты.ДатаОкончанияРемонтныхРабот"; 	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуЗаявкиНаРемонт()
	
	НовыйЭлементСтраницаЗаявкиНаРемонт = Элементы.Добавить("СтраницаЗаявкиНаРемонт",
															Тип("ГруппаФормы"),
															Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаЗаявкиНаРемонт.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаЗаявкиНаРемонт.Заголовок = "Сметы ремонта (Заявки на ремонт)"; 
	НовыйЭлементСтраницаЗаявкиНаРемонт.Подсказка = "Сметы ремонта (Заявки на ремонт)";
	НовыйЭлементСтраницаЗаявкиНаРемонт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ЗаявкиНаРемонт", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ЗаявкиНаРемонт.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ЗаявкиНаРемонт.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Документ,
		|	торо_ТекущиеСтатусыСогласованияДокументов.СтатусДокумента КАК СтатусДокумента,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		|	торо_ЗаявкаНаРемонт.Дата КАК Дата,
		|	торо_ЗаявкаНаРемонт.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА НЕ торо_ЗаявкаНаРемонт.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ЗаявкаНаРемонт.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ГарантийныйРемонт КАК ГарантийныйРемонт,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущиеСтатусыСогласованияДокументов КАК торо_ТекущиеСтатусыСогласованияДокументов
		|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ТекущиеСтатусыСогласованияДокументов.СогласуемыйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
		|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонт.Ссылка
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта В (&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_ЗаявкаНаРемонт.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ	
		|УПОРЯДОЧИТЬ ПО
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала УБЫВ";    
        
    ЗаявкиНаРемонт = Элементы.Добавить("ЗаявкиНаРемонт", Тип("ТаблицаФормы"), НовыйЭлементСтраницаЗаявкиНаРемонт);
    ЗаявкиНаРемонт.ПутьКДанным                    	= "ЗаявкиНаРемонт";
    ЗаявкиНаРемонт.Отображение                   	= ОтображениеТаблицы.ИерархическийСписок; 
	ЗаявкиНаРемонт.ПутьКДаннымКартинкиСтроки 		= "ЗаявкиНаРемонт.ИндексКартинки";
	ЗаявкиНаРемонт.КартинкаСтрок  					= БиблиотекаКартинок.торо_СтатусыДокумента;
    ЗаявкиНаРемонт.ПоложениеСостоянияПросмотра    	= ПоложениеСостоянияПросмотра.Нет;
	ЗаявкиНаРемонт.УстановитьДействие("Выбор", "ЗаявкиНаРемонтВыбор");
    	
	// Заполнение командной панели	
	КомандаОтображатьТолькоПроведенныеЗаявки = Команды.Добавить("ОтображатьТолькоПроведенныеЗаявки"); 
	КомандаОтображатьТолькоПроведенныеЗаявки.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеЗаявки.Действие  = "ОтображатьТолькоПроведенныеЗаявки"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеЗаявки = Элементы.Добавить("ОтображатьТолькоПроведенныеЗаявки",
																	Тип("КнопкаФормы"),
																	Элементы.ЗаявкиНаРемонт.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеЗаявки.ИмяКоманды = "ОтображатьТолькоПроведенныеЗаявки"; 
	КнопкаФормыОтображатьТолькоПроведенныеЗаявки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеЗаявки.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ЗаявкиНаРемонтОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ЗаявкиНаРемонт.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтОбъектРемонта", Тип("ПолеФормы"), ЗаявкиНаРемонт);
    НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.ОбъектРемонта";   
	НоваяКолонка.Видимость = Ложь;
	    
    НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтДокумент", Тип("ПолеФормы"), ЗаявкиНаРемонт);
    НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.Документ";
	
	НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтВидРемонта", Тип("ПолеФормы"), ЗаявкиНаРемонт);
    НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.ВидРемонта";
	    
    НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтГарантийныйРемонт", Тип("ПолеФормы"), ЗаявкиНаРемонт);
   	НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.ГарантийныйРемонт"; 
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	
	НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтДатаНачала", Тип("ПолеФормы"), ЗаявкиНаРемонт);
    НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.ДатаНачала";  
	
	НоваяКолонка = Элементы.Добавить("ЗаявкиНаРемонтДатаОкончания", Тип("ПолеФормы"), ЗаявкиНаРемонт);
   	НоваяКолонка.ПутьКДанным = "ЗаявкиНаРемонт.ДатаОкончания";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуНарядыНаВыполнениеРемонтныхРабот()
	
	НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот = Элементы.Добавить("СтраницаНарядыНаВыполнениеРемонтныхРабот",
																			Тип("ГруппаФормы"),
																			Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот.Заголовок = "Наряды на выполнение ремонтных работ"; 
	НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот.Подсказка = "Наряды на выполнение ремонтных работ";
	НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("НарядыНаВыполнениеРемонтныхРабот", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.НарядыНаВыполнениеРемонтныхРабот.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.НарядыНаВыполнениеРемонтныхРабот.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка КАК Документ,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ОпаснаяРабота КАК ОпаснаяРабота,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.МестоПроведенияРабот КАК МестоПроведенияРабот,
		|	ВЫБОР
		|		КОГДА НЕ торо_НарядНаВыполнениеРемонтныхРабот.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_НарядНаВыполнениеРемонтныхРабот.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
		|		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ОбъектРемонта В (&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_НарядНаВыполнениеРемонтныхРабот.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";    
        
    НарядыНаВыполнениеРемонтныхРабот = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРабот",
														Тип("ТаблицаФормы"),
														НовыйЭлементСтраницаНарядыНаВыполнениеРемонтныхРабот);
    НарядыНаВыполнениеРемонтныхРабот.ПутьКДанным                    = "НарядыНаВыполнениеРемонтныхРабот";
    НарядыНаВыполнениеРемонтныхРабот.Отображение                    = ОтображениеТаблицы.ИерархическийСписок; 
	НарядыНаВыполнениеРемонтныхРабот.ПутьКДаннымКартинкиСтроки 		= "НарядыНаВыполнениеРемонтныхРабот.ИндексКартинки";
	НарядыНаВыполнениеРемонтныхРабот.КартинкаСтрок  				= БиблиотекаКартинок.торо_СтатусыДокумента;
    НарядыНаВыполнениеРемонтныхРабот.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
	НарядыНаВыполнениеРемонтныхРабот.УстановитьДействие("Выбор", "НарядыНаВыполнениеРемонтныхРаботВыбор");
    	
	// Заполнение командной панели	
	КомандаОтображатьТолькоПроведенныеНаряды = Команды.Добавить("ОтображатьТолькоПроведенныеНаряды"); 
	КомандаОтображатьТолькоПроведенныеНаряды.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеНаряды.Действие  = "ОтображатьТолькоПроведенныеНаряды"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеНаряды = Элементы.Добавить("ОтображатьТолькоПроведенныеНаряды",
																	Тип("КнопкаФормы"),
																	Элементы.НарядыНаВыполнениеРемонтныхРабот.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеНаряды.ИмяКоманды = "ОтображатьТолькоПроведенныеНаряды"; 
	КнопкаФормыОтображатьТолькоПроведенныеНаряды.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеНаряды.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботОбновитьСписок",
												  Тип("КнопкаФормы"),
												  Элементы.НарядыНаВыполнениеРемонтныхРабот.КоманднаяПанель); 
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботОбъектРемонта",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
    НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.ОбъектРемонта";   
	НоваяКолонка.Видимость = Ложь;
	    
    НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботДокумент",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
    НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.Документ";
	
	НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботВидРемонтныхРабот",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
    НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.ВидРемонтныхРабот"; 
	НоваяКолонка.Заголовок = "Вид ремонта";
	    
    НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботДатаНачала",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
   	НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.ДатаНачала"; 
	НоваяКолонка.Заголовок = "Дата начала ремонтных работ";
	
	НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботДатаОкончания",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
    НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.ДатаОкончания";  
	
	НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботОпаснаяРабота",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
   	НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.ОпаснаяРабота";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	
	НоваяКолонка = Элементы.Добавить("НарядыНаВыполнениеРемонтныхРаботМестоПроведенияРабот",
									Тип("ПолеФормы"),
									НарядыНаВыполнениеРемонтныхРабот);
   	НоваяКолонка.ПутьКДанным = "НарядыНаВыполнениеРемонтныхРабот.МестоПроведенияРабот";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуВыполненныеРемонты()
	
	НовыйЭлементСтраницаВыполненныеРемонты = Элементы.Добавить("СтраницаВыполненныеРемонты",
																Тип("ГруппаФормы"),
																Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаВыполненныеРемонты.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаВыполненныеРемонты.Заголовок = "Выполненные ремонты"; 
	НовыйЭлементСтраницаВыполненныеРемонты.Подсказка = "Выполненные ремонты";
	НовыйЭлементСтраницаВыполненныеРемонты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ВыполненныеРемонты", Новый ОписаниеТипов("ДинамическийСписок")); 
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ВыполненныеРемонты.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ВыполненныеРемонты.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачалаПлан,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончанияПлан,
	|	ФактДаты.ДатаНачала КАК ДатаНачалаФакт,
	|	ФактДаты.ДатаОкончания КАК ДатаОкончанияФакт,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК РаботыЗавершены,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
	|			ТОГДА 1
	|		КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ГарантийныйРемонт КАК ГарантийныйРемонт,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	|		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = торо_АктОВыполненииЭтапаРабот.Ссылка
	|			И (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК ФактДаты
	|		ПО (ФактДаты.IDРемонта = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтображатьТолькоПроведенные
	|				ТОГДА торо_АктОВыполненииЭтапаРабот.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтображатьТолькоЗавершенные
	|				ТОГДА торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ДатаОкончанияРемонта,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ДатаОкончанияРемонта,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ДатаОкончанияРемонта,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ДатаОкончанияРемонта,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ВидРемонтныхРабот,
	|	ИСТИНА,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.Ссылка,
	|	ВЫБОР
	|		КОГДА торо_ВводНачальныхДанных.Проведен
	|			ТОГДА 1
	|		КОГДА торо_ВводНачальныхДанных.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	торо_ВводНачальныхДанныхВыполненныеРаботы.ОбъектРемонта
	|ИЗ
	|	Документ.торо_ВводНачальныхДанных.ВыполненныеРаботы КАК торо_ВводНачальныхДанныхВыполненныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВводНачальныхДанных КАК торо_ВводНачальныхДанных
	|		ПО торо_ВводНачальныхДанныхВыполненныеРаботы.Ссылка = торо_ВводНачальныхДанных.Ссылка
	|			И (торо_ВводНачальныхДанныхВыполненныеРаботы.ОбъектРемонта В (&МассивОбъектов))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтображатьТолькоПроведенные
	|				ТОГДА торо_ВводНачальныхДанных.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";    
        
    ВыполненныеРемонты = Элементы.Добавить("ВыполненныеРемонты",
										  Тип("ТаблицаФормы"),
										  НовыйЭлементСтраницаВыполненныеРемонты);
    ВыполненныеРемонты.ПутьКДанным                    = "ВыполненныеРемонты";
    ВыполненныеРемонты.Отображение                    = ОтображениеТаблицы.ИерархическийСписок; 
	ВыполненныеРемонты.ПутьКДаннымКартинкиСтроки 	  = "ВыполненныеРемонты.ИндексКартинки";
	ВыполненныеРемонты.КартинкаСтрок 				  = БиблиотекаКартинок.торо_СтатусыДокумента;
    ВыполненныеРемонты.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
	ВыполненныеРемонты.УстановитьДействие("Выбор", "ВыполненныеРемонтыВыбор");
    	
	// Заполнение командной панели
	
	КомандаОтображатьТолькоПроведенныеАкты = Команды.Добавить("ОтображатьТолькоПроведенныеАкты"); 
	КомандаОтображатьТолькоПроведенныеАкты.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеАкты.Действие  = "ОтображатьТолькоПроведенныеАкты"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеАкты = Элементы.Добавить("ОтображатьТолькоПроведенныеАкты",
																	Тип("КнопкаФормы"),
																	Элементы.ВыполненныеРемонты.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеАкты.ИмяКоманды = "ОтображатьТолькоПроведенныеАкты"; 
	КнопкаФормыОтображатьТолькоПроведенныеАкты.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеАкты.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КомандаОтображатьТолькоЗавершенные = Команды.Добавить("ОтображатьТолькоЗавершенные"); 
	КомандаОтображатьТолькоЗавершенные.Заголовок = "Отображать только завершенные ремонты";
	КомандаОтображатьТолькоЗавершенные.Действие  = "ОтображатьТолькоЗавершенные"; 
	
	КнопкаФормыОтображатьТолькоЗавершенные = Элементы.Добавить("ВыполненныеРемонтыОтображатьТолькоЗавершенные",
															  Тип("КнопкаФормы"),
															  Элементы.ВыполненныеРемонты.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоЗавершенные.ИмяКоманды = "ОтображатьТолькоЗавершенные"; 
	КнопкаФормыОтображатьТолькоЗавершенные.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоЗавершенные.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ВыполненныеРемонтыОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ВыполненныеРемонты.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыРаботыЗавершены", Тип("ПолеФормы"), ВыполненныеРемонты);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.РаботыЗавершены";   
	НоваяКолонка.Заголовок = "З.";
    НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	    
    НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыОбъектРемонта", Тип("ПолеФормы"), ВыполненныеРемонты);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ОбъектРемонта";
	НоваяКолонка.Видимость = Ложь;
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыДокумент", Тип("ПолеФормы"), ВыполненныеРемонты);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.Документ"; 
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыВидРемонтныхРабот", Тип("ПолеФормы"), ВыполненныеРемонты);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ВидРемонтныхРабот";
	НоваяКолонка.Заголовок = "Вид ремонта"; 
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыГарантийныйРемонт", Тип("ПолеФормы"), ВыполненныеРемонты);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ГарантийныйРемонт";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка; 
	
	ВыполненныеРемонтыГруппа1 = Элементы.Добавить("ВыполненныеРемонтыГруппа1",
												 Тип("ГруппаФормы"),
												 Элементы.ВыполненныеРемонты);
	ВыполненныеРемонтыГруппа1.Вид = ВидГруппыФормы.ГруппаКолонок;
	ВыполненныеРемонтыГруппа1.Группировка = ГруппировкаКолонок.Вертикальная;
		    
    НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыДатаНачалаПлан", Тип("ПолеФормы"), ВыполненныеРемонтыГруппа1);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ДатаНачалаПлан"; 
		
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыДатаНачалаФакт", Тип("ПолеФормы"), ВыполненныеРемонтыГруппа1);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ДатаНачалаФакт";  
	
	ВыполненныеРемонтыГруппа2 = Элементы.Добавить("ВыполненныеРемонтыГруппа2",
												 Тип("ГруппаФормы"),
												 Элементы.ВыполненныеРемонты);
	ВыполненныеРемонтыГруппа2.Вид = ВидГруппыФормы.ГруппаКолонок;
	ВыполненныеРемонтыГруппа2.Группировка = ГруппировкаКолонок.Вертикальная;
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыДатаОкончанияПлан", Тип("ПолеФормы"), ВыполненныеРемонтыГруппа2);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ДатаОкончанияПлан";
		
	НоваяКолонка = Элементы.Добавить("ВыполненныеРемонтыДатаОкончанияФакт", Тип("ПолеФормы"), ВыполненныеРемонтыГруппа2);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРемонты.ДатаОкончанияФакт";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуАктыПриемкиОборудования()
	
	НовыйЭлементСтраницаАктыПриемкиОборудования = Элементы.Добавить("СтраницаАктыПриемкиОборудования",
																	Тип("ГруппаФормы"),
																	Элементы.СтраницыРемонтов);
    НовыйЭлементСтраницаАктыПриемкиОборудования.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаАктыПриемкиОборудования.Заголовок = "Акты приемки оборудования"; 
	НовыйЭлементСтраницаАктыПриемкиОборудования.Подсказка = "Акты приемки оборудования";
	НовыйЭлементСтраницаАктыПриемкиОборудования.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("АктыПриемкиОборудования", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.АктыПриемкиОборудования.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.АктыПриемкиОборудования.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка КАК Документ,
		|	торо_АктПриемкиОборудованияРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_АктПриемкиОборудованияРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		|	торо_АктПриемкиОборудованияРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА НЕ торо_АктПриемкиОборудования.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_АктПриемкиОборудования.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_АктПриемкиОборудованияРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктПриемкиОборудования КАК торо_АктПриемкиОборудования
		|		ПО торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка = торо_АктПриемкиОборудования.Ссылка
		|ГДЕ
		|	торо_АктПриемкиОборудованияРемонтыОборудования.ОбъектРемонта В (&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_АктПриемкиОборудования.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";    
        
    АктыПриемкиОборудования = Элементы.Добавить("АктыПриемкиОборудования",
												Тип("ТаблицаФормы"),
												НовыйЭлементСтраницаАктыПриемкиОборудования);
    АктыПриемкиОборудования.ПутьКДанным                    	= "АктыПриемкиОборудования";
    АктыПриемкиОборудования.Отображение                    	= ОтображениеТаблицы.ИерархическийСписок; 
	АктыПриемкиОборудования.ПутьКДаннымКартинкиСтроки 		= "АктыПриемкиОборудования.ИндексКартинки";
	АктыПриемкиОборудования.КартинкаСтрок  					= БиблиотекаКартинок.торо_СтатусыДокумента;
    АктыПриемкиОборудования.ПоложениеСостоянияПросмотра    	= ПоложениеСостоянияПросмотра.Нет;
	АктыПриемкиОборудования.УстановитьДействие("Выбор", "АктПриемкиОборудованияВыбор");
    	
	// Заполнение командной панели	
	КомандаОтображатьТолькоПроведенныеАктыПриемки = Команды.Добавить("ОтображатьТолькоПроведенныеАктыПриемки"); 
	КомандаОтображатьТолькоПроведенныеАктыПриемки.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеАктыПриемки.Действие = "ОтображатьТолькоПроведенныеАктыПриемки"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеАктыПриемки = Элементы.Добавить("ОтображатьТолькоПроведенныеАктыПриемки",
																		 Тип("КнопкаФормы"),
																		 Элементы.АктыПриемкиОборудования.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеАктыПриемки.ИмяКоманды = "ОтображатьТолькоПроведенныеАктыПриемки"; 
	КнопкаФормыОтображатьТолькоПроведенныеАктыПриемки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеАктыПриемки.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("АктыПриемкиОборудованияОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.АктыПриемкиОборудования.КоманднаяПанель); 
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("АктыПриемкиОборудованияОбъектРемонта",
									Тип("ПолеФормы"),
									АктыПриемкиОборудования);
    НоваяКолонка.ПутьКДанным = "АктыПриемкиОборудования.ОбъектРемонта"; 
	НоваяКолонка.Видимость = Ложь;
	
	НоваяКолонка = Элементы.Добавить("АктыПриемкиОборудованияДокумент", Тип("ПолеФормы"), АктыПриемкиОборудования);
    НоваяКолонка.ПутьКДанным = "АктыПриемкиОборудования.Документ"; 
	
	НоваяКолонка = Элементы.Добавить("АктыПриемкиОборудованияВидРемонтныхРабот",
									Тип("ПолеФормы"),
									АктыПриемкиОборудования);
    НоваяКолонка.ПутьКДанным = "АктыПриемкиОборудования.ВидРемонтныхРабот";
	НоваяКолонка.Заголовок = "Вид ремонта"; 
	
	НоваяКолонка = Элементы.Добавить("АктыПриемкиОборудованияДатаНачала", Тип("ПолеФормы"), АктыПриемкиОборудования);
   	НоваяКолонка.ПутьКДанным = "АктыПриемкиОборудования.ДатаНачала"; 
		
	НоваяКолонка = Элементы.Добавить("АктыПриемкиОборудованияДатаОкончания", Тип("ПолеФормы"), АктыПриемкиОборудования);
   	НоваяКолонка.ПутьКДанным = "АктыПриемкиОборудования.ДатаОкончания";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуПредстоящиеРегламентныеМероприятия()
	
	НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия = Элементы.Добавить(
		"СтраницаПредстоящиеРегламентныеМероприятия", Тип("ГруппаФормы"), Элементы.СтраницыРегламентныхМероприятий);
    НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия.Заголовок = "Предстоящие регламентные мероприятия"; 
	НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия.Подсказка = "Предстоящие регламентные мероприятия";
	НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ПредстоящиеРегламентныеМероприятия", Новый ОписаниеТипов("ДинамическийСписок"));
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ПредстоящиеРегламентныеМероприятия.ПроизвольныйЗапрос   = Истина;
    ЭтаФорма.ПредстоящиеРегламентныеМероприятия.ТекстЗапроса         =
	"ВЫБРАТЬ
	|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
	|ПОМЕСТИТЬ СписокОбъектовРМ
	|ИЗ
	|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
	|ГДЕ
	|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	|	торо_ПлановыеМероприятияСрезПоследних.Отменен КАК Отменен,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК Документ,
	|	торо_ПлановыеМероприятияСрезПоследних.ВидМероприятия КАК ВидМероприятия,
	|	торо_ПлановыеМероприятияСрезПоследних.СписокОбъектов КАК СписокОбъектов,
	|	торо_ПлановыеМероприятияСрезПоследних.ID КАК ID,
	|	1 КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(
	|			,
	|			СписокОбъектов В
	|				(ВЫБРАТЬ
	|					СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
	|				ИЗ
	|					СписокОбъектовРМ КАК СписокОбъектовРМ)) КАК торо_ПлановыеМероприятияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеМероприятия.СрезПоследних(
	|				&ДатаНачала,
	|				СписокОбъектов В
	|					(ВЫБРАТЬ
	|						СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
	|					ИЗ
	|						СписокОбъектовРМ КАК СписокОбъектовРМ)) КАК торо_ЗавершенныеМероприятияСрезПоследних
	|		ПО торо_ПлановыеМероприятияСрезПоследних.ID = торо_ЗавершенныеМероприятияСрезПоследних.ID
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|		ПО торо_ПлановыеМероприятияСрезПоследних.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	|ГДЕ
	|	НЕ торо_ПлановыеМероприятияСрезПоследних.Регистратор ЕСТЬ NULL
	|	И торо_ЗавершенныеМероприятияСрезПоследних.ID ЕСТЬ NULL
	|	И НЕ торо_ПлановыеМероприятияСрезПоследних.Отменен	
	|ОБЪЕДИНИТЬ ВСЕ	
	|ВЫБРАТЬ
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаКон,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Отменен,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID,
	|	ВЫБОР
	|		КОГДА торо_ГрафикРегламентныхМероприятийТОиР.Проведен
	|			ТОГДА 1
	|		КОГДА торо_ГрафикРегламентныхМероприятийТОиР.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	|		ПО торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = торо_ГрафикРегламентныхМероприятийТОиР.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтображатьТолькоПроведенные
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ НЕ торо_ГрафикРегламентныхМероприятийТОиР.Проведен
	|		КОНЕЦ
	|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта В
	|			(ВЫБРАТЬ
	|				СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
	|			ИЗ
	|				СписокОбъектовРМ КАК СписокОбъектовРМ)";    
        
    ПредстоящиеРегламентныеМероприятия = Элементы.Добавить("ПредстоящиеРегламентныеМероприятия",
															Тип("ТаблицаФормы"),
															НовыйЭлементСтраницаПредстоящиеРегламентныеМероприятия);
    ПредстоящиеРегламентныеМероприятия.ПутьКДанным = "ПредстоящиеРегламентныеМероприятия";
    ПредстоящиеРегламентныеМероприятия.Отображение = ОтображениеТаблицы.ИерархическийСписок; 
	ПредстоящиеРегламентныеМероприятия.ПутьКДаннымКартинкиСтроки = "ПредстоящиеРегламентныеМероприятия.ИндексКартинки";
	ПредстоящиеРегламентныеМероприятия.КартинкаСтрок  = БиблиотекаКартинок.торо_СтатусыДокумента;
    ПредстоящиеРегламентныеМероприятия.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ПредстоящиеРегламентныеМероприятия.УстановитьДействие("Выбор","ПредстоящиеРегламентныеМероприятияВыбор");
    	
	// Заполнение командной панели
	КомандаОтображатьТолькоПроведенныеРМ = Команды.Добавить("ОтображатьТолькоПроведенныеРМ"); 
	КомандаОтображатьТолькоПроведенныеРМ.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеРМ.Действие  = "ОтображатьТолькоПроведенныеРМ"; 
	
	КнопкаФормыОтображатьТолькоПроведенныеРМ = Элементы.Добавить("ОтображатьТолькоПроведенныеРМ",
																Тип("КнопкаФормы"),
																Элементы.ПредстоящиеРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеРМ.ИмяКоманды = "ОтображатьТолькоПроведенныеРМ"; 
	КнопкаФормыОтображатьТолькоПроведенныеРМ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОтображатьТолькоПроведенныеРМ.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ПредстоящиеРегламентныеМероприятияОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ПредстоящиеРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
    КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ПредстоящиеРегламентныеМероприятияДокумент",
									Тип("ПолеФормы"),
									ПредстоящиеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРегламентныеМероприятия.Документ"; 
	    
    НоваяКолонка = Элементы.Добавить("ПредстоящиеРегламентныеМероприятияВидМероприятия",
									Тип("ПолеФормы"),
									ПредстоящиеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРегламентныеМероприятия.ВидМероприятия";
	
	НоваяКолонка = Элементы.Добавить("ПредстоящиеРегламентныеМероприятияДатаНачала",
									Тип("ПолеФормы"),
									ПредстоящиеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ПредстоящиеРегламентныеМероприятия.ДатаНачала";
    
    НоваяКолонка = Элементы.Добавить("ПредстоящиеРегламентныеМероприятияДатаОкончания",
									Тип("ПолеФормы"),
									ПредстоящиеРегламентныеМероприятия);
   	НоваяКолонка.ПутьКДанным = "ПредстоящиеРегламентныеМероприятия.ДатаОкончания";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуНарядыНаРегламентныеМероприятия()
	
	НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия = Элементы.Добавить("СтраницаНарядыНаРегламентныеМероприятия",
																			Тип("ГруппаФормы"),
																			Элементы.СтраницыРегламентныхМероприятий);
    НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия.Заголовок = "Наряды на регламентные мероприятия"; 
	НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия.Подсказка = "Наряды на регламентные мероприятия";
	НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
	
	// СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитыФормы = Новый РеквизитФормы("НарядыНаРегламентныеМероприятия", Новый ОписаниеТипов("ДинамическийСписок")); 
    ДобавляемыеРеквизиты.Добавить(РеквизитыФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.НарядыНаРегламентныеМероприятия.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.НарядыНаРегламентныеМероприятия.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
		|ПОМЕСТИТЬ СписокОбъектовРМ
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
		|;		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка КАК Документ,
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаНачала КАК ДатаНачала,
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаОкончания КАК ДатаОкончания,
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ОпаснаяРабота КАК ОпаснаяРабота,
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.МестоПроведенияРабот КАК МестоПроведенияРабот,
		|	ВЫБОР
		|		КОГДА НЕ торо_НарядНаРегламентноеМероприятие.ПометкаУдаления
		|			ТОГДА ВЫБОР
		|					КОГДА торо_НарядНаРегламентноеМероприятие.Проведен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
		|		ПО торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = торо_НарядНаРегламентноеМероприятие.Ссылка
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ОбъектРемонта В
		|			(ВЫБРАТЬ
		|				СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
		|			ИЗ
		|				СписокОбъектовРМ КАК СписокОбъектовРМ)
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_НарядНаРегламентноеМероприятие.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ"; 
        
    ТабНарядыНаРегламентныеМероприятия = Элементы.Добавить("НарядыНаРегламентныеМероприятия",
															Тип("ТаблицаФормы"),
															НовыйЭлементСтраницаНарядыНаРегламентныеМероприятия);
    ТабНарядыНаРегламентныеМероприятия.ПутьКДанным                    = "НарядыНаРегламентныеМероприятия";
    ТабНарядыНаРегламентныеМероприятия.Отображение                    = ОтображениеТаблицы.ИерархическийСписок;
	ТабНарядыНаРегламентныеМероприятия.ПутьКДаннымКартинкиСтроки 	  = "НарядыНаРегламентныеМероприятия.ИндексКартинки";
	ТабНарядыНаРегламентныеМероприятия.КартинкаСтрок  				  = БиблиотекаКартинок.торо_СтатусыДокумента;
    ТабНарядыНаРегламентныеМероприятия.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет; 
	ТабНарядыНаРегламентныеМероприятия.УстановитьДействие("Выбор", "НарядыНаРегламентныеМероприятияВыбор");
    	
	// Заполнение командной панели 
	КомандаОтображатьТолькоПроведенныеНарядыНаРМ = Команды.Добавить("ОтображатьТолькоПроведенныеНарядыНаРМ"); 
	КомандаОтображатьТолькоПроведенныеНарядыНаРМ.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеНарядыНаРМ.Действие  = "ОтображатьТолькоПроведенныеНарядыНаРМ"; 	
	
	КнопкаФормыОтображатьТолькоПроведенныеРМ = Элементы.Добавить("ОтображатьТолькоПроведенныеНарядыНаРМ",
																Тип("КнопкаФормы"),
																Элементы.НарядыНаРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеРМ.ИмяКоманды = "ОтображатьТолькоПроведенныеРМ"; 
	КнопкаФормыОтображатьТолькоПроведенныеРМ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОтображатьТолькоПроведенныеРМ.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("НарядыНаРегламентныеМероприятияОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.НарядыНаРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияДокумент",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.Документ"; 
	    
    НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияВидРемонтныхРабот",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.ВидРемонтныхРабот";
	
	НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияДатаНачала",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.ДатаНачала";
    
    НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияДатаОкончания",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
   	НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.ДатаОкончания";  
	
	НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияОпаснаяРабота",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.ОпаснаяРабота";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
    
    НоваяКолонка = Элементы.Добавить("НарядыНаРегламентныеМероприятияМестоПроведенияРабот",
									Тип("ПолеФормы"),
									ТабНарядыНаРегламентныеМероприятия);
   	НоваяКолонка.ПутьКДанным = "НарядыНаРегламентныеМероприятия.МестоПроведенияРабот";	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьДСВыполненныеРегламентныеМероприятия()
	
	СтрПолеФормы = "ПолеФормы";
	СтрОтображатьТолькоЗавершенныеАктыРМ = "ОтображатьТолькоЗавершенныеАктыРМ";

	НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия = Элементы.Добавить(
		"СтраницаВыполненныеРегламентныеМероприятия", Тип("ГруппаФормы"), Элементы.СтраницыРегламентныхМероприятий);
    НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия.Заголовок = "Выполненные регламентные мероприятия"; 
	НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия.Подсказка = "Выполненные регламентные мероприятия";
	НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 	
	
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы("ВыполненныеРегламентныеМероприятия", Новый ОписаниеТипов("ДинамическийСписок"));
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ВыполненныеРегламентныеМероприятия.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ВыполненныеРегламентныеМероприятия.ТекстЗапроса = "ВЫБРАТЬ
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
		|ПОМЕСТИТЬ СписокОбъектовРМ
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачалаПлан,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончанияПлан,
		|	ФактДаты.ДатаНачала КАК ДатаНачалаФакт,
		|	ФактДаты.ДатаОкончания КАК ДатаОкончанияФакт,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВЫБОР
		|		КОГДА торо_АктОВыполненииРегламентногоМероприятияМероприятия.ЗавершитьРемонт
		|				И НЕ торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РаботыЗавершены,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА торо_АктОВыполненииРегламентногоМероприятия.Проведен
		|			ТОГДА 1
		|		КОГДА торо_АктОВыполненииРегламентногоМероприятия.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинки,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID КАК ID
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОбъектовРМ КАК СписокОбъектовРМ
		|		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ОбъектРемонта = СписокОбъектовРМ.СписокОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия КАК торо_АктОВыполненииРегламентногоМероприятия
		|		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка = торо_АктОВыполненииРегламентногоМероприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
		|		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID = торо_ВыполненныеМероприятияОбъектов.ID
		|			И (торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта = &ОбъектРемонта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК ФактДаты
		|		ПО (ФактДаты.IDРемонта = торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_АктОВыполненииРегламентногоМероприятия.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоЗавершенные
		|				ТОГДА торо_АктОВыполненииРегламентногоМероприятияМероприятия.ЗавершитьРемонт
		|						И НЕ торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта ЕСТЬ NULL
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ	
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.ДатаПоследнегоМероприятия,
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.ДатаПоследнегоМероприятия,
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.ДатаПоследнегоМероприятия,
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.ДатаПоследнегоМероприятия,
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.ВидМероприятия,
		|	ИСТИНА,
		|	торо_ВводНачальныхДанныхРегламентныеМероприятия.Ссылка,
		|	ВЫБОР
		|		КОГДА торо_ВводНачальныхДанных.Проведен
		|			ТОГДА 1
		|		КОГДА торо_ВводНачальныхДанных.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	NULL
		|ИЗ
		|	Документ.торо_ВводНачальныхДанных.РегламентныеМероприятия КАК торо_ВводНачальныхДанныхРегламентныеМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОбъектовРМ КАК СписокОбъектовРМ
		|		ПО торо_ВводНачальныхДанныхРегламентныеМероприятия.СписокОбъектов = СписокОбъектовРМ.СписокОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВводНачальныхДанных КАК торо_ВводНачальныхДанных
		|		ПО торо_ВводНачальныхДанныхРегламентныеМероприятия.Ссылка = торо_ВводНачальныхДанных.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтображатьТолькоПроведенные
		|				ТОГДА торо_ВводНачальныхДанных.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";   
        
    ТабВыполненныеРегламентныеМероприятия = Элементы.Добавить("ВыполненныеРегламентныеМероприятия",
															 Тип("ТаблицаФормы"),
															 НовыйЭлементСтраницаВыполненныеРегламентныеМероприятия);
    ТабВыполненныеРегламентныеМероприятия.ПутьКДанным = "ВыполненныеРегламентныеМероприятия";
    ТабВыполненныеРегламентныеМероприятия.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	ТабВыполненныеРегламентныеМероприятия.ПутьКДаннымКартинкиСтроки = "ВыполненныеРегламентныеМероприятия.ИндексКартинки";
	ТабВыполненныеРегламентныеМероприятия.КартинкаСтрок  = БиблиотекаКартинок.торо_СтатусыДокумента;
    ТабВыполненныеРегламентныеМероприятия.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет; 
	ТабВыполненныеРегламентныеМероприятия.УстановитьДействие("Выбор","ВыполненныеРегламентныеМероприятияВыбор");
    	
	//Заполнение командной панели 
	КомандаОтображатьТолькоПроведенныеАктыРМ = Команды.Добавить("ОтображатьТолькоПроведенныеАктыРМ"); 
	КомандаОтображатьТолькоПроведенныеАктыРМ.Заголовок = "Отображать только проведенные документы";
	КомандаОтображатьТолькоПроведенныеАктыРМ.Действие  = "ОтображатьТолькоПроведенныеАктыРМ"; 	
	
	КнопкаФормыОтображатьТолькоПроведенныеАктыРМ = Элементы.Добавить("ОтображатьТолькоПроведенныеАктыРМ",
																	Тип("КнопкаФормы"),
																	Элементы.ВыполненныеРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоПроведенныеАктыРМ.ИмяКоманды = "ОтображатьТолькоПроведенныеАктыРМ"; 
	КнопкаФормыОтображатьТолькоПроведенныеАктыРМ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОтображатьТолькоПроведенныеАктыРМ.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;   
	
	КомандаОтображатьТолькоЗавершенныеАктыРМ = Команды.Добавить(СтрОтображатьТолькоЗавершенныеАктыРМ); 
	КомандаОтображатьТолькоЗавершенныеАктыРМ.Заголовок = "Отображать только завершенные ремонты";
	КомандаОтображатьТолькоЗавершенныеАктыРМ.Действие  = СтрОтображатьТолькоЗавершенныеАктыРМ; 	
	
	КнопкаФормыОтображатьТолькоЗавершенныеАктыРМ = Элементы.Добавить(
		"ВыполненныеРегламентныеМероприятияОтображатьТолькоЗавершенныеАктыРМ",
		Тип("КнопкаФормы"),
		Элементы.ВыполненныеРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОтображатьТолькоЗавершенныеАктыРМ.ИмяКоманды = СтрОтображатьТолькоЗавершенныеАктыРМ; 
	КнопкаФормыОтображатьТолькоЗавершенныеАктыРМ.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОтображатьТолькоЗавершенныеАктыРМ.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
	
	КнопкаФормыОбновитьСписок = Элементы.Добавить("ВыполненныеРегламентныеМероприятияОбновитьСписок",
												 Тип("КнопкаФормы"),
												 Элементы.ВыполненныеРегламентныеМероприятия.КоманднаяПанель);
	КнопкаФормыОбновитьСписок.ИмяКоманды = "ОбновитьСписок"; 
	КнопкаФормыОбновитьСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормыОбновитьСписок.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели; 

    НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияРаботыЗавершены",
									Тип(СтрПолеФормы),
									ТабВыполненныеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.РаботыЗавершены";   
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.Заголовок = "З.";
	    
    НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияДокумент",
									Тип(СтрПолеФормы),
									ТабВыполненныеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.Документ";
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияВидРемонтныхРабот",
									Тип(СтрПолеФормы),
									ТабВыполненныеРегламентныеМероприятия);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.ВидРемонтныхРабот";
	НоваяКолонка.Заголовок = "Вид мероприятия"; 
	
	ГруппаВыполненныеРМДатыНачала = Элементы.Добавить("ВыполненныеРМДатыНачала",
													 Тип("ГруппаФормы"),
													 Элементы.ВыполненныеРегламентныеМероприятия);
	ГруппаВыполненныеРМДатыНачала.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаВыполненныеРМДатыНачала.Группировка = ГруппировкаКолонок.Вертикальная;
    
    НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияДатаНачалаПлан",
									Тип(СтрПолеФормы),
									ГруппаВыполненныеРМДатыНачала);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.ДатаНачалаПлан";  
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияДатаНачалаФакт",
									Тип(СтрПолеФормы),
									ГруппаВыполненныеРМДатыНачала);
    НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.ДатаНачалаФакт";  
	
	ГруппаВыполненныеРМДатыОкончания = Элементы.Добавить("ВыполненныеРМДатыОкончания",
														Тип("ГруппаФормы"),
														Элементы.ВыполненныеРегламентныеМероприятия);
	ГруппаВыполненныеРМДатыОкончания.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаВыполненныеРМДатыОкончания.Группировка = ГруппировкаКолонок.Вертикальная;

	НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияДатаОкончанияПлан",
									Тип(СтрПолеФормы),
									ГруппаВыполненныеРМДатыОкончания);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.ДатаОкончанияПлан";  
	
	НоваяКолонка = Элементы.Добавить("ВыполненныеРегламентныеМероприятияДатаОкончанияФакт",
									Тип(СтрПолеФормы),
									ГруппаВыполненныеРМДатыОкончания);
   	НоваяКолонка.ПутьКДанным = "ВыполненныеРегламентныеМероприятия.ДатаОкончанияФакт";
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуПоказателиЭксплуатации()
		
	НовыйЭлементПоказателиЭксплуатации = Элементы.Добавить("ГруппаПоказателиЭксплуатации",
															Тип("ГруппаФормы"),
															Элементы.ПанельОР);
    НовыйЭлементПоказателиЭксплуатации.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементПоказателиЭксплуатации.Заголовок = "Плановая наработка"; 
	НовыйЭлементПоказателиЭксплуатации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  	
	
	ГруппаПоказатели = Элементы.Добавить("ГруппаПоказатели", Тип("ГруппаФормы"), Элементы.ГруппаПоказателиЭксплуатации);
	ГруппаПоказатели.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПоказатели.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаПоказатели.ОтображатьЗаголовок = Истина; 
	ГруппаПоказатели.Заголовок = "Показатели";
	ГруппаПоказатели.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПоказатели.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаПоказатели.ЗаголовокСвернутогоОтображения	 = "Показатели";  
	ГруппаПоказатели.Объединенная = Истина; 
	ГруппаПоказатели.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуКонтролируемыеПоказатели()
	
	СтрПолеФормы = "ПолеФормы";
	СтрБулево = "Булево";
	СтрПоказатель = "Показатель";
	СтрСписокИзмеряемыхПоказателей = "СписокИзмеряемыхПоказателей";
	СтрГруппаФормы = "ГруппаФормы";

	НовыйЭлементКонтролируемыеПоказатели = Элементы.Добавить("ГруппаКонтролируемыеПоказатели",
															Тип(СтрГруппаФормы),
															Элементы.ПанельОР);
    НовыйЭлементКонтролируемыеПоказатели.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементКонтролируемыеПоказатели.Заголовок = "Контролируемые показатели"; 
	НовыйЭлементКонтролируемыеПоказатели.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
	// создание таблицы значений
	МассивТипаП = Новый Массив;
	МассивТипаП.Добавить(Тип("ТаблицаЗначений"));
	
	ОписаниеТипаП = Новый ОписаниеТипов(МассивТипаП);
	МассивРеквизитовФормыП = Новый Массив;                                            
	РеквизитФормы = Новый РеквизитФормы(СтрСписокИзмеряемыхПоказателей, ОписаниеТипаП, , СтрСписокИзмеряемыхПоказателей);
	МассивРеквизитовФормыП.Добавить(РеквизитФормы);	
	
	СписокТиповОбъектРемонта = Новый Массив;
	СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ОписаниеСоставногоТипаОбъектРемонта = Новый ОписаниеТипов(СписокТиповОбъектРемонта);
	
	ТЗ_ = Новый ТаблицаЗначений;
	ТЗ_.Колонки.Добавить(СтрПоказатель,
						Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"),
						СтрПоказатель);
	ТЗ_.Колонки.Добавить("ЕдиницаИзмерения",
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Единица измерения");
	ТЗ_.Колонки.Добавить("ИзТиповогоОР", Новый ОписаниеТипов(СтрБулево), "Из типового ОР");
	ТЗ_.Колонки.Добавить("ПоказателиТиповойОР", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"), "Типовой ОР");
	ТЗ_.Колонки.Добавить("Доступность", Новый ОписаниеТипов(СтрБулево), "Доступность");
	ТЗ_.Колонки.Добавить("ПоказателиОбъектРемонта", ОписаниеСоставногоТипаОбъектРемонта, "Объект ремонта");
	ТЗ_.Колонки.Добавить("ДопустимыйМинимум",
	Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип, "Допустимый минимум");
	ТЗ_.Колонки.Добавить("ДопустимыйМаксимум",
	Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип, "Допустимый максимум");
	ТЗ_.Колонки.Добавить("КритическийМинимум",
	Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип, "Критический минимум");  
	ТЗ_.Колонки.Добавить("КритическийМаксимум",
	Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Тип, "Критический максимум");
	ТЗ_.Колонки.Добавить("ЗначенияКонтролируемыхПоказателейИзОР",
	Новый ОписаниеТипов(СтрБулево),
	"Значения контролируемых показателей из ОР");
	ТЗ_.Колонки.Добавить("ТочкаЗамера", Новый ОписаниеТипов("Строка"), "Точка замера");
	ТЗ_.Колонки.Добавить("Удален", Новый ОписаниеТипов(СтрБулево), "Удален");
	ТЗ_.Колонки.Добавить("ТипЗначенияГраниц", Новый ОписаниеТипов("Число"), "Тип значения границ");
	
	Для Каждого Колонка Из ТЗ_.Колонки Цикл                     
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, СтрСписокИзмеряемыхПоказателей); 
		МассивРеквизитовФормыП.Добавить(РеквизитФормы);
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблицаП = Элементы.Найти(СтрСписокИзмеряемыхПоказателей);
	Если ЭлементТаблицаП <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблицаП);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормыП);
	КонецЕсли;
	
	// Добавление ТаблицыЗначений на форму 
	
	ТаблицаПолейВыбораП = Элементы.Добавить(СтрСписокИзмеряемыхПоказателей,
		Тип("ТаблицаФормы"), Элементы.ГруппаКонтролируемыеПоказатели);
	ТаблицаПолейВыбораП.ПутьКДанным = СтрСписокИзмеряемыхПоказателей;
	ТаблицаПолейВыбораП.Отображение = ОтображениеТаблицы.Список; 
	ТаблицаПолейВыбораП.Заголовок = "Контролируемые показатели";
	ТаблицаПолейВыбораП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаПолейВыбораП.ЦветТекстаЗаголовка = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	ТаблицаПолейВыбораП.ШрифтЗаголовка = Новый Шрифт(, 10, Истина, ,Истина);
	ТаблицаПолейВыбораП.ОтображениеСтрокиПоиска.Видимость = Ложь;
	ТаблицаПолейВыбораП.ТолькоПросмотр = Истина;
	ТаблицаПолейВыбораП.ПоложениеУправленияПоиском     = ПоложениеУправленияПоиском.Нет;
    ТаблицаПолейВыбораП.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
    ТаблицаПолейВыбораП.ПоложениеСтрокиПоиска          = ПоложениеСтрокиПоиска.Нет;
    ТаблицаПолейВыбораП.ПоложениеКоманднойПанели       = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
	ТаблицаПолейВыбораП.УстановитьДействие("ПередНачаломДобавления", "СписокИзмеряемыхПоказателейПередНачаломДобавления");
	ТаблицаПолейВыбораП.УстановитьДействие("ПередУдалением", "СписокИзмеряемыхПоказателейПередУдалением");
	ТаблицаПолейВыбораП.УстановитьДействие("ПриНачалеРедактирования",
	"СписокИзмеряемыхПоказателейПриНачалеРедактирования");
	ТаблицаПолейВыбораП.УстановитьДействие("ПриОкончанииРедактирования",
	"СписокИзмеряемыхПоказателейПриОкончанииРедактирования");
	ТаблицаПолейВыбораП.УстановитьДействие("ОбработкаВыбора", "СписокИзмеряемыхПоказателейОбработкаВыбора");
	ТаблицаПолейВыбораП.УстановитьДействие("ПослеУдаления", "СписокИзмеряемыхПоказателейПослеУдаления");
 	
	НовыйЭлементОбъектРемонта = Элементы.Добавить("СписокИзмеряемыхПоказателейОбъектРемонта",
																Тип(СтрПолеФормы),
	ТаблицаПолейВыбораП);
	НовыйЭлементОбъектРемонта.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементОбъектРемонта.ПутьКДанным = "СписокИзмеряемыхПоказателей.ПоказателиОбъектРемонта";
	НовыйЭлементОбъектРемонта.Заголовок = "Объект ремонта";
	НовыйЭлементОбъектРемонта.Видимость = Ложь;
	НовыйЭлементОбъектРемонта.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	НовыйЭлементПоказатель = Элементы.Добавить("СписокИзмеряемыхПоказателейПоказатель",
												Тип(СтрПолеФормы),
												ТаблицаПолейВыбораП);
	НовыйЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоказатель.ПутьКДанным = "СписокИзмеряемыхПоказателей.Показатель";
	НовыйЭлементПоказатель.Заголовок = СтрПоказатель;
	НовыйЭлементПоказатель.АвтоОтметкаНезаполненного = Истина;  
	НовыйЭлементПоказатель.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементПоказатель.УстановитьДействие("НачалоВыбора", "СписокИзмеряемыхПоказателейПоказательНачалоВыбора");
	НовыйЭлементПоказатель.УстановитьДействие("ОбработкаВыбора",
		"СписокИзмеряемыхПоказателейПоказательОбработкаВыбора");
	
	НовыйЭлементЕдиницаИзмерения = Элементы.Добавить("СписокИзмеряемыхПоказателейЕдиницаИзмерения",
													Тип(СтрПолеФормы),
													ТаблицаПолейВыбораП);
	НовыйЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементЕдиницаИзмерения.ПутьКДанным = "СписокИзмеряемыхПоказателей.Показатель.ЕдиницаИзмерения";
	НовыйЭлементЕдиницаИзмерения.Заголовок = "Ед. изм."; 
	НовыйЭлементЕдиницаИзмерения.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;	
	
	НовыйЭлементИзТиповогоОР = Элементы.Добавить("СписокИзмеряемыхПоказателейИзТиповогоОР",
																Тип(СтрПолеФормы),
	ТаблицаПолейВыбораП);
	НовыйЭлементИзТиповогоОР.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементИзТиповогоОР.ПутьКДанным = "СписокИзмеряемыхПоказателей.ИзТиповогоОР";
	НовыйЭлементИзТиповогоОР.Заголовок = "Из ОР";
	НовыйЭлементИзТиповогоОР.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементПоказатель.УстановитьДействие("ПриИзменении",
	"СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении");
	
	ГруппаМакисмальныеМинимальныеЗначения = Элементы.Добавить("МакисмальныеМинимальныеЗначения",
																Тип(СтрГруппаФормы),
																Элементы.СписокИзмеряемыхПоказателей);
	ГруппаМакисмальныеМинимальныеЗначения.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаМакисмальныеМинимальныеЗначения.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ГруппаДопустимые = Элементы.Добавить("Допустимые", Тип(СтрГруппаФормы), Элементы.МакисмальныеМинимальныеЗначения);
	ГруппаДопустимые.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаДопустимые.Группировка = ГруппировкаКолонок.Вертикальная;
	
	НовыйЭлементДопустимыйМинимум = Элементы.Добавить("СписокИзмеряемыхПоказателейДопустимыйМинимум",
													  Тип(СтрПолеФормы),
													  ГруппаДопустимые);
	НовыйЭлементДопустимыйМинимум.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементДопустимыйМинимум.ПутьКДанным = "СписокИзмеряемыхПоказателей.ДопустимыйМинимум";
	НовыйЭлементДопустимыйМинимум.Заголовок = "Допустимый минимум";
	НовыйЭлементДопустимыйМинимум.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;	
	
	НовыйЭлементДопустимыйМаксимум = Элементы.Добавить("СписокИзмеряемыхПоказателейДопустимыйМаксимум",
													  Тип(СтрПолеФормы),
													  ГруппаДопустимые);
	НовыйЭлементДопустимыйМаксимум.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементДопустимыйМаксимум.ПутьКДанным = "СписокИзмеряемыхПоказателей.ДопустимыйМаксимум";
	НовыйЭлементДопустимыйМаксимум.Заголовок = "Допустимый максимум";
	НовыйЭлементДопустимыйМаксимум.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	ГруппаКритические = Элементы.Добавить("Критические", Тип(СтрГруппаФормы), Элементы.МакисмальныеМинимальныеЗначения);
	ГруппаКритические.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКритические.Группировка = ГруппировкаКолонок.Вертикальная;
	
	НовыйЭлементКритическийМинимум = Элементы.Добавить("СписокИзмеряемыхПоказателейКритическийМинимум",
														Тип(СтрПолеФормы),
														ГруппаКритические);
	НовыйЭлементКритическийМинимум.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементКритическийМинимум.ПутьКДанным = "СписокИзмеряемыхПоказателей.КритическийМинимум";
	НовыйЭлементКритическийМинимум.Заголовок = "Критический минимум";
	НовыйЭлементКритическийМинимум.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;	
	
	НовыйЭлементКритическийМаксимум = Элементы.Добавить("СписокИзмеряемыхПоказателейКритическийМаксимум",
														Тип("ПолеФормы"),
														ГруппаКритические);
	НовыйЭлементКритическийМаксимум.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементКритическийМаксимум.ПутьКДанным = "СписокИзмеряемыхПоказателей.КритическийМаксимум";
	НовыйЭлементКритическийМаксимум.Заголовок = "Критический максимум";
	НовыйЭлементКритическийМаксимум.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	ЗначениеВРеквизитФормы(ТЗ_, СтрСписокИзмеряемыхПоказателей);	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьГруппуНаработка()
	
	СтрПолеФормы = "ПолеФормы";
	СтрЧисло = "Число";
	СтрОсновной = "Основной";
	СтрСписокПараметровНаработки = "СписокПараметровНаработки";

	// Создание таблицы значений
	МассивТипа = Новый Массив;
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(СтрСписокПараметровНаработки, ОписаниеТипа, , СтрСписокПараметровНаработки);
	МассивРеквизитовФормы.Добавить(РеквизитФормы);
	
	СписокТиповОбъектРемонта = Новый Массив;
    СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
    ОписаниеСоставногоТипаОбъектРемонта = Новый ОписаниеТипов(СписокТиповОбъектРемонта);
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"), "Дата введения"); 
	ТЗ.Колонки.Добавить("НаработкаОбъектРемонта", ОписаниеСоставногоТипаОбъектРемонта, "Объект ремонта");
	ТЗ.Колонки.Добавить("НаработкаПоказатель",
		Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"), "Показатель наработки");
	ТЗ.Колонки.Добавить(СтрОсновной, Новый ОписаниеТипов("Булево"), СтрОсновной); 
	ТЗ.Колонки.Добавить("ПродолжительностьПериодаПлановойНаработки", Новый ОписаниеТипов(СтрЧисло), "Количество периодов");
	ТЗ.Колонки.Добавить("ПериодПлановойНаработки", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"), "Период");
	ТЗ.Колонки.Добавить("ПлановаяНаработка", Новый ОписаниеТипов(СтрЧисло), "Плановая наработка");
   	ТЗ.Колонки.Добавить("КоэффициентИспользованияОборудования", Новый ОписаниеТипов(СтрЧисло), "КИО");
	ТЗ.Колонки.Добавить("РесурсГарантии", Новый ОписаниеТипов(СтрЧисло), "Ресурс гарантии");
			
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		МассивРеквизитовФормы.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, СтрСписокПараметровНаработки));
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблица = Элементы.Найти(СтрСписокПараметровНаработки);
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормы);
	КонецЕсли;
	
	// Добавление ТаблицыЗначений на форму
	ТаблицаПолейВыбора = Элементы.Добавить(СтрСписокПараметровНаработки,
		Тип("ТаблицаФормы"), Элементы.ГруппаПоказателиЭксплуатации);
	ТаблицаПолейВыбора.ПутьКДанным = СтрСписокПараметровНаработки;
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.Заголовок = "Параметры наработки (скользящие <1 года)";
	ТаблицаПолейВыбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаПолейВыбора.ЦветТекстаЗаголовка = ЦветаСтиля.ГруппаВариантовОтчетовЦвет; 
	ТаблицаПолейВыбора.ШрифтЗаголовка = Новый Шрифт(, 10, Истина, , ); 
	ТаблицаПолейВыбора.ТолькоПросмотр  = Истина;
	ТаблицаПолейВыбора.УстановитьДействие("ПередУдалением", "СписокПараметровНаработкиПередУдалением");
	ТаблицаПолейВыбора.УстановитьДействие("ПриНачалеРедактирования", "СписокПараметровНаработкиПриНачалеРедактирования");
	ТаблицаПолейВыбора.УстановитьДействие("ПередОкончаниемРедактирования",
		"СписокПараметровНаработкиПередОкончаниемРедактирования");
	ТаблицаПолейВыбора.УстановитьДействие("ПриОкончанииРедактирования",
		"СписокПараметровНаработкиПриОкончанииРедактирования");
	ТаблицаПолейВыбора.УстановитьДействие("ПослеУдаления", "СписокПараметровНаработкиПослеУдаления");
				
	НовыйЭлементПериод = Элементы.Добавить("СписокПараметровНаработкиПериод", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПериод.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПериод.ПутьКДанным = "СписокПараметровНаработки.Период";
	НовыйЭлементПериод.Заголовок = "Дата введения";
    НовыйЭлементПериод.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементПериод.УстановитьДействие("ПриИзменении","СписокПараметровНаработкиПериодПриИзменении");	
	
	НовыйЭлементОбъектРемонта = Элементы.Добавить("СписокПараметровНаработкиОбъектРемонта",
												 Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементОбъектРемонта.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементОбъектРемонта.ПутьКДанным = "СписокПараметровНаработки.НаработкаОбъектРемонта";
	НовыйЭлементОбъектРемонта.Заголовок = "Объект ремонта";
	НовыйЭлементОбъектРемонта.Видимость = Ложь;
    НовыйЭлементОбъектРемонта.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементПоказатель = Элементы.Добавить("СписокПараметровНаработкиПоказатель",
											  Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоказатель.ПутьКДанным = "СписокПараметровНаработки.НаработкаПоказатель";
	НовыйЭлементПоказатель.Заголовок = "Показатель наработки";
	НовыйЭлементПоказатель.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево; 
	НовыйЭлементПоказатель.УстановитьДействие("ПриИзменении", "СписокПараметровНаработкиПоказательПриИзменении");

	НовыйЭлементОсновной = Элементы.Добавить("СписокПараметровНаработкиОсновной", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементОсновной.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементОсновной.ПутьКДанным = "СписокПараметровНаработки.Основной";
	НовыйЭлементОсновной.Заголовок = СтрОсновной;
	НовыйЭлементОсновной.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементЕдиницаИзмерения = Элементы.Добавить("СписокПараметровНаработкиЕдиницаИзмерения",
													 Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементЕдиницаИзмерения.ПутьКДанным = "СписокПараметровНаработки.НаработкаПоказатель.ЕдиницаИзмерения";
	НовыйЭлементЕдиницаИзмерения.Заголовок = "Ед. изм."; 
	НовыйЭлементЕдиницаИзмерения.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	ГруппаПродолжительностьПериодаПлановойНаработки = Элементы.Добавить(
		"ПродолжительностьПериодаПлановойНаработки", Тип("ГруппаФормы"), Элементы.СписокПараметровНаработки);
	ГруппаПродолжительностьПериодаПлановойНаработки.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаПродолжительностьПериодаПлановойНаработки.Группировка = ГруппировкаКолонок.Горизонтальная;
    ГруппаПродолжительностьПериодаПлановойНаработки.Заголовок = "Период наработки";
	ГруппаПродолжительностьПериодаПлановойНаработки.ОтображатьЗаголовок = Истина;
	ГруппаПродолжительностьПериодаПлановойНаработки.ОтображатьВШапке = Истина;
	
	НовыйЭлементПродолжительностьПериодаПлановойНаработки = Элементы.Добавить(
				"СписокПараметровНаработкиПродолжительностьПериодаПлановойНаработки",
				Тип(СтрПолеФормы), ГруппаПродолжительностьПериодаПлановойНаработки);
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.Вид = ВидПоляФормы.ПолеВвода;
	ПутьКДанным = "СписокПараметровНаработки.ПродолжительностьПериодаПлановойНаработки";
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ПутьКДанным = ПутьКДанным;
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ОтображатьВШапке = Ложь;
	
	НовыйЭлементПериодПлановойНаработки = Элементы.Добавить(
		"СписокПараметровНаработкиПериодПлановойНаработки",
		Тип(СтрПолеФормы), ГруппаПродолжительностьПериодаПлановойНаработки);
	НовыйЭлементПериодПлановойНаработки.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПериодПлановойНаработки.ПутьКДанным = "СписокПараметровНаработки.ПериодПлановойНаработки";
	НовыйЭлементПериодПлановойНаработки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет; 
	НовыйЭлементПериодПлановойНаработки.ОтображатьВШапке = Ложь;
	
	НовыйЭлементПлановаяНаработка = Элементы.Добавить("СписокПараметровНаработкиПлановаяНаработка",
													 Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПлановаяНаработка.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПлановаяНаработка.ПутьКДанным = "СписокПараметровНаработки.ПлановаяНаработка";
	НовыйЭлементПлановаяНаработка.Заголовок = "Плановая наработка";
	НовыйЭлементПлановаяНаработка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;  
	
	НовыйЭлементКоэффициентИспользованияОборудования = Элементы.Добавить(
		"СписокПараметровНаработкиКоэффициентИспользованияОборудования", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементКоэффициентИспользованияОборудования.Вид = ВидПоляФормы.ПолеВвода;
	ПутьКДанным = "СписокПараметровНаработки.КоэффициентИспользованияОборудования";
	НовыйЭлементКоэффициентИспользованияОборудования.ПутьКДанным = ПутьКДанным;
	НовыйЭлементКоэффициентИспользованияОборудования.Заголовок = "КИО";
	НовыйЭлементКоэффициентИспользованияОборудования.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;   
	
	НовыйЭлементРесурсГарантии = Элементы.Добавить("СписокПараметровНаработкиРесурсГарантии",
												  Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементРесурсГарантии.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементРесурсГарантии.ПутьКДанным = "СписокПараметровНаработки.РесурсГарантии";
	НовыйЭлементРесурсГарантии.Заголовок = "Ресурс гарантии";
	НовыйЭлементРесурсГарантии.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	ЗначениеВРеквизитФормы(ТЗ, СтрСписокПараметровНаработки); 
	
	ДобавитьТЗСписокПараметровНаработкиСтратегический();
	
КонецПроцедуры	

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023

&НаСервере
Процедура ДобавитьТЗСписокПараметровНаработкиСтратегический()
	
	СтрПолеФормы = "ПолеФормы";
	СтрЧисло = "Число";
	СтрОсновной = "Основной";
	СтрСписокПараметровНаработкиСтратегический = "СписокПараметровНаработкиСтратегический";

	// Создание таблицы значений
	МассивТипа = Новый Массив;
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(СтрСписокПараметровНаработкиСтратегический,
										ОписаниеТипа, , СтрСписокПараметровНаработкиСтратегический);
	МассивРеквизитовФормы.Добавить(РеквизитФормы);
	
	СписокТиповОбъектРемонта = Новый Массив;
    СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
    ОписаниеСоставногоТипаОбъектРемонта = Новый ОписаниеТипов(СписокТиповОбъектРемонта);
		
	ТЗСтратегический = Новый ТаблицаЗначений;
	ТЗСтратегический.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"), "Дата введения"); 
	ТЗСтратегический.Колонки.Добавить("СтратегическийОбъектРемонта",
		ОписаниеСоставногоТипаОбъектРемонта, "Объект ремонта");
	ТЗСтратегический.Колонки.Добавить("СтратегическийПоказатель",
		Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"), "Показатель наработки");
	ТЗСтратегический.Колонки.Добавить(СтрОсновной, Новый ОписаниеТипов("Булево"), СтрОсновной); 
	ТЗСтратегический.Колонки.Добавить("ПродолжительностьПериодаПлановойНаработки",
		Новый ОписаниеТипов(СтрЧисло), "Количество периодов");
	ТЗСтратегический.Колонки.Добавить("ПериодПлановойНаработки",
		Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"), "Период");
	ТЗСтратегический.Колонки.Добавить("ПлановаяНаработка", Новый ОписаниеТипов(СтрЧисло), "Плановая наработка");
   	ТЗСтратегический.Колонки.Добавить("КоэффициентИспользованияОборудования", Новый ОписаниеТипов(СтрЧисло), "КИО");
	ТЗСтратегический.Колонки.Добавить("РесурсГарантии", Новый ОписаниеТипов(СтрЧисло), "Ресурс гарантии");
			
	Для Каждого Колонка Из ТЗСтратегический.Колонки Цикл
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя,
			Колонка.ТипЗначения, СтрСписокПараметровНаработкиСтратегический);
		МассивРеквизитовФормы.Добавить(РеквизитФормы);
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблица = Элементы.Найти(СтрСписокПараметровНаработкиСтратегический);
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормы);
	КонецЕсли;
	
	// Добавление ТаблицыЗначений на форму
	ТаблицаПолейВыбора = Элементы.Добавить(СтрСписокПараметровНаработкиСтратегический,
							 Тип("ТаблицаФормы"), Элементы.ГруппаПоказателиЭксплуатации);
	ТаблицаПолейВыбора.ПутьКДанным = СтрСписокПараметровНаработкиСтратегический;
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.Заголовок = "Параметры наработки (стратегические >1 года)";
	ТаблицаПолейВыбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаПолейВыбора.ЦветТекстаЗаголовка = ЦветаСтиля.ГруппаВариантовОтчетовЦвет; 
	ТаблицаПолейВыбора.ШрифтЗаголовка = Новый Шрифт(, 10, Истина, , ); 
	ТаблицаПолейВыбора.ТолькоПросмотр  = Истина;
			
	НовыйЭлементПериод = Элементы.Добавить("СписокПараметровНаработкиСтратегическийПериод",
										   Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПериод.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПериод.ПутьКДанным = "СписокПараметровНаработкиСтратегический.Период";
	НовыйЭлементПериод.Заголовок = "Дата введения";
    НовыйЭлементПериод.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
		
	НовыйЭлементОбъектРемонта = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийОбъектРемонта", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементОбъектРемонта.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементОбъектРемонта.ПутьКДанным = "СписокПараметровНаработкиСтратегический.СтратегическийОбъектРемонта";
	НовыйЭлементОбъектРемонта.Заголовок = "Объект ремонта";
	НовыйЭлементОбъектРемонта.Видимость = Ложь;
    НовыйЭлементОбъектРемонта.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементПоказатель = Элементы.Добавить("СписокПараметровНаработкиСтратегическийПоказатель",
												Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоказатель.ПутьКДанным = "СписокПараметровНаработкиСтратегический.СтратегическийПоказатель";
	НовыйЭлементПоказатель.Заголовок = "Показатель наработки";
	НовыйЭлементПоказатель.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево; 
	
	НовыйЭлементОсновной = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийОсновной", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементОсновной.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементОсновной.ПутьКДанным = "СписокПараметровНаработкиСтратегический.Основной";
	НовыйЭлементОсновной.Заголовок = СтрОсновной;
	НовыйЭлементОсновной.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементЕдиницаИзмерения = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийЕдиницаИзмерения", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	ПутьКДанным = "СписокПараметровНаработкиСтратегический.СтратегическийПоказатель.ЕдиницаИзмерения";
	НовыйЭлементЕдиницаИзмерения.ПутьКДанным = ПутьКДанным;
	НовыйЭлементЕдиницаИзмерения.Заголовок = "Ед. изм."; 
	НовыйЭлементЕдиницаИзмерения.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	ГруппаПродолжительностьПериодаПлановойНаработки = Элементы.Добавить(
		"ПродолжительностьПериодаПлановойНаработкиСтратегический",
		Тип("ГруппаФормы"), Элементы.СписокПараметровНаработкиСтратегический);
	ГруппаПродолжительностьПериодаПлановойНаработки.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаПродолжительностьПериодаПлановойНаработки.Группировка = ГруппировкаКолонок.Горизонтальная;
    ГруппаПродолжительностьПериодаПлановойНаработки.Заголовок = "Период наработки";
	ГруппаПродолжительностьПериодаПлановойНаработки.ОтображатьЗаголовок = Истина;
	ГруппаПродолжительностьПериодаПлановойНаработки.ОтображатьВШапке = Истина;
	
	НовыйЭлементПродолжительностьПериодаПлановойНаработки = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийПродолжительностьПериодаПлановойНаработки",
		Тип(СтрПолеФормы), ГруппаПродолжительностьПериодаПлановойНаработки);
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.Вид = ВидПоляФормы.ПолеВвода;
	ПутьКДанным = "СписокПараметровНаработкиСтратегический.ПродолжительностьПериодаПлановойНаработки";
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ПутьКДанным = ПутьКДанным;
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлементПродолжительностьПериодаПлановойНаработки.ОтображатьВШапке = Ложь;
	
	НовыйЭлементПериодПлановойНаработки = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийПериодПлановойНаработки",
		Тип(СтрПолеФормы), ГруппаПродолжительностьПериодаПлановойНаработки);
	НовыйЭлементПериодПлановойНаработки.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПериодПлановойНаработки.ПутьКДанным = "СписокПараметровНаработкиСтратегический.ПериодПлановойНаработки";
	НовыйЭлементПериодПлановойНаработки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет; 
	НовыйЭлементПериодПлановойНаработки.ОтображатьВШапке = Ложь;
	
	НовыйЭлементПлановаяНаработка = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийПлановаяНаработка", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПлановаяНаработка.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПлановаяНаработка.ПутьКДанным = "СписокПараметровНаработкиСтратегический.ПлановаяНаработка";
	НовыйЭлементПлановаяНаработка.Заголовок = "Плановая наработка";
	НовыйЭлементПлановаяНаработка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;  
	
	НовыйЭлементКоэффициентИспользованияОборудования = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийКоэффициентИспользованияОборудования",
		Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементКоэффициентИспользованияОборудования.Вид = ВидПоляФормы.ПолеВвода;
	ПутьКДанным = "СписокПараметровНаработкиСтратегический.КоэффициентИспользованияОборудования";
	НовыйЭлементКоэффициентИспользованияОборудования.ПутьКДанным = ПутьКДанным;
	НовыйЭлементКоэффициентИспользованияОборудования.Заголовок = "КИО";
	НовыйЭлементКоэффициентИспользованияОборудования.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;   
	
	НовыйЭлементРесурсГарантии = Элементы.Добавить(
		"СписокПараметровНаработкиСтратегическийРесурсГарантии", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементРесурсГарантии.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементРесурсГарантии.ПутьКДанным = "СписокПараметровНаработкиСтратегический.РесурсГарантии";
	НовыйЭлементРесурсГарантии.Заголовок = "Ресурс гарантии";
	НовыйЭлементРесурсГарантии.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
      		
	ЗначениеВРеквизитФормы(ТЗСтратегический, СтрСписокПараметровНаработкиСтратегический);
	
КонецПроцедуры	 

&НаСервере
Процедура ДобавитьТаблицаМаксимальныхЗначенийНаработки()
	
	СтрПолеФормы = "ПолеФормы";
	СтрТаблицаМаксимальныхЗначенийНаработки = "ТаблицаМаксимальныхЗначенийНаработки";

	ГруппаНаработка = Элементы.ГруппаНаработка;
	//Параметры Максимальные значения
	
	// Создание таблицы значений
	МассивТипа = Новый Массив;
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));

	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(СтрТаблицаМаксимальныхЗначенийНаработки,
		 ОписаниеТипа, , СтрТаблицаМаксимальныхЗначенийНаработки);
	МассивРеквизитовФормы.Добавить(РеквизитФормы);
	
	СписокТиповОбъектРемонта = Новый Массив;
    СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	СписокТиповОбъектРемонта.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
    ОписаниеСоставногоТипаОбъектРемонта = Новый ОписаниеТипов(СписокТиповОбъектРемонта);
		
	ТЗМЗН = Новый ТаблицаЗначений;
	ТЗМЗН.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"), "Дата введения"); 
	ТЗМЗН.Колонки.Добавить("МЗНОбъектРемонта", ОписаниеСоставногоТипаОбъектРемонта, "Объект ремонта");
	ТЗМЗН.Колонки.Добавить("МЗНПоказатель",
		Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"), "Показатель наработки");
	ТЗМЗН.Колонки.Добавить("МаксимальноеЗначение", Новый ОписаниеТипов("Число"), "Максимальное значение");
	ТЗМЗН.Колонки.Добавить("Удален", Новый ОписаниеТипов("Булево"), "Удален");
	ТЗМЗН.Колонки.Добавить("НазначенныйРесурс", Новый ОписаниеТипов("Число"), "Назначенный ресурс");
   	ТЗМЗН.Колонки.Добавить("ФактНаработкиНаТекДату", Новый ОписаниеТипов("Строка"), "Факт наработки на тек дату");
	ТЗМЗН.Колонки.Добавить("Износ", Новый ОписаниеТипов("Строка"), "Износ");
			
	Для Каждого Колонка Из ТЗМЗН.Колонки Цикл
		МассивРеквизитовФормы.Добавить(
			Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, СтрТаблицаМаксимальныхЗначенийНаработки));
	КонецЦикла;
	
	// Удаление - если таблица существует
	ЭлементТаблица = Элементы.Найти(СтрТаблицаМаксимальныхЗначенийНаработки);
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитовФормы);
	КонецЕсли;
	
	// Добавление ТаблицыЗначений на форму
	ТаблицаПолейВыбора = Элементы.Добавить(
		СтрТаблицаМаксимальныхЗначенийНаработки, Тип("ТаблицаФормы"), ГруппаНаработка);
	ТаблицаПолейВыбора.ПутьКДанным = СтрТаблицаМаксимальныхЗначенийНаработки;
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.Заголовок = "Максимальные значения";
	ТаблицаПолейВыбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаПолейВыбора.ЦветТекстаЗаголовка = ЦветаСтиля.ГруппаВариантовОтчетовЦвет; 
	ТаблицаПолейВыбора.ШрифтЗаголовка = Новый Шрифт(, 10, Истина, , ); 
	ТаблицаПолейВыбора.ТолькоПросмотр  = Истина;
			
	НовыйЭлементОбъектРемонта = Элементы.Добавить(
		"ТаблицаМаксимальныхЗначенийНаработкиОбъектРемонта", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементОбъектРемонта.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементОбъектРемонта.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.МЗНОбъектРемонта";
	НовыйЭлементОбъектРемонта.Заголовок = "Объект ремонта";
	НовыйЭлементОбъектРемонта.Видимость = Ложь;
    НовыйЭлементОбъектРемонта.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементПоказатель = Элементы.Добавить(
		"ТаблицаМаксимальныхЗначенийНаработкиПоказатель", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлементПоказатель.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.МЗНПоказатель";
	НовыйЭлементПоказатель.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементПоказатель.Видимость = Ложь;
	 	
	НовыйЭлементМаксимальноеЗначение = Элементы.Добавить(
		"ТаблицаМаксимальныхЗначенийНаработкиМаксимальноеЗначение", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементМаксимальноеЗначение.Вид = ВидПоляФормы.ПолеФлажка; 
	НовыйЭлементМаксимальноеЗначение.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.МаксимальноеЗначение";
	НовыйЭлементМаксимальноеЗначение.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
    НовыйЭлементМаксимальноеЗначение.Заголовок = "Максимальное значение";  

	НовыйЭлементНазначенныйРесурс = Элементы.Добавить(
		"ТаблицаМаксимальныхЗначенийНаработкиНазначенныйРесурс", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементНазначенныйРесурс.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлементНазначенныйРесурс.Заголовок = "Назначенный ресурс";
	НовыйЭлементНазначенныйРесурс.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.НазначенныйРесурс";
	НовыйЭлементНазначенныйРесурс.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
   	
	НовыйЭлементИзнос = Элементы.Добавить(
		"ТаблицаМаксимальныхЗначенийНаработкиИзнос", Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементИзнос.Вид = ВидПоляФормы.ПолеВвода;   
	НовыйЭлементИзнос.Заголовок = "Остаточный ресурс";
	НовыйЭлементИзнос.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.Износ";
	НовыйЭлементИзнос.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;   
	
	НовыйЭлементУдален = Элементы.Добавить("ТаблицаМаксимальныхЗначенийНаработкиУдален",
										  Тип(СтрПолеФормы), ТаблицаПолейВыбора);
	НовыйЭлементУдален.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлементУдален.Видимость = Ложь;
	НовыйЭлементУдален.ПутьКДанным = "ТаблицаМаксимальныхЗначенийНаработки.Удален";
	НовыйЭлементУдален.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
      		
	ЗначениеВРеквизитФормы(ТЗМЗН, СтрТаблицаМаксимальныхЗначенийНаработки);
    
КонецПроцедуры	

//-- Проф-ИТ, #240, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

&НаСервере
Процедура СоздатьСтраницуПутевыеЛисты()
	
	СтрПолеФормы = "ПолеФормы";
	СтрТабПутевыеЛисты = "ТабПутевыеЛисты";

	НовыйЭлементПутевыеЛисты = Элементы.Добавить("ГруппаПутевыеЛисты", Тип("ГруппаФормы"), Элементы.ПанельОР);
    НовыйЭлементПутевыеЛисты.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементПутевыеЛисты.Заголовок = "Путевые листы"; 
	НовыйЭлементПутевыеЛисты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
        
    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(СтрТабПутевыеЛисты, Новый ОписаниеТипов("ДинамическийСписок")));
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТабПутевыеЛисты.ПроизвольныйЗапрос = Истина;
    ЭтаФорма.ТабПутевыеЛисты.ТекстЗапроса = "ВЫБРАТЬ
		|проф_СведенияОПутевыхЛистах.НомерПутевогоЛиста КАК НомерПЛ,
		|проф_СведенияОПутевыхЛистах.ДатаВыезда КАК Выезд,
		|проф_СведенияОПутевыхЛистах.ДатаВозвращения КАК Возврат,
		|проф_СведенияОПутевыхЛистах.Маршрут КАК Маршрут,
		|проф_СведенияОПутевыхЛистах.ОдометрВыезд КАК ОдометрВыезд,
		|проф_СведенияОПутевыхЛистах.ОдометрВозврат КАК ОдометрВозврат,
		|проф_СведенияОПутевыхЛистах.МоточасыВыезд КАК МоточасыВыезд,
		|проф_СведенияОПутевыхЛистах.МоточасыВозврат КАК МоточасыВозврат
		|ИЗ
		|РегистрСведений.проф_СведенияОПутевыхЛистах КАК проф_СведенияОПутевыхЛистах
		|ГДЕ
		|проф_СведенияОПутевыхЛистах.ОбъектРемонта = &ОбъектРемонта";
    
    ЭтаФорма.ТабПутевыеЛисты.ОсновнаяТаблица = "РегистрСведений.проф_СведенияОПутевыхЛистах";
    
    ТабПутевыеЛисты = Элементы.Добавить(СтрТабПутевыеЛисты, Тип("ТаблицаФормы"), НовыйЭлементПутевыеЛисты);
    ТабПутевыеЛисты.ПутьКДанным                    = СтрТабПутевыеЛисты;
    ТабПутевыеЛисты.Отображение                    = ОтображениеТаблицы.Список;
	ТабПутевыеЛисты.ТолькоПросмотр                 = Истина;
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_НомерПЛ", Тип(СтрПолеФормы), ТабПутевыеЛисты);
    НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.НомерПЛ"; 
	НоваяКолонка.Заголовок = "№ ПЛ";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Выезд", Тип(СтрПолеФормы), ТабПутевыеЛисты);
    НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.Выезд";
	
	НоваяКолонка = Элементы.Добавить("Список_Альт_Возврат", Тип(СтрПолеФормы), ТабПутевыеЛисты);
    НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.Возврат";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_Маршрут", Тип(СтрПолеФормы), ТабПутевыеЛисты);
   	НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.Маршрут";
 
	НоваяКолонка = Элементы.Добавить("Список_Альт_ОдометрВыезд", Тип(СтрПолеФормы), ТабПутевыеЛисты);
    НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.ОдометрВыезд";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_ОдометрВозврат", Тип(СтрПолеФормы), ТабПутевыеЛисты);
   	НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.ОдометрВозврат";  
	
	НоваяКолонка = Элементы.Добавить("Список_Альт_МоточасыВыезд", Тип(СтрПолеФормы), ТабПутевыеЛисты);
    НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.МоточасыВыезд";
    
    НоваяКолонка = Элементы.Добавить("Список_Альт_МоточасыВозврат", Тип(СтрПолеФормы), ТабПутевыеЛисты);
   	НоваяКолонка.ПутьКДанным                = "ТабПутевыеЛисты.МоточасыВозврат";	
	
КонецПроцедуры	

//-- Проф-ИТ, #141, Лавриненко Т.В., 20.09.2023

//++ Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023  

&НаСервере
Процедура СоздатьСтраницуНормыРасходаТЖ()
	
	СтрПолеФормы = "ПолеФормы";
	СтрТабНормыРасходаТехническихЖидкостей = "ТабНормыРасходаТехническихЖидкостей";

	НовыйЭлементНормыРасходаТЖ = Элементы.Добавить("ГруппаНормыРасходаТЖ",Тип("ГруппаФормы"),Элементы.ПанельОР);
    НовыйЭлементНормыРасходаТЖ.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементНормыРасходаТЖ.Заголовок = "Нормы расхода ТЖ"; 
	НовыйЭлементНормыРасходаТЖ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;		
    
    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(СтрТабНормыРасходаТехническихЖидкостей, Новый ОписаниеТипов("ДинамическийСписок")); 
    ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТабНормыРасходаТехническихЖидкостей.ПроизвольныйЗапрос = Истина;
	// В исходном запросе ТС ERP, используется ПОЛНОЕ СОЕДИНЕНИЕ заменил на ОБЪЕДИНИТЬ ВСЕ с индексацией
	// на тестовых данных показало лучший результат
	ЭтаФорма.ТабНормыРасходаТехническихЖидкостей.ТекстЗапроса = "ВЫБРАТЬ
		|	проф_НормыРасходаТехническихЖидкостейТССрезПоследних.Период КАК Период,
		|	проф_НормыРасходаТехническихЖидкостейТССрезПоследних.ГСМ КАК ГСМ,
		|	проф_НормыРасходаТехническихЖидкостейТССрезПоследних.МодельТС КАК МодельТС
		|ПОМЕСТИТЬ тблНормыРасходаТЖСрезПоследних
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаТехническихЖидкостей.СрезПоследних(
		|		&ДатаСреза, МодельТС = &Модель) КАК проф_НормыРасходаТехническихЖидкостейТССрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	проф_НормыРасходаТехническихЖидкостейМодельСрезПоследних.Период,
		|	проф_НормыРасходаТехническихЖидкостейМодельСрезПоследних.ГСМ,
		|	проф_НормыРасходаТехническихЖидкостейМодельСрезПоследних.МодельТС
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаТехническихЖидкостей.СрезПоследних(
		|		&ДатаСреза, МодельТС = &ТС) КАК проф_НормыРасходаТехническихЖидкостейМодельСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ГСМ,
		|	МодельТС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.Период КАК Период,
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.ГСМ КАК ГСМ,
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.МодельТС КАК МодельТС,
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.Норма КАК Норма,
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.НормаНаМоточас КАК НормаНаМоточас,
		|	РегистрСведенийНормыРасходаТехническихЖидкостей.ЛинейнаяНорма КАК ЛинейнаяНорма,
		|	тблНормыРасходаТЖСрезПоследних.МодельТС ЕСТЬ NULL КАК НеДействует
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаТехническихЖидкостей КАК РегистрСведенийНормыРасходаТехническихЖидкостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ тблНормыРасходаТЖСрезПоследних КАК тблНормыРасходаТЖСрезПоследних
		|		ПО РегистрСведенийНормыРасходаТехническихЖидкостей.Период = тблНормыРасходаТЖСрезПоследних.Период
		|			И РегистрСведенийНормыРасходаТехническихЖидкостей.ГСМ = тблНормыРасходаТЖСрезПоследних.ГСМ
		|			И РегистрСведенийНормыРасходаТехническихЖидкостей.МодельТС = тблНормыРасходаТЖСрезПоследних.МодельТС";
			
	ЭтаФорма.ТабНормыРасходаТехническихЖидкостей.ОсновнаяТаблица = "РегистрСведений.проф_НормыРасходаТехническихЖидкостей";
    
    ТабНормыРасходаТехническихЖидкостей = Элементы.Добавить(СтрТабНормыРасходаТехническихЖидкостей,
															Тип("ТаблицаФормы"),
															НовыйЭлементНормыРасходаТЖ);
    ТабНормыРасходаТехническихЖидкостей.ПутьКДанным                    = СтрТабНормыРасходаТехническихЖидкостей; 
	ТабНормыРасходаТехническихЖидкостей.ТолькоПросмотр = Истина;
    ТабНормыРасходаТехническихЖидкостей.Отображение                    = ОтображениеТаблицы.Список;
    ТабНормыРасходаТехническихЖидкостей.ПоложениеУправленияПоиском     = ПоложениеУправленияПоиском.Нет;
    ТабНормыРасходаТехническихЖидкостей.ПоложениеУправленияПоиском     = ПоложениеУправленияПоиском.Нет;
    ТабНормыРасходаТехническихЖидкостей.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
    ТабНормыРасходаТехническихЖидкостей.ПоложениеСтрокиПоиска          = ПоложениеСтрокиПоиска.Нет;
    ТабНормыРасходаТехническихЖидкостей.ПоложениеКоманднойПанели       = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
	
	НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейПериод",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.Период"; 
	НоваяКолонка.Заголовок = "Дата установки";
    
    НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейМодельТС",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.МодельТС"; 
	НоваяКолонка.Заголовок = "Модель/ТС";
    
    НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейГСМ",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
   	НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.ГСМ";
	НоваяКолонка.Заголовок = "ТЖ/масло";
	
	НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейНорма",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.Норма"; 
	НоваяКолонка.Заголовок = "Норма, л/100п осн.";
    
    НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейНормаНаМоточас",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
   	НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.НормаНаМоточас";
	НоваяКолонка.Заголовок = "Норма на моточас, л/ч";
	
	НоваяКолонка = Элементы.Добавить("ТабНормыРасходаТехническихЖидкостейЛинейнаяНорма",
									Тип(СтрПолеФормы),
									ТабНормыРасходаТехническихЖидкостей);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаТехническихЖидкостей.ЛинейнаяНорма";
	
КонецПроцедуры	

//-- Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023  

//++ Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023 

&НаСервере
Процедура СоздатьСтраницуНормыРасходаГСМ()
	
	СтрПолеФормы = "ПолеФормы";
	СтрГруппаФормы = "ГруппаФормы";
	СтрТабНормыРасходаГСМ = "ТабНормыРасходаГСМ";

	НовыйЭлементНормыРасходаГСМ = Элементы.Добавить("ГруппаНормыРасходаГСМ", Тип(СтрГруппаФормы), Элементы.ПанельОР);
    НовыйЭлементНормыРасходаГСМ.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементНормыРасходаГСМ.Заголовок = "Нормы расхода ГСМ"; 
	НовыйЭлементНормыРасходаГСМ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
    
    // СозданиеДинамическогоСписка    
    ДобавляемыеРеквизиты    = Новый Массив;
    РеквизитФормы = Новый РеквизитФормы(СтрТабНормыРасходаГСМ, Новый ОписаниеТипов("ДинамическийСписок"));
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    ЭтаФорма.ТабНормыРасходаГСМ.ПроизвольныйЗапрос = Истина;
	// В исходном запросе ТС ERP, используется ПОЛНОЕ СОЕДИНЕНИЕ заменил на ОБЪЕДИНИТЬ ВСЕ с индексацией
	// на тестовых данных показало лучший результат, текст запроса вынесен в отдельную функцию
	ЭтаФорма.ТабНормыРасходаГСМ.ТекстЗапроса = ТекстЗапросаНормыРасходаГСМ();
	
    ЭтаФорма.ТабНормыРасходаГСМ.ОсновнаяТаблица = "РегистрСведений.проф_НормыРасходаГСМ";
    
    ТабНормыРасходаГСМ = Элементы.Добавить(СтрТабНормыРасходаГСМ, Тип("ТаблицаФормы"), НовыйЭлементНормыРасходаГСМ);
    ТабНормыРасходаГСМ.ПутьКДанным                    = СтрТабНормыРасходаГСМ; 
	ТабНормыРасходаГСМ.ТолькоПросмотр = Истина;
    ТабНормыРасходаГСМ.Отображение                    = ОтображениеТаблицы.Список;
    ТабНормыРасходаГСМ.ПоложениеУправленияПоиском     = ПоложениеУправленияПоиском.Нет;
    ТабНормыРасходаГСМ.ПоложениеУправленияПоиском     = ПоложениеУправленияПоиском.Нет;
    ТабНормыРасходаГСМ.ПоложениеСостоянияПросмотра    = ПоложениеСостоянияПросмотра.Нет;
    ТабНормыРасходаГСМ.ПоложениеСтрокиПоиска          = ПоложениеСтрокиПоиска.Нет;
    ТабНормыРасходаГСМ.ПоложениеКоманднойПанели       = ПоложениеКоманднойПанелиЭлементаФормы.Нет; 
	
	НормыРасходаГСМ1 = Элементы.Добавить("НормыРасходаГСМ1", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ1.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ1.Группировка = ГруппировкаКолонок.Вертикальная;
       
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНомерПериод", Тип(СтрПолеФормы), НормыРасходаГСМ1);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.Период"; 
	НоваяКолонка.Заголовок = "Дата установки";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМОрганизация", Тип(СтрПолеФормы), НормыРасходаГСМ1);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.Организация";
	
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСММодельТС", Тип(СтрПолеФормы), ТабНормыРасходаГСМ);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.МодельТС"; 
	НоваяКолонка.Заголовок = "Модель/ТС";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМГСМ", Тип(СтрПолеФормы), ТабНормыРасходаГСМ);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.ГСМ";
	
	НормыРасходаГСМ2 = Элементы.Добавить("НормыРасходаГСМ2", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ2.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ2.Группировка = ГруппировкаКолонок.Вертикальная;

    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМЛинейнаяНорма", Тип(СтрПолеФормы), НормыРасходаГСМ2);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.ЛинейнаяНорма"; 
	НоваяКолонка.Заголовок = "Линейная, л/100км";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМОдометрНормаНаИзменениеСобственногоВеса",
									 Тип(СтрПолеФормы),
									 НормыРасходаГСМ2);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаИзменениеСобственногоВеса";
	НоваяКолонка.Заголовок = "На изм. собств. веса, л/100км";
	
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаТранспортнуюРаботу", Тип(СтрПолеФормы), НормыРасходаГСМ2);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаТранспортнуюРаботу"; 
	НоваяКолонка.Заголовок = "На трансп. работу, л/100км";
	
	НормыРасходаГСМ3 = Элементы.Добавить("НормыРасходаГСМ3", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ3.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ3.Группировка = ГруппировкаКолонок.Вертикальная;
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаСпециальнаяНаМоточас", Тип(СтрПолеФормы), НормыРасходаГСМ3);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаСпециальнаяНаМоточас"; 
	НоваяКолонка.Заголовок = "Спец. на моточас,л/ч";
	
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаОтопитель", Тип(СтрПолеФормы), НормыРасходаГСМ3);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаОтопитель";  
	НоваяКолонка.Заголовок = "Отопитель, кондиционер, климат-контроль, л/ч";
	
	НормыРасходаГСМ4 = Элементы.Добавить("НормыРасходаГСМ4", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ4.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ4.Группировка = ГруппировкаКолонок.Вертикальная;

    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаЕздку", Тип(СтрПолеФормы), НормыРасходаГСМ4);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаЕздку";
	НоваяКолонка.Заголовок = "На ездку, л";
	
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаОперацию", Тип(СтрПолеФормы), НормыРасходаГСМ4);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаОперацию";
	НоваяКолонка.Заголовок = "На операцию, л";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаЗапуск", Тип(СтрПолеФормы), НормыРасходаГСМ4);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаЗапуск";
	НоваяКолонка.Заголовок = "На запуск, л";
	
	
	//++ Проф-ИТ, #41, Горетовская М.С., 29.09.2023	
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМУчитыватьПростоиДляРасчетаНормыМоточасов",
									 Тип(СтрПолеФормы),
									 Элементы.ТабНормыРасходаГСМ);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаГСМ.УчитыватьПростоиДляРасчетаНормыМоточасов";
	НоваяКолонка.РастягиватьПоГоризонтали = Истина;
	//-- Проф-ИТ, #41, Горетовская М.С., 29.09.2023

	НормыРасходаГСМ5 = Элементы.Добавить("НормыРасходаГСМ5", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ5.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ5.Группировка = ГруппировкаКолонок.Вертикальная;
	
	//++ Проф-ИТ, #41, Горетовская М.С., 29.09.2023
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаПростойСВклДвигателем",
									 Тип(СтрПолеФормы),
									 НормыРасходаГСМ5);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателем";
	//-- Проф-ИТ, #41, Горетовская М.С., 29.09.2023

	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаПростойСВклДвигателемЛитры",
									 Тип(СтрПолеФормы),
									 НормыРасходаГСМ5);
    НоваяКолонка.ПутьКДанным = "ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателемЛитры";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаПростойСВклДвигателемПроцентомОтБазовой",
									 Тип(СтрПолеФормы),
									 НормыРасходаГСМ5);
   	НоваяКолонка.ПутьКДанным = "ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателемПроцентомОтБазовой";  
		
	НормыРасходаГСМ6 = Элементы.Добавить("НормыРасходаГСМ6", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ6.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ6.Группировка = ГруппировкаКолонок.Вертикальная;
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСезоннаяНадбавка", Тип(СтрПолеФормы), НормыРасходаГСМ6);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СезоннаяНадбавка";
		
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНадбавкаНаКондиционер", Тип(СтрПолеФормы), НормыРасходаГСМ6);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НадбавкаНаКондиционер"; 
	
	НормыРасходаГСМ7 = Элементы.Добавить("НормыРасходаГСМ7", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ7.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ7.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота1", Тип(СтрПолеФормы), НормыРасходаГСМ7);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота1";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу1", Тип(СтрПолеФормы), НормыРасходаГСМ7);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу1"; 
		
    НормыРасходаГСМ8 = Элементы.Добавить("НормыРасходаГСМ8", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ8.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ8.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота2", Тип(СтрПолеФормы), НормыРасходаГСМ8);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота2";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу2", Тип(СтрПолеФормы), НормыРасходаГСМ8);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу2";   
	
	НормыРасходаГСМ9 = Элементы.Добавить("НормыРасходаГСМ9", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ9.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ9.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота3", Тип(СтрПолеФормы), НормыРасходаГСМ9);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота3";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу3", Тип(СтрПолеФормы), НормыРасходаГСМ9);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу3"; 
	
	НормыРасходаГСМ10 = Элементы.Добавить("НормыРасходаГСМ10", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ10.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ10.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота4", Тип(СтрПолеФормы), НормыРасходаГСМ10);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота4";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу4", Тип(СтрПолеФормы), НормыРасходаГСМ10);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу4"; 
	
	НормыРасходаГСМ11 = Элементы.Добавить("НормыРасходаГСМ11", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ11.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ11.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота5", Тип(СтрПолеФормы), НормыРасходаГСМ11);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота5";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу5", Тип(СтрПолеФормы), НормыРасходаГСМ11);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу5"; 
	
	НормыРасходаГСМ12 = Элементы.Добавить("НормыРасходаГСМ12", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ12.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ12.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота6", Тип(СтрПолеФормы), НормыРасходаГСМ12);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота6";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу6", Тип(СтрПолеФормы), НормыРасходаГСМ12);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу6"; 
	
	НормыРасходаГСМ13 = Элементы.Добавить("НормыРасходаГСМ13", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ13.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ13.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота7", Тип(СтрПолеФормы), НормыРасходаГСМ13);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота7";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу7", Тип(СтрПолеФормы), НормыРасходаГСМ13);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу7";

	НормыРасходаГСМ14 = Элементы.Добавить("НормыРасходаГСМ14", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ14.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ14.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота8", Тип(СтрПолеФормы), НормыРасходаГСМ14);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота8";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу8", Тип(СтрПолеФормы), НормыРасходаГСМ14);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу8";  
	
	НормыРасходаГСМ15 = Элементы.Добавить("НормыРасходаГСМ15", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ15.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ15.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота9", Тип(СтрПолеФормы), НормыРасходаГСМ15);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота9";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу9", Тип(СтрПолеФормы), НормыРасходаГСМ15);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу9";  
	
	НормыРасходаГСМ16 = Элементы.Добавить("НормыРасходаГСМ16", Тип(СтрГруппаФормы), Элементы.ТабНормыРасходаГСМ);
	НормыРасходаГСМ16.Вид = ВидГруппыФормы.ГруппаКолонок;
	НормыРасходаГСМ16.Группировка = ГруппировкаКолонок.Вертикальная;
    
	НоваяКолонка = Элементы.Добавить("НормыРасходаГСМСпециальнаяРабота10", Тип(СтрПолеФормы), НормыРасходаГСМ16);
    НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.СпециальнаяРабота10";
    
    НоваяКолонка = Элементы.Добавить("НормыРасходаГСМНормаНаСпециальнуюРаботу10", Тип(СтрПолеФормы), НормыРасходаГСМ16);
   	НоваяКолонка.ПутьКДанным                = "ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу10";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаНормыРасходаГСМ()
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	проф_НормыРасходаГСММодельСрезПоследних.Период КАК Период,
		|	проф_НормыРасходаГСММодельСрезПоследних.ГСМ КАК ГСМ,
		|	проф_НормыРасходаГСММодельСрезПоследних.МодельТС КАК МодельТС
		|ПОМЕСТИТЬ тблНормыРасходаГСМСрезПоследних
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаГСМ.СрезПоследних(
		|			&ДатаСреза,
		|			МодельТС = &Модель
		|				И Организация = &Организация) КАК проф_НормыРасходаГСММодельСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	проф_НормыРасходаГСМТССрезПоследних.Период,
		|	проф_НормыРасходаГСМТССрезПоследних.ГСМ,
		|	проф_НормыРасходаГСМТССрезПоследних.МодельТС
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаГСМ.СрезПоследних(
		|			&ДатаСреза,
		|			МодельТС = &ТС
		|				И Организация = &Организация) КАК проф_НормыРасходаГСМТССрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ГСМ,
		|	МодельТС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабНормыРасходаГСМ.Период КАК Период,
		|	ТабНормыРасходаГСМ.МодельТС КАК МодельТС,
		|	ТабНормыРасходаГСМ.ГСМ КАК ГСМ,
		|	ТабНормыРасходаГСМ.Организация КАК Организация,
		|	ТабНормыРасходаГСМ.ЛинейнаяНорма КАК ЛинейнаяНорма,
		|	ТабНормыРасходаГСМ.НормаНаЕздку КАК НормаНаЕздку,
		|	ТабНормыРасходаГСМ.НормаНаЗапуск КАК НормаНаЗапуск,
		|	ТабНормыРасходаГСМ.НормаНаИзменениеСобственногоВеса КАК НормаНаИзменениеСобственногоВеса,
		|	ТабНормыРасходаГСМ.НормаНаОперацию КАК НормаНаОперацию,
		|	ТабНормыРасходаГСМ.НормаНаОтопитель КАК НормаНаОтопитель,
		|	ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателем КАК НормаНаПростойСВклДвигателем,
		|	ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателемЛитры КАК НормаНаПростойСВклДвигателемЛитры,
		|	ТабНормыРасходаГСМ.НормаНаПростойСВклДвигателемПроцентомОтБазовой КАК НормаНаПростойСВклДвигателемПроцентомОтБазовой,
		|	ТабНормыРасходаГСМ.НормаНаТранспортнуюРаботу КАК НормаНаТранспортнуюРаботу,
		|	ТабНормыРасходаГСМ.НормаСпециальнаяНаМоточас КАК НормаСпециальнаяНаМоточас,
		|	ТабНормыРасходаГСМ.СезоннаяНадбавка КАК СезоннаяНадбавка,
		|	ТабНормыРасходаГСМ.МодельТС ССЫЛКА Справочник.проф_МоделиТСиОборудования КАК ЭтоНормаМодели,
		|	ТабНормыРасходаГСМ.УчитыватьПростоиДляРасчетаНормыМоточасов КАК УчитыватьПростоиДляРасчетаНормыМоточасов,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота1 КАК СпециальнаяРабота1,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота2 КАК СпециальнаяРабота2,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота3 КАК СпециальнаяРабота3,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота4 КАК СпециальнаяРабота4,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота5 КАК СпециальнаяРабота5,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота6 КАК СпециальнаяРабота6,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота7 КАК СпециальнаяРабота7,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота8 КАК СпециальнаяРабота8,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота9 КАК СпециальнаяРабота9,
		|	ТабНормыРасходаГСМ.СпециальнаяРабота10 КАК СпециальнаяРабота10,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу1 КАК НормаНаСпециальнуюРаботу1,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу2 КАК НормаНаСпециальнуюРаботу2,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу3 КАК НормаНаСпециальнуюРаботу3,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу4 КАК НормаНаСпециальнуюРаботу4,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу5 КАК НормаНаСпециальнуюРаботу5,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу6 КАК НормаНаСпециальнуюРаботу6,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу7 КАК НормаНаСпециальнуюРаботу7,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу8 КАК НормаНаСпециальнуюРаботу8,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу9 КАК НормаНаСпециальнуюРаботу9,
		|	ТабНормыРасходаГСМ.НормаНаСпециальнуюРаботу10 КАК НормаНаСпециальнуюРаботу10,
		|	ТабНормыРасходаГСМ.НадбавкаНаКондиционер КАК НадбавкаНаКондиционер,
		|	тблНормыРасходаГСМСрезПоследних.МодельТС ЕСТЬ NULL КАК НеДействует
		|ИЗ
		|	РегистрСведений.проф_НормыРасходаГСМ КАК ТабНормыРасходаГСМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ тблНормыРасходаГСМСрезПоследних КАК тблНормыРасходаГСМСрезПоследних
		|		ПО ТабНормыРасходаГСМ.Период = тблНормыРасходаГСМСрезПоследних.Период
		|			И ТабНормыРасходаГСМ.ГСМ = тблНормыРасходаГСМСрезПоследних.ГСМ
		|			И ТабНормыРасходаГСМ.МодельТС = тблНормыРасходаГСМСрезПоследних.МодельТС";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

&НаСервере
Функция РодительУзел ()
	
	Возврат ЗначениеЗаполнено(Родитель) И НЕ Родитель.ЭтоГруппа;
	
КонецФункции	

//-- Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023 

#КонецОбласти

//++ Проф-ИТ, #144, Корнилов М.С., 18.09.2023

Процедура УстановитьВидимостьКоманднаяПанельтабМестонахождениеОС()
	
	КоманднаяПанельтабМестонахождениеОС = Элементы.табМестонахождениеОС.КоманднаяПанель;
	ЭлементФормы = КоманднаяПанельтабМестонахождениеОС.ПодчиненныеЭлементы.Найти("табМестонахождениеОССоздать");
	Если ЭлементФормы <> Неопределено Тогда
		КоманднаяПанельтабМестонахождениеОС.ПодчиненныеЭлементы.табМестонахождениеОССоздать.Видимость = Ложь; 
	КонецЕсли;

	ЭлементФормы = КоманднаяПанельтабМестонахождениеОС.ПодчиненныеЭлементы.Найти("табМестонахождениеОССкопировать");
    Если ЭлементФормы <> Неопределено Тогда
		КоманднаяПанельтабМестонахождениеОС.ПодчиненныеЭлементы.табМестонахождениеОССкопировать.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

//-- Проф-ИТ, #144, Корнилов М.С., 18.09.2023

//++ Проф-ИТ, #251, Лавриненко Т.В.,15.08.2023 

&НаСервере
Процедура УстановитьПараметрыЗапросовНаСервереПроф() 
	
	СтрОбъектРемонта = "ОбъектРемонта";
	СтрМассивОбъектов = "МассивОбъектов";
	СтрОтображатьТолькоПроведенные = "ОтображатьТолькоПроведенные";
	СтрОтображатьОтмененные = "ОтображатьОтмененные";

	ЭтаФорма.табЭкипаж.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);
	ЭтаФорма.табМестонахождение.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);
	//++ Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	ЭтаФорма.табМестонахождениеОС.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);
	//-- Проф-ИТ, #144, Корнилов М.С., 18.09.2023
	ЭтаФорма.ТабТекущееМестоположение.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);  
	ЭтаФорма.ТабПутевыеЛисты.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);
	//++ Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023  
	ЭтаФорма.ТабНормыРасходаГСМ.Параметры.УстановитьЗначениеПараметра("ДатаСреза", ТекущаяДатаСеанса());
	ЭтаФорма.ТабНормыРасходаГСМ.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	//-- Проф-ИТ, #41, Лавриненко Т.В.,15.08.2023  
	//++ Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023 
	ЭтаФорма.ТабНормыРасходаТехническихЖидкостей.Параметры.УстановитьЗначениеПараметра("ДатаСреза", ТекущаяДатаСеанса());
	ЭтаФорма.табДокументыТС.Параметры.УстановитьЗначениеПараметра(СтрОбъектРемонта, Объект.Ссылка);
	
	СписокМодельТС = Новый СписокЗначений;
	СписокМодельТС.Добавить(Объект.Ссылка);
	СписокМодельТС.Добавить(Объект.проф_Модель);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ТабНормыРасходаГСМ.Отбор,
		"МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ТабНормыРасходаТехническихЖидкостей.Отбор,
		"МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтаФорма.ТабНормыРасходаГСМ, "ТС", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			 ЭтаФорма.ТабНормыРасходаГСМ, "Модель", Объект.проф_Модель);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЭтаФорма.ТабНормыРасходаТехническихЖидкостей, "ТС", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЭтаФорма.ТабНормыРасходаТехническихЖидкостей, "Модель", Объект.проф_Модель);

   	//-- Проф-ИТ, #42, Лавриненко Т.В.,15.08.2023  
	
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("СписокПараметровНаработки");
	СтруктураДанныхДоРедактированияСписокПараметровНаработки = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(
											ЭтотОбъект, ИменаТаблицФормы);
	Для каждого ЭлементСтруктуры Из СтруктураДанныхДоРедактированияСписокПараметровНаработки Цикл
		ЭтаФорма.СтруктураДанныхДоРедактирования.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение); 
	КонецЦикла; 

	// 
	МассивОбъектов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
		И Объект.Ссылка.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                |	торо_СоставФункциональныхМест.ОбъектРемонта КАК УстановленныйОР
		                |ИЗ
		                |	РегистрСведений.торо_СоставФункциональныхМест КАК торо_СоставФункциональныхМест
		                |ГДЕ
		                |	торо_СоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				МассивОбъектов.Добавить(Выборка.УстановленныйОР);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МассивОбъектов.Добавить(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
   	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииНаСервереЖурналОбъектовРемонта()
			
	Если Параметры.Свойство("ДатаВводаВЭксплуатацию") И ЗначениеЗаполнено(Параметры.ДатаВводаВЭксплуатацию) Тогда 
		ДатаВводаВЭксплуатацию = Параметры.ДатаВводаВЭксплуатацию;
	Иначе
		ДатаВводаВЭксплуатацию = Объект.Ссылка.ДатаВводаВЭксплуатацию; 
	КонецЕсли;
	
	Отбор = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	ДанныеКоличестваПусков = РегистрыНакопления.торо_КоличествоПусковОР.Обороты(, , Отбор);
	ЭтаФорма.КоличествоПусков.Загрузить(ДанныеКоличестваПусков);
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию(
				"торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	
	Если ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования") Тогда
		Элементы.СтраницыСостояний.Видимость = Истина;
		
		ТекущаяДата = ТекущаяДатаСеанса();
		ОтборПоПериоду = Истина;
		ДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), -2);
		ДатаОкончания = КонецМесяца(ТекущаяДата);
	Иначе
		Элементы.СтраницыСостояний.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПредстоящиеРемонтыОтображатьОтмененные.Пометка = Ложь;
	Элементы.ВнешниеОснованияОтображатьОтмененныеВО.Пометка = Ложь;
	Элементы.ВыявленныеДефектыОтображатьОтмененныеВД.Пометка = Ложь;
	
	УстановитьПараметрыЗапросовНаСервере();
	ОбновитьЗначенияКонтролируемыхПоказателейНаСервере();
	ЭтаФорма.ТаблицаСостоянийОР.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	УстановитьВидимостьДоступностьФМ_();
	
	ФОИспользоватьВнешниеОснования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	Если Не ФОИспользоватьВнешниеОснования Тогда
	    Элементы.СтраницаВнешниеОснования.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИзРМТехнолога") И Параметры.ИзРМТехнолога Тогда
	    Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРемонты;
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьДоступностьФМ_()
	
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	ЭтоФункциональноеМесто = Объект.Ссылка.ТипОбъекта = ПредопределенноеЗначение(
															"Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто");
	ВидимостьКогдаФМ = ФОИспользоватьФМ И ЭтоФункциональноеМесто;
	ВидимостьКогдаЕД = Не ВидимостьКогдаФМ; 
	
	Элементы.ВыявленныеДефектыВвестиДефект.Видимость = Элементы.ВыявленныеДефектыВвестиДефект.Видимость И ВидимостьКогдаЕД;
	
	Элементы.ВнешниеОснованияОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ВыявленныеДефектыОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ПредстоящиеРемонтыОбъектРемонтныхРабот.Видимость = ВидимостьКогдаФМ;
	Элементы.ЗаявкиНаРемонтОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.НарядыНаВыполнениеРемонтныхРаботОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ВыполненныеРемонтыОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.АктыПриемкиОборудованияОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	
КонецПроцедуры

//-- Проф-ИТ, #251, Лавриненко Т.В.,15.08.2023 

//++ Проф-ИТ, #262, Горетовская М.С., 19.09.2023 - Замечания Заказчика по ЗНР 141
&НаКлиенте
&Перед("ТиповойОРПриИзменении")
Процедура проф_ТиповойОРПриИзменении(Элемент)
	ОбновитьОсновныеТаблицы();
КонецПроцедуры
//-- Проф-ИТ, #262, Горетовская М.С., 19.09.2023 - Замечания Заказчика по ЗНР 141 

#КонецОбласти
