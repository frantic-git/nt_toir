#Область ПрограммныйИнтерфейс

#Область ОбновлениеТехническихДанныеПриСменеТОР

//++ Проф-ИТ, #241, Ровенский О.В., 20.09.2023

// У программного интерфейса проигнорировано заполнения дерева ограничений
// потому как данный функционал на текущий момент не используется, 
// если он будет необходим, придется расширять метод
Функция ОбновитьТехническиеДанные(ТекТиповойОР, СтруктураИзменения = Неопределено) Экспорт
	
	Если СтруктураИзменения = Неопределено Тогда
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("МодифицированностьПредшествующихРемонтов", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьРемЦиклов", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьЗамещаемыхРемонтов", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьЗапчастейОР", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьНормативныхЗатратПоЗапчастям", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьГарантий", Ложь);
		СтруктураИзменения.Вставить("МодифицированностьНормРемонтов", Ложь);		
	КонецЕсли;	
	
	// Гарантии++ Взято из ПриСозданииНаСервере
	ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	Если ФОИспользоватьГарантии Тогда
		
		ТаблицаГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(Ссылка);
		
		Если Не ТаблицаГарантий = Неопределено  Тогда
			проф_ГарантииОбъектаРемонта.Загрузить(ТаблицаГарантий);
		КонецЕсли; 
		
		Если проф_ГарантииОбъектаРемонта.Количество() > 0 Тогда
			ЕстьГарантияДляОбъекта = Истина;
		Иначе
			ЕстьГарантияДляОбъекта = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// Гарантии--	
	
	ЗаполнитьНормативныеРемонты(СтруктураИзменения.МодифицированностьНормРемонтов, СтруктураИзменения.МодифицированностьПредшествующихРемонтов,
		СтруктураИзменения.МодифицированностьЗамещаемыхРемонтов);
	
	// обновить нормативные ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(ТиповойОР);		
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = проф_НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			проф_НормативныеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = проф_НормативныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
	// обновить предшествующие ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуПредшествующихРемонтов(ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = проф_ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			проф_ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = проф_ПредшествующиеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;		
	
	СтруктураИзменения.МодифицированностьПредшествующихРемонтов = Истина;

	// Обновить фиксированные ремонтные циклы
	МассивЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Ссылка, ТиповойОР, Ложь);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		Отбор = Новый Структура("ГруппаОбъектовРемонтов, ТиповойОР", ТекТиповойОР, Истина);
		СтрокиДляУдаления = проф_ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиДляУдаления Цикл 
			проф_ТабличноеПолеРемонтныеЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
		
		СтрокиДляУдаления = проф_РемЦиклыОборудования.НайтиСтроки(Отбор);
		Для каждого Строка Из СтрокиДляУдаления Цикл
			проф_РемЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из МассивЦепочек Цикл
		НС = проф_ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
		НС = проф_РемЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	СтруктураИзменения.МодифицированностьРемЦиклов = Истина;
	
	// Обновить замещаемые ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуЗамещаемыхРемонтов(ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = проф_ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			проф_ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = проф_ЗамещаемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	СтруктураИзменения.МодифицированностьЗамещаемыхРемонтов = Истина;
		
	ИзмененИзготовитель = Ложь;
	ИзмененоНаправление = Ложь;
	текИзготовительТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Изготовитель");
	текНаправлениеТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Направление");
	Если текИзготовительТипового = Изготовитель
	ИЛИ НЕ ЗначениеЗаполнено(Изготовитель) Тогда
		Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТиповойОР, "Изготовитель");	
	КонецЕсли; 
	Если текНаправлениеТипового = Направление
	ИЛИ НЕ ЗначениеЗаполнено(Направление) Тогда
		Направление  = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТиповойОР, "Направление");	
	КонецЕсли; 
			
	СтруктураИзменения.МодифицированностьНормРемонтов = Истина;
	
	ТекТиповойОР = ТиповойОР;
	
	// Заполнить таблицу запчастей.
	Если НЕ СтруктураИзменения.МодифицированностьЗапчастейОР Тогда
		СтруктураВозврата = ЗаполнитьТабЗапчастейОбъектовРемонта(Ссылка);
		Если СтруктураВозврата.Свойство("Запчасти") Тогда
			
			проф_ТабЗапчастейОбъектовРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.Запчасти Цикл
				
				НС = проф_ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Стр);
				НС.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(НС.Номенклатура);
				
			КонецЦикла;
			
		КонецЕсли;
		Если СтруктураВозврата.Свойство("НормаЗапчастей") Тогда
			
			проф_ТабЗатратПоВидамРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.НормаЗапчастей Цикл
				
				НС = проф_ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураИзменения.МодифицированностьЗапчастейОР = Истина;
	СтруктураИзменения.МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		
		СтрВозврата = ПолучитьЗапчастиИзТиповогоОР(ТиповойОР);
		
		// ТабЗатратПоВидамРемонта
		мУдаления = Новый Массив;
		Для Каждого ТекСтрока Из проф_ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мУдаления Цикл
			проф_ТабЗатратПоВидамРемонта.Удалить(ТекСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("НормативныеЗатраты") Тогда
			Для каждого ТекСтрока из СтрВозврата.НормативныеЗатраты Цикл
				НСтр = проф_ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НСтр, ТекСтрока);
				НСтр.ИзТипового = Истина;
				НСтр.ТиповойОр = ТиповойОР;
				НСтр.ОбъектРемонта = Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		// ТабЗапчастейОбъектовРемонта
		мУдаления.Очистить();
		Для каждого ТекСтрока из проф_ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			проф_ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("Запчасти") Тогда
			Для каждого ТекСтрока из СтрВозврата.Запчасти Цикл
				Отбор = Новый Структура("Номенклатура, Характеристика", ТекСтрока.Номенклатура, ТекСтрока.Характеристика);
				НайденныеСтроки = проф_ТабЗапчастейОбъектовРемонта.НайтиСтроки(Отбор);
				НСтр = проф_ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НСтр, ТекСтрока);
				НСтр.ИзТипового = Истина;
				НСтр.ТиповойОр = ТиповойОР;
				НСтр.ОбъектРемонта = Ссылка;
				НСтр.Удален = НайденныеСтроки.Количество() > 0;
				НСтр.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(
																					  ТекСтрока.Номенклатура);
																					  
				Если НСтр.Удален Тогда                            
					Отбор = Новый Структура("Номенклатура, Характеристика, ИзТипового", 
								ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Истина);																	  
					НайденныеСтроки = проф_ТабЗатратПоВидамРемонта.НайтиСтроки(Отбор);
						
					Для Каждого текЗатрата Из НайденныеСтроки Цикл
						текЗатрата.Удален = Истина;	
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		
	Иначе
		
		мУдаления = Новый Массив;
		Для каждого ТекСтрока из проф_ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			проф_ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		мУдаления.Очистить();
		Для каждого ТекСтрока из проф_ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			проф_ТабЗатратПоВидамРемонта.Удалить(текСтрока);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецФункции	

Функция ЗаполнитьНормативныеРемонты(Знач МодифицированностьНормРемонтов = Ложь,
									Знач МодифицированностьПредшествующихРемонтов = Ложь,
									Знач МодифицированностьЗамещаемыхРемонтов = Ложь) Экспорт
									
	Если НЕ МодифицированностьНормРемонтов Тогда
		
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(Ссылка);
		
		проф_НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = проф_НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		Для каждого Ремонт Из проф_НормативныеРемонты Цикл 
			Если НЕ ЗначениеЗаполнено(Ремонт.ТиповойОР)
			И Ремонт.Удален = Ложь Тогда
				Отбор = Новый Структура("ТиповойОР, ВидРемонта", ТиповойОР, Ремонт.ВидРемонта); 
				СовпадающиеРемонты = проф_НормативныеРемонты.НайтиСтроки(Отбор);
				Если СовпадающиеРемонты.Количество() > 0 Тогда 
					СовпадающиеРемонты[0].Удален = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если не МодифицированностьПредшествующихРемонтов Тогда
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуПредшествующихРемонтов(Ссылка);
		
		проф_ПредшествующиеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = проф_ПредшествующиеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если не МодифицированностьЗамещаемыхРемонтов Тогда
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуЗамещаемыхРемонтов(Ссылка);
		
		проф_ЗамещаемыеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = проф_ЗамещаемыеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;									
									
КонецФункции	

// TODO Можно из формы вызвать этот метод
Функция ОбновитьФиксированныеРемонтныеЦиклы(ОбъектРемонта, ТиповойОР, ТолькоОР = Истина, ТолькоТиповыеОР = Истина) Экспорт
	
	МассивЦепочек = Новый Массив;
	
	СписокОтбора = Новый СписокЗначений;
	Если ТолькоОР И ЗначениеЗаполнено(ОбъектРемонта) Тогда 
		СписокОтбора.Добавить(ОбъектРемонта);
	КонецЕсли;
	Если ТолькоТиповыеОР И ЗначениеЗаполнено(ТиповойОР) Тогда
		СписокОтбора.Добавить(ТиповойОР);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
	|	торо_РемонтныеЦиклыОборудования.НеУчитыватьПростоиОборудования
	|ИЗ
	|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	|ГДЕ
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В(&СписокОтбора)";
	
	Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	МассивЦепочек = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Структ = Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов, НеУчитыватьПростоиОборудования, ТиповойОР");
		ЗаполнитьЗначенияСвойств(Структ, Выборка);
		Структ.ТиповойОР = ?(ТипЗнч(Выборка.ГруппаОбъектовРемонтов) = Тип("СправочникСсылка.торо_ТиповыеОР"), Истина, Ложь);
		МассивЦепочек.Добавить(Структ);
		
	КонецЦикла;
	
	Возврат МассивЦепочек;
	
КонецФункции

// TODO Можно из формы вызвать этот метод
Функция ЗаполнитьТабЗапчастейОбъектовРемонта(Ссылка) Экспорт
	
	СтруктураДанных = Новый Структура();
	
	Если НЕ Ссылка.Пустая() Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Запчасти.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_Запчасти.Номенклатура КАК Номенклатура,
		               |	торо_Запчасти.Качество КАК Качество,
		               |	торо_Запчасти.Характеристика КАК Характеристика,
		               |	торо_Запчасти.ТиповойОР КАК ТиповойОР,
		               |	торо_Запчасти.Количество КАК Количество,
		               |	ВЫБОР
		               |		КОГДА торо_Запчасти.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_ЗапчастиУдаленные.ОбъектРемонта ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
		               |		ПО торо_Запчасти.ОбъектРемонта = торо_ЗапчастиУдаленные.ОбъектРемонта
		               |			И торо_Запчасти.Номенклатура = торо_ЗапчастиУдаленные.Номенклатура
		               |			И торо_Запчасти.Характеристика = торо_ЗапчастиУдаленные.Характеристика
		               |			И торо_Запчасти.ТиповойОР = торо_ЗапчастиУдаленные.ТиповойОР
		               |ГДЕ
		               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
		               |		ПО торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Характеристика = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Характеристика
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		МассивНормЗапчастей = Новый Массив;
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			МассивЗапчастей = Новый Массив;
			Выборка = МассивРезультатов[0].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметр = Новый Структура("ОбъектРемонта,Номенклатура,Качество,Характеристика,
													|Количество,ТиповойОР,Удален,ИзТипового");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);				
				
				МассивЗапчастей.Добавить(СтруктураПараметр);
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("Запчасти",МассивЗапчастей);
			
		КонецЕсли;
		
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			
			МассивНормЗапчастей = Новый Массив;
			
			Выборка = МассивРезультатов[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметр = Новый Структура("ОбъектРемонта,Номенклатура,ВидРемонта,Количество,
													|ТиповойОР,ИзТипового, Удален, Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
				
				МассивНормЗапчастей.Добавить(СтруктураПараметр);
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("НормаЗапчастей",МассивНормЗапчастей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// TODO Можно из формы вызвать этот метод
Функция ПолучитьЗапчастиИзТиповогоОР(ТиповойОР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОРЗапчасти.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРЗапчасти.Количество КАК Количество,
	               |	торо_ТиповыеОРЗапчасти.Характеристика КАК Характеристика,
	               |	торо_ТиповыеОРЗапчасти.Качество КАК Качество
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_ТиповыеОРЗапчасти
	               |ГДЕ
	               |	торо_ТиповыеОРЗапчасти.Ссылка = &ТиповойОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта КАК ВидРемонта,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Количество КАК Количество,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Характеристика КАК Характеристика
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеЗатратыПриТОиР КАК торо_ТиповыеОРНормативныеЗатратыПриТОиР
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка = &ТиповойОР";
	   
	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	
	Результат = Запрос.ВыполнитьПакет();
	стрВозврата = Новый Структура;
	
	Если НЕ Результат[0].Пустой() Тогда
		Выборка = Результат[0].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			СтруктураПараметр = Новый Структура("Номенклатура, Количество, Характеристика, Качество");					
			ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
			мВозврата.Добавить(СтруктураПараметр);
		КонецЦикла;
			
		стрВозврата.Вставить("Запчасти", мВозврата);
	КонецЕсли;
	
	Если НЕ Результат[1].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПараметр = Новый Структура("Номенклатура, Количество, ВидРемонта, Характеристика");			
			ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
			мВозврата.Добавить(СтруктураПараметр);
		КонецЦикла;
			
		стрВозврата.Вставить("НормативныеЗатраты", мВозврата);
	КонецЕсли;
	
	Возврат стрВозврата;
		
КонецФункции

//-- Проф-ИТ, #241, Ровенский О.В., 20.09.2023

#КонецОбласти

#Область ЗаписьПриСменеТОР

//++ Проф-ИТ, #241, Ровенский О.В., 20.09.2023

Процедура ПроверитьЗаполнитьНаСервере(СтруктураИзменения, Отказ) Экспорт
	
	// Стандартные подсистемы пропустил
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	
	//++ Проф-ИТ, #142, Корнилов М.С.,19.09.2023 Требование Фокиной В.Г.
	// Проверка выполняется только если отключена возможность вводить документ ЖЦ оборудования.
	//Если НЕ ФОИспользоватьДокументыЖЦОборудования
	//	И ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) 
	//	И ДатаВыпуска > ДатаВводаВЭксплуатацию Тогда
	//	
	//	ТекстСообщение = НСтр("ru = 'Дата выпуска не может быть больше даты ввода в эксплуатацию!'");
	//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщение,,,, Отказ);
	//КонецЕсли;
	//-- Проф-ИТ, #142, Корнилов М.С.,19.09.2023

	// Проверка уникальности штрих-кода
	Если Не ШтрихКодУникален() Тогда
		ТекстСообщение = НСтр("ru = 'Введённый штрих-код не уникален!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщение,, "Объект.ШтрихКод",, Отказ);

	КонецЕсли;
	
    // ТЧ НОРМАТИВНЫЕ РЕМОНТЫ
	ПроверитьЗаполнениеНормативныеРемонты(Отказ);
	
	// ТЧ ПРЕДШЕСТВУЮЩИЕ РЕМОНТЫ
	ПроверитьЗаполнениеПредшествующиеРемонты(Отказ);
	
	// ТЧ ЗАМЕЩАЕМЫЕ РЕМОНТЫ
	ПроверитьЗаполнениеЗамещаемыеРемонты(Отказ);
	
	// ТЧ ТабличноеПолеРемонтныеЦиклыОборудования
	ПроверитьЗаполнениеТабличноеПолеРемонтныеЦиклыОборудования(Отказ);	

	// ТЧ ТабЗапчастейОбъектовРемонта
	ПроверитьЗаполнениеТабЗапчастейОбъектовРемонта(Отказ);
	
	// ТЧ ТабЗатратПоВидамРемонта
	ПроверитьЗаполнениеТабЗатратПоВидамРемонта(Отказ);
	
	// ТЧ ТаблицаОценокРМ
	
	// TODO При создании на сервере и изменении ТОР нет заполнения данной таблицы
	
	// ТЧ Основное и зависимое оборудование 
	
	// TODO Работает с деревьями на форме, при создании на сервере и изменении ТОР нет заполнения данных деревьев
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеНормативныхРемонтов(СтруктураИзменения, Отказ);
	ПроверитьЗаполнениеЗамещаемыхРемонтов(Отказ);
	ПроверитьЗаполнениеГарантийОбъектовРемонта(СтруктураИзменения, Отказ);
	ПроверитьЗаполнениеХарактеристикЗапчастей(Отказ);
	
КонецПроцедуры	

Процедура ПередЗаписьюФормы(СтруктураИзменения, Отказ) Экспорт

	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	
	Если ДублиСредиЦепочекРЦ() Тогда
		ШаблонСообщения = НСтр("ru = 'Типовой объект ремонта ""%1"" содержит в себе уже указанные для объекта ремонта
			|фиксированные ремонтные циклы, запись невозможна'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТиповойОР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);		
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста")
	И ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда		
		ВнешнийОбъект = Ложь;
		ЭтоАктив = Ложь;
		СрокПолезногоИспользования = Неопределено;
		Изготовитель = Неопределено;
		ДатаВыпуска = ?(ЗначениеЗаполнено(ДатаВводаВЭксплуатацию), ДатаВводаВЭксплуатацию, ТекущаяДатаСеанса());
		НомерПаспорта = "";
		ЗаводскойНомер = "";
		КодПоОКОФ = Неопределено;				
	КонецЕсли;
	
	Если ВнешнийОбъект Тогда
		Организация = Неопределено;
		Подразделение = Неопределено;
	Иначе
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	//++ Проф-ИТ, #142, Корнилов М.С., 21.09.2023 Требование Фокиной В.Г.
	//Если ФОИспользоватьДокументыЖЦОборудования Тогда
	//	
	//	Если Не ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда 
	//		ТекстСообщения = НСтр("ru = 'Объект ремонта будет недоступен для подбора в документы
	//			| ""Ввод начальных данных"", ""Учет наработки оборудования"", ""Состояния объектов ремонта"".
	//			|Введите документ ""Принятие объекта ремонта к учету"" (Группа ""Статус объекта ремонта"")'");
	//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	//	КонецЕсли;				
	//	
	//Иначе
	//	
	//	Если Не ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда
	//		ТекстСообщения = НСтр("ru = 'Не заполнено поле <Дата ввода в эксплуатацию>. Запись не выполнена.'");
	//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//	КонецЕсли; 
	//	
	//КонецЕсли;
	//-- Проф-ИТ, #142, Корнилов М.С., 21.09.2023 Требование Фокиной В.Г.
	
	// TODO убрал, скорее всего используется только на форме
	// содержит защищенные методы
	
	//Если (СтруктураИзменения.МодифицированностьНормРемонтов
	//	Или СтруктураИзменения.МодифицированностьЗамещаемыхРемонтов
	//	Или  СтруктураИзменения.МодифицированностьПредшествующихРемонтов)
	//И ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
	//
	//	
	//	ОчиститьЗакладкуСтруктураРемонтногоЦикла();
	//	
	//	ТекстСообщения = НСтр("ru = 'Данные на вкладке <Структура ремонтного цикла> были очищены, так как нормативы изменены.'");
	//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	//КонецЕсли;
			
	Для каждого Ремонт Из проф_НормативныеРемонты Цикл 
		
		Отбор = Новый Структура("ТиповойОР, ВидРемонта", Ремонт.ТиповойОР, Ремонт.ВидРемонта);
		СтрокиПредРемонтов = проф_ПредшествующиеРемонты.НайтиСтроки(Отбор);
		
		Если СтрокиПредРемонтов.Количество() = 0
		И Ремонт.Удален = Ложь
		И ЗначениеЗаполнено(Ремонт.ВидРемонта) Тогда
			ШаблонСообщения = НСтр("ru = 'Для ремонта ""%1"" в нормативных ремонтах не заполнены предшествующие ремонты. Запись была отменена!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		 КонецЕсли;		 
	 КонецЦикла;
	 
	 Если НЕ Отказ и ЗначениеЗаполнено(ТиповойОР) Тогда
		 Для каждого Ремонт Из проф_НормативныеРемонты Цикл 
			 Если НЕ ЗначениеЗаполнено(Ремонт.ТиповойОР) И Ремонт.Удален = Ложь Тогда
				 СовпадающиеРемонты = проф_НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТиповойОР, Ремонт.ВидРемонта));
				 Если СовпадающиеРемонты.Количество() > 0 Тогда 
					 СовпадающиеРемонты[0].Удален = Истина;
					 СтруктураИзменения.МодифицированностьНормРемонтов = Истина;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписиФормы(СтруктураИзменения, ПредТиповойОР, Отказ) Экспорт

	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ТекОбъект = Объект.Ссылка;
	//Иначе
	//	ТекОбъект = ТекущийОбъект.Ссылка;
	//КонецЕсли;	
	
	ТекОбъект = Ссылка;
	
	ЗаписатьЗапчасти(ТекОбъект, СтруктураИзменения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗаписатьНормативныеРемонты(ТекОбъект, СтруктураИзменения, ПредТиповойОР, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗаписатьРемонтныеЦиклы(ТекОбъект, СтруктураИзменения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// TODO ОценкиРМ при создании на сервере не заполняется
	//ЗаписатьОценкиРМ(ТекОбъект, Отказ);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	
	ЗаписатьГарантии(ТекОбъект, СтруктураИзменения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// TODO Работает с деревьями на форме, при создании на сервере и изменении ТОР нет заполнения данных деревьев
	//ЗаписатьОсновноеЗависимоеОборудование(ТекОбъект, Отказ);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	
	// TODO Изменения родителя делать не надо, мы его не меняем
	//ЗаписатьИзменениеРодителя(Отказ);
	
	// TODO Отключено в методе выше "ОбновитьТехническиеДанные" 
	//Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") Тогда 
	//	ЭтоФМ = Ложь;
	//	Если ТекОбъект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
	//		ЭтоФМ = Истина;
	//		ЗаписатьОграниченияНаХарактеристики(ТекОбъект, Отказ);
	//		ЗаписатьТиповойСостав(ТекОбъект, Отказ);
	//	КонецЕсли;
	//	
	// 	ЗаписатьОбъектВРегистрДляПроверкиТребований(ТекОбъект, ЭтоФМ);
	//КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПредТиповойОР = ТиповойОР;	
	
	// Очищаем таблицы объекта
    ОчиститьВспомогательныеТаблицы();
	
КонецПроцедуры	

// TODO Можно из формы вызвать этот метод
Функция ШтрихКодУникален() Экспорт
	
	Если Не ЗначениеЗаполнено(ШтрихКод) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка <> &Ссылка
	               |	И торо_ОбъектыРемонта.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка <> &Ссылка", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Не Выборка.Следующий();

КонецФункции

// TODO Можно из формы вызвать этот метод
Функция ПроверитьПересеченияНаСервере(ТекЦепочка) Экспорт
	
	ПрерватьПроверку = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РемонтыНовые
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ремонты.ВидРемонта КАК ВидРемонтаСтарый,
	|	РемонтыНовые.ВидРемонта КАК ВидРемонтаНовый,
	|	Ремонты.Ссылка КАК Ссылка
	|ИЗ
	|	Ремонты КАК Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыНовые КАК РемонтыНовые
	|		ПО Ремонты.ВидРемонта = РемонтыНовые.ВидРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	
	МассивЦепочек = проф_ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить().ВыгрузитьКолонку("ВидЦепочки");
	ИндексТекЦепочки = МассивЦепочек.Найти(ТекЦепочка);
	Если ИндексТекЦепочки <> Неопределено Тогда
		МассивЦепочек.Удалить(ИндексТекЦепочки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЦепочек);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[2].Выбрать();
	
	флДобавлятьЦепочку = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ТекЦепочка Тогда
			флДобавлятьЦепочку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ флДобавлятьЦепочку Тогда
		ПрерватьПроверку = Истина;
		ШаблонСообщения = НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов,
			|так как она содержит виды ремонтов, входящие в другие выбранные цепочки.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекЦепочка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивРемонтов = проф_НормативныеРемонты.Выгрузить().ВыгрузитьКолонку("ВидРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|   торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта В (&МассивРемонтов)
	|	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МассивРемонтов", МассивРемонтов);
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрерватьПроверку = Истина;
		ШаблонСообщения = НСтр("ru = 'Вид ремонта ""%1"" из цепочки ""%2"" уже выбран в качестве нормативного ремонта!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Возврат ПрерватьПроверку;
	
КонецФункции

// TODO Можно из формы вызвать этот метод
Функция ДублиСредиЦепочекРЦ() Экспорт
	
	МассивЦепочек = Новый Массив;
	
	Для каждого Строка Из проф_ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		Если Строка.ТиповойОР = Ложь Тогда
			МассивЦепочек.Добавить(Строка.ВидЦепочки);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки,
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов
		|ИЗ
		|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|ГДЕ
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &НовыйТиповой
		|	И торо_РемонтныеЦиклыОборудования.ВидЦепочки В(&МассивЦепочек)";
	
	Запрос.УстановитьПараметр("МассивЦепочек", МассивЦепочек);
	Запрос.УстановитьПараметр("НовыйТиповой", ТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// TODO Можно из формы вызвать этот метод
Процедура ИзменитьПредшествующиеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР) Экспорт
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.ВидРемонта КАК ВидРемонта,
	|	торо_ТиповыеОРПредшествующиеРемонты.ПредшествующийВидРемонта
	|ПОМЕСТИТЬ ВТ_ПредшествующиеРемонты
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ПредшествующиеРемонты КАК торо_ТиповыеОРПредшествующиеРемонты
	|ГДЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_ВидРемонта_Действует
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Статус = &СтатусДействует
	|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПредшествующиеРемонты.ВидРемонта,
	|	ВТ_ПредшествующиеРемонты.ПредшествующийВидРемонта
	|ИЗ
	|	ВТ_ПредшествующиеРемонты КАК ВТ_ПредшествующиеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидРемонта_Действует КАК ВТ_ВидРемонта_Действует
	|		ПО ВТ_ПредшествующиеРемонты.ВидРемонта = ВТ_ВидРемонта_Действует.ВидРемонта";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// TODO Можно из формы вызвать этот метод
Процедура ИзменитьЗамещаемыеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.ВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.ЗамещаемыйВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.СпособЗамещения,
	|	торо_ТиповыеОРЗамещаемыеРемонты.НачальнаяГраница,
	|	торо_ТиповыеОРЗамещаемыеРемонты.КонечнаяГраница
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ЗамещаемыеРемонты КАК торо_ТиповыеОРЗамещаемыеРемонты
	|ГДЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.Ссылка = &ТиповойОР";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

//-- Проф-ИТ, #241, Ровенский О.В., 20.09.2023

#КонецОбласти

&После("ПриЗаписи")
Процедура проф_ПриЗаписи(Отказ)
	
	//++ Проф-ИТ, #257, Иванова Е.С., 21.09.2023   
	проф_СоздатьДокументСостояниеОР();
	//-- Проф-ИТ, #257, Иванова Е.С., 21.09.2023
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Проф-ИТ, #241, Ровенский О.В., 20.09.2023

Процедура ПроверитьЗаполнениеНормативныеРемонты(Отказ)
		
	Для Каждого ТекДанные Из проф_НормативныеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Вид ремонта""
				|в таблице ""Нормативные ремонты""!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, проф_НормативныеРемонты.Индекс(ТекДанные));			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;                           
		Отбор = Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта);
		МассивСтрок = проф_НормативныеРемонты.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)""
					|в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Вид ремонта""
					|в таблице ""Нормативные ремонты""!'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.НормативныйРемонт) Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Технологическая карта""
				|для вида ремонта ""(%2)"" в таблице ""Нормативные ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, проф_НормативныеРемонты.Индекс(ТекДанные), ТекДанные.ВидРемонта);									
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.СпособПланирования) Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Способ планирования""
				|для вида ремонта ""(%2)"" в таблице ""Нормативные ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, проф_НормативныеРемонты.Индекс(ТекДанные), ТекДанные.ВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеПредшествующиеРемонты(Отказ)
	
	Для Каждого ТекДанные Из проф_ПредшествующиеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ПредшествующийВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Предшествующий вид ремонта""
				|в таблице ""Предшествующие ремонты""!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, проф_ПредшествующиеРемонты.Индекс(ТекДанные));			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;                                       
		Отбор = Новый Структура("ТиповойОР, ВидРемонта, ПредшествующийВидРемонта",
					ТекДанные.ТиповойОР, ТекДанные.ВидРемонта, ТекДанные.ПредшествующийВидРемонта);
		МассивСтрок = проф_ПредшествующиеРемонты.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Предшествующий вид ремонта"" ""(%1)""
				|в таблице ""Предшествующие ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ПредшествующийВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);

		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеЗамещаемыеРемонты(Отказ);
	
	Для Каждого ТекДанные Из проф_ЗамещаемыеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Замещ. вид ремонта""
				|в таблице ""Замещаемые ремонты""!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, проф_ЗамещаемыеРемонты.Индекс(ТекДанные)); 			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Отбор = Новый Структура("ВидРемонта, ТиповойОР, ЗамещаемыйВидРемонта", 
									ТекДанные.ВидРемонта, ТекДанные.ТиповойОР, ТекДанные.ЗамещаемыйВидРемонта);
		МассивСтрок = проф_ЗамещаемыеРемонты.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Замещ. вид ремонта"" ""(%1)""
				|в таблице ""Замещаемые ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);

		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеТабличноеПолеРемонтныеЦиклыОборудования(Отказ)
	
	Для Каждого ТекДанные Из проф_ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВидЦепочки) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Вид цепочки""
				|в таблице ""Ремонтные циклы оборудования""!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, проф_ТабличноеПолеРемонтныеЦиклыОборудования.Индекс(ТекДанные)); 
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Отбор = Новый Структура("ВидЦепочки", ТекДанные.ВидЦепочки);
		МассивСтрок = проф_ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид цепочки"" ""(%1)""
				|в таблице ""Ремонтные циклы оборудования""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидЦепочки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);

		КонецЕсли;
		
		Если ПроверитьПересеченияНаСервере(ТекДанные.ВидЦепочки) Тогда
			Отказ = Истина;

		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеТабЗапчастейОбъектовРемонта(Отказ)
	
	ФОХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	Для Каждого ТекДанные Из проф_ТабЗапчастейОбъектовРемонта Цикл
		ТекстОшибки = "";
		Если ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Номенклатура"" в таблице ""Запчасти""!'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, проф_ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные));									
		ИначеЕсли ТекДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")
		И ТекДанные.ХарактеристикиИспользуются = Истина
		И ФОХарактеристикиИспользуются = Истина
		И Не ТекДанные.Удален = Истина Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены незаполненная поля в строке %1 ""Характеристика номенклатуры"" в таблице запчасти!'"); 
			ТекстОшибки = СтрШаблон(ТекстОшибки, проф_ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные));			
		Иначе
			СтруктураПараметр = Новый Структура;
			СтруктураПараметр.Вставить("Номенклатура", ТекДанные.Номенклатура);
			СтруктураПараметр.Вставить("Характеристика", ТекДанные.Характеристика);
			СтруктураПараметр.Вставить("Удален", Ложь);
			СтруктураПараметр.Вставить("ИзТипового", Ложь);			
			СтрокиНоменклатуры = проф_ТабЗапчастейОбъектовРемонта.НайтиСтроки(СтруктураПараметр);
			Если СтрокиНоменклатуры.Количество() > 1 Тогда
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Номенклатура"" (""%1"") в таблице ""Запчасти""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
				Иначе
					ТекстОшибки = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Номенклатура"" в таблице ""Запчасти""!'");
				КонецЕсли;
			ИначеЕсли ТекДанные.Количество = 0 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле в строке %1 ""Количество номенклатуры""
					|для номенклатуры ""%2"" в таблице ""Запчасти""!'");								
				ТекстОшибки = СтрШаблон(ШаблонСообщения,
										проф_ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные),
										ТекДанные.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = "" И НЕ ТекДанные.Удален Тогда
						
			Отбор = Новый Структура("Номенклатура, Характеристика, Удален", 
				Текданные.Номенклатура, Текданные.Характеристика, Ложь);
			МассивСтрок = проф_ТабЗатратПоВидамРемонта.НайтиСтроки(Отбор);
			
			МаксКол = 0;
			
			Для Каждого Элем Из МассивСтрок Цикл
				Если Элем.Количество > МаксКол Тогда
					МаксКол = Элем.Количество;
					ВР = Элем.ВидРемонта;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксКол > ТекДанные.Количество Тогда
				Если ЗначениеЗаполнено(ВР) Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для вида ремонта ""%2"" больше,
						|чем количество в составе объекта ремонта!'"), МаксКол, ВР);
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для незаполненного вида ремонта больше,
						|чем количество в составе объекта ремонта!'"), МаксКол);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ТекстОшибки = "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);

		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеТабЗатратПоВидамРемонта(Отказ)
	
	Для Каждого ТекДанные Из проф_ТабЗатратПоВидамРемонта Цикл 
		
		Если ТекДанные.Удален Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Удален", ТекДанные.Номенклатура, ТекДанные.Характеристика, Ложь);
		ТекДанныеЗапчастей = проф_ТабЗапчастейОбъектовРемонта.НайтиСтроки(Отбор)[0];
		
		ТекстОшибки = "";

		// проверка
		Если ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное в строке %1 поле ""Вид ремонта""
				|в таблице ""Нормативные затраты при ТОиР""!'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, проф_ТабЗатратПоВидамРемонта.Индекс(ТекДанные));			
		Иначе
			Если ТекДанные.Количество = 0 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное в строке %1 поле ""Кол-во"" для вида ремонта ""%2""
					|в таблице ""Нормативные затраты при ТОиР""!'");				
				ТекстОшибки = СтрШаблон(ШаблонСообщения, проф_ТабЗатратПоВидамРемонта.Индекс(ТекДанные), ТекДанные.ВидРемонта);								
			Иначе
				Если ТекДанныеЗапчастей <> Неопределено Тогда					
					СтруктураПараметр = Новый Структура("ВидРемонта, Номенклатура, Характеристика, Удален, ИзТипового");
					ЗаполнитьЗначенияСвойств(СтруктураПараметр, ТекДанные);
					СтруктураПараметр.Удален = Ложь;
										
					СтрокиНоменклатуры = проф_ТабЗатратПоВидамРемонта.НайтиСтроки(СтруктураПараметр);
					Если СтрокиНоменклатуры.Количество() > 1 Тогда
						ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)""
							|в таблице ""Нормативные затраты при ТОиР""!'");
						ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
					КонецЕсли;
				
					Если ТекДанные.Количество > ТекДанныеЗапчастей.Количество Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для (%2) при виде ремонта (%3) больше,
							|чем количество в составе объекта ремонта!'"),
							ТекДанные.Количество, ТекДанные.Номенклатура, ТекДанные.ВидРемонта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);

		КонецЕсли;

	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеНормативныхРемонтов(СтруктураИзменения, Отказ)
	
	МодифицированностьНормРемонтов = СтруктураИзменения.МодифицированностьНормРемонтов;
	
	Если Не МодифицированностьНормРемонтов Тогда
		Возврат;
	КонецЕсли;	
			
	Для Каждого Стр Из проф_НормативныеРемонты Цикл
		
		Если Стр.Удален Тогда
			Продолжить;
		КонецЕсли;	
				
		Если НЕ ЗначениеЗаполнено(Стр.ВидРемонта) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Вид ремонта"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.НормативныйРемонт) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Технологическая карта"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.СпособПланирования) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ планирования"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""График ремонтных работ"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.СпособВыполнения) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ выполнения"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.СпособУчетаДатыОтсчета) Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ учета даты отсчета"" в строке № %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор() + 1));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеЗамещаемыхРемонтов(Отказ)
	
	Для каждого СтрЗамещРемонта Из проф_ЗамещаемыеРемонты Цикл
		
		Если Не ЗначениеЗаполнено(СтрЗамещРемонта.ЗамещаемыйВидРемонта) Тогда
			Продолжить;
		КонецЕсли;	
				
		Если ЗначениеЗаполнено(СтрЗамещРемонта.ТиповойОР) Тогда 
			Продолжить;
		КонецЕсли;
		
		МежремонтныйИнтервал = ВычислениеМежремонтногоИнтервала(СтрЗамещРемонта);
		
		Если МежремонтныйИнтервал = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
				
		Если МежремонтныйИнтервал <= СтрЗамещРемонта.НачальнаяГраница Тогда
			ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от начала"" для ремонта %1 в строке %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрЗамещРемонта.ВидРемонта, СтрЗамещРемонта.ЗамещаемыйВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если МежремонтныйИнтервал <= СтрЗамещРемонта.КонечнаяГраница Тогда
			ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от окончания"" для ремонта %1 в строке %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрЗамещРемонта.ВидРемонта, СтрЗамещРемонта.ЗамещаемыйВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;		
	
	КонецЦикла;
	
	ТаблицаСДублями = Новый ТаблицаЗначений;
	ТаблицаСДублями.Колонки.Добавить("Ремонт"); 
	Для Каждого СтрокаЗамещения ИЗ проф_ЗамещаемыеРемонты Цикл
		Для Каждого СтрокаЗамещения1 Из проф_ЗамещаемыеРемонты Цикл
			Если СтрокаЗамещения.ВидРемонта = СтрокаЗамещения1.ВидРемонта
				И СтрокаЗамещения.ЗамещаемыйВидРемонта = СтрокаЗамещения1.ЗамещаемыйВидРемонта
				И СтрокаЗамещения.ТиповойОР = СтрокаЗамещения1.ТиповойОР
				И СтрокаЗамещения <> СтрокаЗамещения1 Тогда
				ТаблицаСДублями.Добавить().Ремонт = СтрокаЗамещения.ВидРемонта;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаСДублями.Свернуть("Ремонт");
	
	Если ЗначениеЗаполнено(ТаблицаСДублями) Тогда
		ТекстСообщения = НСтр("ru = 'Не корректно настроены замещаемые ремонты у видов ремонта:'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Для Каждого СтрокаРемонта Из ТаблицаСДублями Цикл
			ТекстСообщения = " - " + СтрокаРемонта.Ремонт;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ВычислениеМежремонтногоИнтервала(ТекДанные)
	
	Перем МежремонтныйИнтервал;
	
	Запрос = Новый Запрос;
	Таб = проф_НормативныеРемонты.Выгрузить(, "ВидРемонта, СпособПланирования");
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СпособПланирования
	|ПОМЕСТИТЬ ОпредСпособПланирования
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.ВидРемонта = &ВидРемонта
	|	И Таб.СпособПланирования <> ЗНАЧЕНИЕ(Справочник.торо_СпособыПланированияРемонтныхРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПараметрыНаработки,
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПериодичность,
	|	торо_СпособыПланированияРемонтныхРабот.КоличествоПериодов,
	|	торо_СпособыПланированияРемонтныхРабот.ПериодичностьРемонтныхРабот КАК Периодичность,
	|	ОпредСпособПланирования.СпособПланирования КАК СпособПланирования
	|ИЗ
	|	ОпредСпособПланирования КАК ОпредСпособПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_СпособыПланированияРемонтныхРабот КАК торо_СпособыПланированияРемонтныхРабот
	|		ПО ОпредСпособПланирования.СпособПланирования = торо_СпособыПланированияРемонтныхРабот.Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидРемонта", ТекДанные.ЗамещаемыйВидРемонта);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДляПериодичности = Результат.Выбрать();
	
	Если ВыборкаДляПериодичности.Следующий() Тогда
		
		Если ВыборкаДляПериодичности.ИспользоватьПериодичность Тогда
			
			Если ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Год Тогда
				Период = 365;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Период = 182;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Квартал Тогда
				Период = 90;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Месяц Тогда
				Период = 28;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Декада Тогда
				Период = 10;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Неделя Тогда
				Период = 7;
			Иначе Период = 1;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВыборкаДляПериодичности.КоличествоПериодов * Период;
			
		КонецЕсли;
		
		Если ВыборкаДляПериодичности.ИспользоватьПараметрыНаработки Тогда
			
			Запрос3 = Новый Запрос;
			
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.Добавить(Ссылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
			|ИЗ
			|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
			|ГДЕ
			|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта В(&СписокОтбора)";
			
			Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
			
			Результат = Запрос.Выполнить();
			ТаблНараб = Результат.Выгрузить();
			
			Запрос3.УстановитьПараметр("ТаблНараб", ТаблНараб);
			
			
			Запрос3.Текст = 
			"ВЫБРАТЬ
			|	ТаблНараб.Показатель,
			|	ТаблНараб.ПродолжительностьПериодаПлановойНаработки,
			|	ТаблНараб.ПериодПлановойНаработки,
			|	ТаблНараб.ПлановаяНаработка * ТаблНараб.КоэффициентИспользованияОборудования КАК ПлановаяНаработка
			|ПОМЕСТИТЬ ВыбрПараметрыНаработки
			|ИЗ
			|	&ТаблНараб КАК ТаблНараб
			|ГДЕ
			|	ТаблНараб.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ПараметрНаработки
			|ПОМЕСТИТЬ ВыбрСпобобыПланирования
			|ИЗ
			|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			|ГДЕ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыбрСпобобыПланирования.ЗначениеПараметраНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,0) КАК ПродолжительностьПериодаПлановойНаработки,
			|	ВыбрПараметрыНаработки.ПериодПлановойНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПлановаяНаработка,0) КАК ПлановаяНаработка
			|ИЗ
			|	ВыбрСпобобыПланирования КАК ВыбрСпобобыПланирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбрПараметрыНаработки КАК ВыбрПараметрыНаработки
			|		ПО ВыбрСпобобыПланирования.ПараметрНаработки = ВыбрПараметрыНаработки.Показатель";
			
			
			Запрос3.УстановитьПараметр("Ссылка", ВыборкаДляПериодичности.СпособПланирования);
			Запрос3.УстановитьПараметр("ОбъектРемонта", Ссылка);
			
			Результат = Запрос3.Выполнить();
			
			ВыборкаДляНаработки = Результат.Выбрать();
			ВыборкаДляНаработки.Следующий();
			
			Если ВыборкаДляНаработки.ПлановаяНаработка > 0
			И ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки > 0 Тогда
								
				Если ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Год Тогда
					ПериодПлановойНаработки = 365;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Полугодие Тогда
					ПериодПлановойНаработки = 182;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Квартал Тогда
					ПериодПлановойНаработки = 90;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Месяц Тогда
					ПериодПлановойНаработки = 28;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Декада Тогда
					ПериодПлановойНаработки = 10;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Неделя Тогда
					ПериодПлановойНаработки = 7;
				Иначе
					ПериодПлановойНаработки = 1;
				КонецЕсли;
				
				ПериодВДнях = ПериодПлановойНаработки * ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки;
				ПланНарабВДень = ВыборкаДляНаработки.ПлановаяНаработка / ПериодВДнях;
				
				МежремИнтервал = ВыборкаДляНаработки.ЗначениеПараметраНаработки / ПланНарабВДень;
				Если ЗначениеЗаполнено(МежремонтныйИнтервал) Тогда
					Если МежремИнтервал < МежремонтныйИнтервал Тогда
						МежремонтныйИнтервал = МежремИнтервал;
					КонецЕсли;
				Иначе
					МежремонтныйИнтервал = МежремИнтервал;
				КонецЕсли;
			Иначе 
				ШаблонСообщения = НСтр("ru = 'Проверьте заполнение:
                                        |1) показателей на вкладке ""Наработка"" формы ""Настройка показателей эксплуатации"";
                                        |2) параметров планирования по наработке в способе планирования ""%1"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаДляПериодичности.СпособПланирования);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе 
		ТекстСообщения = НСтр("ru = 'Проверьте заполнение ""Способ планирования""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат МежремонтныйИнтервал;
	
КонецФункции 

Процедура ПроверитьЗаполнениеГарантийОбъектовРемонта(СтруктураИзменения, Отказ)
	
	МодифицированностьГарантий = СтруктураИзменения.МодифицированностьГарантий;
	
	Если проф_ГарантииОбъектаРемонта.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура("ОбъектРемонта", Ссылка);
		МассивСтрок = проф_ГарантииОбъектаРемонта.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из МассивСтрок Цикл
			
			СтрокаСОрганизациейГарантииЗаполнена = Истина;
			СтрокаСУсловиямиГарантииЗаполнена	 = Истина;
			
			Если СтрокаСУсловиямиГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.УсловияГарантии) Тогда
				ТекстСообщения = НСтр("ru = 'В таблице сроков гарантии объекта не все поля
					|в колонке <Условия гарантии> заполнены. Запись не выполнена'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				СтрокаСУсловиямиГарантииЗаполнена = Ложь;
			КонецЕсли;
			
			Если СтрокаСОрганизациейГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.ГарантирующаяОрганизация) Тогда
				ТекстСообщения = НСтр("ru = 'В таблице сроков гарантии объекта не все поля
					|в колонке <Гарантирующая организация> заполнены. Запись не выполнена'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				СтрокаСОрганизациейГарантииЗаполнена = Ложь;
			КонецЕсли;
			
			Если Не СтрокаСОрганизациейГарантииЗаполнена 
				И НЕ СтрокаСУсловиямиГарантииЗаполнена Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли;
	
	Если МодифицированностьГарантий Тогда
		Для Каждого Строка Из проф_ГарантииОбъектаРемонта Цикл
			Строка.ДатаНачала = Строка.УсловияГарантии.ДатаНачалаГарантии;
			Строка.ДатаОкончания = Строка.УсловияГарантии.ДатаОкончанияГарантии;
		КонецЦикла;
		
		ТЗГарантий = проф_ГарантииОбъектаРемонта.Выгрузить();
		
		Для Каждого Строка Из ТЗГарантий Цикл
			
			СтруктураОтбора = Новый Структура("ДатаНачала, ДатаОкончания", Строка.ДатаНачала, Строка.ДатаОкончания);
			НайденныеСтроки = ТЗГарантий.НайтиСтроки(СтруктураОтбора);
			
			Если ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
			И Строка.ДатаНачала >= Строка.ДатаОкончания Тогда
				ШаблонСообщения = НСтр("ru = 'Дата начала гарантии %1 не может быть
					|больше либо равной дате окончания гарантии %2!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
										   Формат(Строка.ДатаНачала, "ДФ=dd.MM.yyyy"),
										   Формат(Строка.ДатаОкончания, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
			И НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Гарантийный период %1-%2 совпадает с другим гарантийным периодом!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
										  Формат(Строка.ДатаНачала,"ДФ=dd.MM.yyyy"),
										  Формат(Строка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				
				Сч = НайденныеСтроки.ВГраница();
				Пока Сч > 0 Цикл
					ТЗГарантий.Удалить(НайденныеСтроки[Сч]);
					Сч = Сч - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабГарантий.ДатаНачала,
		|	ТабГарантий.ДатаОкончания
		|ПОМЕСТИТЬ ТабГарантий
		|ИЗ
		|	&ТабГарантий КАК ТабГарантий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабГарантий1.ДатаНачала,
		|	ТабГарантий1.ДатаОкончания
		|ИЗ
		|	ТабГарантий КАК ТабГарантий1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабГарантий КАК ТабГарантий2
		|		ПО (ТабГарантий1.ДатаНачала >= ТабГарантий2.ДатаНачала
		|					И ТабГарантий1.ДатаНачала <= ТабГарантий2.ДатаОкончания
		|				ИЛИ ТабГарантий1.ДатаОкончания >= ТабГарантий2.ДатаНачала
		|					И ТабГарантий1.ДатаОкончания <= ТабГарантий2.ДатаОкончания)
		|			И НЕ (ТабГарантий1.ДатаНачала = ТабГарантий2.ДатаНачала
		|			И ТабГарантий1.ДатаОкончания = ТабГарантий2.ДатаОкончания)";
		
		Запрос.УстановитьПараметр("ТабГарантий", проф_ГарантииОбъектаРемонта.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Гарантийный период %1-%2 пересекается с другим гарантийным периодом!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
									  Формат(Выборка.ДатаНачала,"ДФ=dd.MM.yyyy"),
									  Формат(Выборка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеХарактеристикЗапчастей(Отказ)
	
	ФОХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	Если Не ФОХарактеристикиИспользуются Тогда
		Возврат;
	КонецЕсли;	
				
	Для каждого Запчасть Из проф_ТабЗапчастейОбъектовРемонта Цикл
		Если Запчасть.ХарактеристикиИспользуются = Истина
		И Запчасть.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		
			ШаблонСообщения = НСтр("ru = 'Не заполнена обязательная характеристика для запчасти %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Запчасть.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);	
		
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаписатьЗапчасти(ТекОбъект, СтруктураИзменения, Отказ)
	
	Если СтруктураИзменения.МодифицированностьЗапчастейОР
	Или СтруктураИзменения.МодифицированностьНормативныхЗатратПоЗапчастям Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаЗаписатьЗапчасти();
					   
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					   
		Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
		Запрос.УстановитьПараметр("ТиповойОР", ?(ЗначениеЗаполнено(ТиповойОР), ТиповойОР, Неопределено));
		Запрос.УстановитьПараметр("Запчасти_ОР", проф_ТабЗапчастейОбъектовРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ВР_ОР", проф_ТабЗатратПоВидамРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ПустоеКачество", Перечисления.ГрадацииКачества.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойТОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
		
		Результат = Запрос.ВыполнитьПакет();
		Запчасти = Результат[10].Выгрузить();
		ВидРемонтов = Результат[11].Выгрузить();
		
		Попытка
			
			Если СтруктураИзменения.МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
				НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
				НаборЗаписейУдаленные	= РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
				НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			КонецЕсли;
			
			масОшибок = Новый Массив;
			Для Каждого СтрокаЗапчастей Из Запчасти Цикл
				
				Если СтрокаЗапчастей.Количество < СтрокаЗапчастей.КоличествоДляПроверки
				И НЕ СтрокаЗапчастей.Удален Тогда
					ШаблонОшибки = НСтр("ru = 'Количество нормативных затрат по номенклатуре ""%1""
						|превышает количество номенклатуры. Запись была отменена!'");
					масОшибок.Добавить(СтрШаблон(ШаблонОшибки, СтрокаЗапчастей.Номенклатура));
				КонецЕсли;
				
				Если СтруктураИзменения.МодифицированностьЗапчастейОР Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Истина;
						
					ИначеЕсли СтрокаЗапчастей.Удален Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Ложь;
						
						НС = НаборЗаписейУдаленные.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей, "ТиповойОР, Номенклатура, Характеристика");
						НС.ОбъектРемонта = ТекОбъект;
						
					Иначе	
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;                  
						Отбор = Новый Структура("Номенклатура, Характеристика, ТиповойОР",
							СтрокаЗапчастей.Номенклатура, СтрокаЗапчастей.Характеристика, Справочники.торо_ТиповыеОР.ПустаяСсылка()); 
						НС.Приоритет = проф_ТабЗапчастейОбъектовРемонта.НайтиСтроки(Отбор).Количество() = 0;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекОшибка из масОшибок цикл
				ОбщегоНазначения.СообщитьПользователю(ТекОшибка,,,,Отказ);
			КонецЦикла;
			
			Если Отказ Тогда 
				Возврат; 
			КонецЕсли;
			
			Если СтруктураИзменения.МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие.Записать();
				НаборЗаписейУдаленные.Записать();
			КонецЕсли;
			
			СтруктураИзменения.МодифицированностьЗапчастейОР = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если СтруктураИзменения.МодифицированностьНормативныхЗатратПоЗапчастям Тогда		
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаЗапчастей Из ВидРемонтов Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаЗапчастей.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей, "ТиповойОР, Номенклатура, ВидРемонта, Характеристика");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					
					СтруктураПараметр = Новый Структура("Номенклатура, ВидРемонта, Характеристика");
					ЗаполнитьЗначенияСвойств(СтруктураПараметр, СтрокаЗапчастей);
					СтруктураПараметр.Вставить("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());					
					
					НС.Приоритет = проф_ТабЗатратПоВидамРемонта.НайтиСтроки(СтруктураПараметр).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
			СтруктураИзменения.МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаписатьЗапчасти()
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	торо_Запчасти.Номенклатура КАК Номенклатура,
		|	торо_Запчасти.Качество КАК Качество,
		|	торо_Запчасти.Характеристика КАК Характеристика,
		|	торо_Запчасти.ТиповойОР КАК ТиповойОР,
		|	торо_Запчасти.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_ЗапчастиТОР
		|ИЗ
		|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		|ГДЕ
		|	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		|	И торо_Запчасти.ТиповойОР = &ТиповойОР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Качество,
		|	Характеристика,
		|	ТиповойОР,
		|	Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	таб.Номенклатура КАК Номенклатура,
		|	таб.Качество КАК Качество,
		|	таб.Характеристика КАК Характеристика,
		|	таб.ТиповойОР КАК ТиповойОР,
		|	таб.Количество КАК Количество,
		|	таб.ИзТипового КАК ИзТипового,
		|	таб.Удален КАК Удален
		|ПОМЕСТИТЬ ВТ_ЗапчастиОР
		|ИЗ
		|	&Запчасти_ОР КАК таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Качество,
		|	Характеристика,
		|	ТиповойОР,
		|	Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
		|	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		|	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_ВР_ТОР
		|ИЗ
		|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		|ГДЕ
		|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
		|	И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = &ТиповойОР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидРемонта,
		|	ТиповойОР,
		|	Характеристика,
		|	Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	таб.Номенклатура КАК Номенклатура,
		|	таб.ВидРемонта КАК ВидРемонта,
		|	таб.ТиповойОР КАК ТиповойОР,
		|	таб.Характеристика КАК Характеристика,
		|	таб.Количество КАК Количество,
		|	таб.ИзТипового КАК ИзТипового,
		|	таб.Удален КАК Удален
		|ПОМЕСТИТЬ ВТ_ВР_ОР
		|ИЗ
		|	&ВР_ОР КАК таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидРемонта,
		|	ТиповойОР,
		|	Характеристика,
		|	Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ЗапчастиТОР.Номенклатура, ВТ_ЗапчастиОР.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_ЗапчастиТОР.Качество, ВТ_ЗапчастиОР.Качество) КАК Качество,
		|	ЕСТЬNULL(ВТ_ЗапчастиТОР.Характеристика, ВТ_ЗапчастиОР.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ВТ_ЗапчастиТОР.Количество, ВТ_ЗапчастиОР.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		|			ТОГДА ВТ_ЗапчастиТОР.ТиповойОР
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		|					ТОГДА ВТ_ЗапчастиОР.ТиповойОР
		|				ИНАЧЕ &ПустойТОР
		|			КОНЕЦ
		|	КОНЕЦ КАК ТиповойОР,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ИзТипового,
		|	ВЫБОР
		|		КОГДА (НЕ(ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		|						ИЛИ ВТ_ЗапчастиОР.Номенклатура ЕСТЬ NULL)
		|				ИЛИ ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР)
		|				И ВТ_ЗапчастиОР.Удален
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удален
		|ПОМЕСТИТЬ ВТ_Запчасти
		|ИЗ
		|	ВТ_ЗапчастиТОР КАК ВТ_ЗапчастиТОР
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗапчастиОР КАК ВТ_ЗапчастиОР
		|		ПО ВТ_ЗапчастиТОР.Номенклатура = ВТ_ЗапчастиОР.Номенклатура
		|			И ВТ_ЗапчастиТОР.Качество = ВТ_ЗапчастиОР.Качество
		|			И ВТ_ЗапчастиТОР.Характеристика = ВТ_ЗапчастиОР.Характеристика
		|			И ВТ_ЗапчастиТОР.Количество = ВТ_ЗапчастиОР.Количество
		|			И ВТ_ЗапчастиТОР.ТиповойОР = ВТ_ЗапчастиОР.ТиповойОР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ИзТипового
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запчасти.Номенклатура КАК Номенклатура,
		|	ВТ_Запчасти.Характеристика КАК Характеристика,
		|	СУММА(1) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВТ_ДублиВЗапчастях
		|ИЗ
		|	ВТ_Запчасти КАК ВТ_Запчасти
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Запчасти.Номенклатура,
		|	ВТ_Запчасти.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запчасти.Номенклатура КАК Номенклатура,
		|	ВТ_Запчасти.Качество КАК Качество,
		|	ВТ_Запчасти.Характеристика КАК Характеристика,
		|	ВТ_Запчасти.Количество КАК Количество,
		|	ВТ_Запчасти.ТиповойОР КАК ТиповойОР,
		|	ВТ_Запчасти.ИзТипового КАК ИзТипового,
		|	ВЫБОР
		|		КОГДА ВТ_ДублиВЗапчастях.Номенклатура ЕСТЬ NULL
		|			ТОГДА ВТ_Запчасти.Удален
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Удален
		|ПОМЕСТИТЬ ВТ_Запчасти_Промежуточная
		|ИЗ
		|	ВТ_Запчасти КАК ВТ_Запчасти
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиВЗапчастях КАК ВТ_ДублиВЗапчастях
		|		ПО ВТ_Запчасти.Номенклатура = ВТ_ДублиВЗапчастях.Номенклатура
		|			И ВТ_Запчасти.Характеристика = ВТ_ДублиВЗапчастях.Характеристика
		|			И (ВТ_Запчасти.ИзТипового)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ВР_ТОР.Номенклатура, ВТ_ВР_ОР.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_ВР_ТОР.ВидРемонта, ВТ_ВР_ОР.ВидРемонта) КАК ВидРемонта,
		|	ЕСТЬNULL(ВТ_ВР_ТОР.Характеристика, ВТ_ВР_ОР.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ВТ_ВР_ТОР.Количество, ВТ_ВР_ОР.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL
		|			ТОГДА ВТ_ВР_ТОР.ТиповойОР
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_ВР_ОР.ТиповойОР ЕСТЬ NULL
		|					ТОГДА &ПустойТОР
		|				ИНАЧЕ ВТ_ВР_ОР.ТиповойОР
		|			КОНЕЦ
		|	КОНЕЦ КАК ТиповойОР,
		|	ВТ_ВР_ОР.ИзТипового КАК ИзТипового,
		|	ВЫБОР
		|		КОГДА НЕ(ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL
		|						ИЛИ ВТ_ВР_ОР.Номенклатура ЕСТЬ NULL)
		|				И ВТ_ВР_ОР.Удален
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удален
		|ПОМЕСТИТЬ ВТ_ВР
		|ИЗ
		|	ВТ_ВР_ТОР КАК ВТ_ВР_ТОР
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_ОР КАК ВТ_ВР_ОР
		|		ПО ВТ_ВР_ТОР.Номенклатура = ВТ_ВР_ОР.Номенклатура
		|			И ВТ_ВР_ТОР.ВидРемонта = ВТ_ВР_ОР.ВидРемонта
		|			И ВТ_ВР_ТОР.Характеристика = ВТ_ВР_ОР.Характеристика
		|			И ВТ_ВР_ТОР.Количество = ВТ_ВР_ОР.Количество
		|			И ВТ_ВР_ТОР.ТиповойОР = ВТ_ВР_ОР.ТиповойОР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидРемонта,
		|	Характеристика,
		|	ИзТипового
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВР.Номенклатура КАК Номенклатура,
		|	ВТ_ВР.ВидРемонта КАК ВидРемонта,
		|	ВТ_ВР.Характеристика КАК Характеристика,
		|	СУММА(1) КАК КоличествоСтрок
		|ПОМЕСТИТЬ Вт_ДублиВВР
		|ИЗ
		|	ВТ_ВР КАК ВТ_ВР
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВР.Номенклатура,
		|	ВТ_ВР.ВидРемонта,
		|	ВТ_ВР.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидРемонта,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВР.Номенклатура КАК Номенклатура,
		|	ВТ_ВР.ВидРемонта КАК ВидРемонта,
		|	ВТ_ВР.Характеристика КАК Характеристика,
		|	ВТ_ВР.Количество КАК Количество,
		|	ВТ_ВР.ТиповойОР КАК ТиповойОР,
		|	ВТ_ВР.ИзТипового КАК ИзТипового,
		|	ВЫБОР
		|		КОГДА Вт_ДублиВВР.Номенклатура ЕСТЬ NULL
		|			ТОГДА ВТ_ВР.Удален
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Удален
		|ПОМЕСТИТЬ ВТ_ВР_Финальная
		|ИЗ
		|	ВТ_ВР КАК ВТ_ВР
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДублиВВР КАК Вт_ДублиВВР
		|		ПО ВТ_ВР.Номенклатура = Вт_ДублиВВР.Номенклатура
		|			И ВТ_ВР.ВидРемонта = Вт_ДублиВВР.ВидРемонта
		|			И ВТ_ВР.Характеристика = Вт_ДублиВВР.Характеристика
		|			И (ВТ_ВР.ИзТипового)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество) КАК Качество,
		|	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Запчасти.Количество, ВТ_ВР.Количество)) КАК Количество,
		|	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР) КАК ТиповойОР,
		|	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ) КАК ИзТипового,
		|	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ) КАК Удален,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВТ_ВР.Удален, ИСТИНА)
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_ВР.Количество
		|		КОНЕЦ) КАК КоличествоДляПроверки
		|ИЗ
		|	ВТ_Запчасти_Промежуточная КАК ВТ_Запчасти
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_Финальная КАК ВТ_ВР
		|		ПО ВТ_Запчасти.Номенклатура = ВТ_ВР.Номенклатура
		|			И ВТ_Запчасти.Характеристика = ВТ_ВР.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ),
		|	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР),
		|	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура),
		|	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ),
		|	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика),
		|	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВР_Финальная.Номенклатура КАК Номенклатура,
		|	ВТ_ВР_Финальная.ВидРемонта КАК ВидРемонта,
		|	ВТ_ВР_Финальная.Характеристика КАК Характеристика,
		|	ВТ_ВР_Финальная.Количество КАК Количество,
		|	ВТ_ВР_Финальная.ТиповойОР КАК ТиповойОР,
		|	ВТ_ВР_Финальная.ИзТипового КАК ИзТипового,
		|	ВТ_ВР_Финальная.Удален КАК Удален
		|ИЗ
		|	ВТ_ВР_Финальная КАК ВТ_ВР_Финальная";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура ЗаписатьНормативныеРемонты(ТекОбъект, СтруктураИзменения, ПредТиповойОР, Отказ)

	Если СтруктураИзменения.МодифицированностьНормРемонтов Тогда
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормативныеРемонтыОборудованияУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаНорматива Из проф_НормативныеРемонты Цикл
					
				Если НЕ ЗначениеЗаполнено(СтрокаНорматива.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаНорматива.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаНорматива, "ТиповойОР, ВидРемонта");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					Отбор = Новый Структура("ВидРемонта, ТиповойОР",
						СтрокаНорматива.ВидРемонта, Справочники.торо_ТиповыеОР.ПустаяСсылка());
					НС.Приоритет = проф_НормативныеРемонты.НайтиСтроки(Отбор).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если СтруктураИзменения.МодифицированностьНормРемонтов
	ИЛИ СтруктураИзменения.МодифицированностьПредшествующихРемонтов Тогда
		
		Попытка
			//Если ПредТиповойОР <> ТиповойОР Тогда
			ИзменитьПредшествующиеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, ТиповойОР);
			//КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Записать(Истина);
			
			Запрос = Новый Запрос;
			Отбор = Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТабТекПредшествующих", проф_ПредшествующиеРемонты.Выгрузить(Отбор));
			Запрос.УстановитьПараметр("ОбъектРемонта", ТекОбъект);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТабПредРемонтов.ВидРемонта,
			|	ТабПредРемонтов.ПредшествующийВидРемонта,
			|	ТабПредРемонтов.ТиповойОР
			|ПОМЕСТИТЬ ТабПредРемонтов
			|ИЗ
			|	&ТабТекПредшествующих КАК ТабПредРемонтов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР,
			|	ЛОЖЬ КАК Приоритет
			|ПОМЕСТИТЬ ТабСПриоритетами
			|ИЗ
			|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
			|ГДЕ
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабПредРемонтов.ВидРемонта,
			|	ТабПредРемонтов.ПредшествующийВидРемонта,
			|	ТабПредРемонтов.ТиповойОР,
			|	ИСТИНА
			|ИЗ
			|	ТабПредРемонтов КАК ТабПредРемонтов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			|ПОМЕСТИТЬ ТабСМаксПриоритетами
			|ИЗ
			|	ТабСПриоритетами КАК ТабСПриоритетами
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ПредшествующийВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	&ОбъектРемонта КАК ОбъектРемонта,
			|	ВЫБОР
			|		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ТабСПриоритетами.Приоритет
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			|		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
			|			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
			|			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			|			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			|				И торо_НормативныеРемонтыОборудования.Приоритет)";
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ПредшествующийВидРемонта) Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты:
							|для вида ремонта <%1> не заполнено поле ""Предшествующий вид ремонта""'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты:
							|в одной из строк не заполнено поле ""Вид ремонта""'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ПредшествующийВидРемонта.Установить(Выборка.ПредшествующийВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(), Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если СтруктураИзменения.МодифицированностьНормРемонтов
	ИЛИ СтруктураИзменения.МодифицированностьЗамещаемыхРемонтов Тогда
		
		Попытка
			Если ПредТиповойОР <> ТиповойОР Тогда
				ИзменитьЗамещаемыеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, ТиповойОР);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Записать(Истина);
			
			Запрос = Новый Запрос;
			Отбор = Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТабТекЗамещающих", проф_ЗамещаемыеРемонты.Выгрузить(Отбор));
			Запрос.УстановитьПараметр("ОбъектРемонта", ТекОбъект);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТабТекЗамещающих.ВидРемонта,
			|	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			|	ТабТекЗамещающих.ТиповойОР,
			|	ТабТекЗамещающих.СпособЗамещения,
			|	ТабТекЗамещающих.НачальнаяГраница,
			|	ТабТекЗамещающих.КонечнаяГраница
			|ПОМЕСТИТЬ ТабТекЗамещающих
			|ИЗ
			|	&ТабТекЗамещающих КАК ТабТекЗамещающих
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
			|	ЛОЖЬ КАК Приоритет
			|ПОМЕСТИТЬ ТабСПриоритетами
			|ИЗ
			|	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
			|ГДЕ
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОбъектРемонта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабТекЗамещающих.ВидРемонта,
			|	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			|	ТабТекЗамещающих.ТиповойОР,
			|	ТабТекЗамещающих.СпособЗамещения,
			|	ТабТекЗамещающих.НачальнаяГраница,
			|	ТабТекЗамещающих.КонечнаяГраница,
			|	ИСТИНА
			|ИЗ
			|	ТабТекЗамещающих КАК ТабТекЗамещающих
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			|ПОМЕСТИТЬ ТабСМаксПриоритетами
			|ИЗ
			|	ТабСПриоритетами КАК ТабСПриоритетами
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ЗамещаемыйВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	ТабСПриоритетами.СпособЗамещения,
			|	ТабСПриоритетами.НачальнаяГраница,
			|	ТабСПриоритетами.КонечнаяГраница,
			|	ВЫБОР
			|		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ТабСПриоритетами.Приоритет
			|	КОНЕЦ КАК Приоритет,
			|	&ОбъектРемонта КАК ОбъектРемонта
			|ИЗ
			|	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			|		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
			|			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
			|			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			|			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			|				И торо_НормативныеРемонтыОборудования.Приоритет)";
			
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ЗамещаемыйВидРемонта) Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: для вида ремонта <%1> не заполнено поле ""Замещаемый вид ремонта""'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: в одной из строк не заполнено поле ""Вид ремонта""'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ЗамещаемыйВидРемонта.Установить(Выборка.ЗамещаемыйВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(), Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать замещаемые ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	СтруктураИзменения.МодифицированностьНормРемонтов = Ложь;
	СтруктураИзменения.МодифицированностьЗамещаемыхРемонтов = Ложь;
	СтруктураИзменения.МодифицированностьПредшествующихРемонтов = Ложь;
	
КонецПроцедуры

Процедура ЗаписатьРемонтныеЦиклы(ТекОбъект, СтруктураИзменения, Отказ)
	
	// Цепочки
	Если СтруктураИзменения.МодифицированностьРемЦиклов Тогда 
		
		Для каждого Строка из проф_ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекОбъект;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийРемонтныеЦиклыОборудования = проф_ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
			МассивСтрокЦиклов = ТаблицаЗначенийРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийРемонтныеЦиклыОборудования.Скопировать(МассивСтрокЦиклов);
			
			НаборРемонтныхЦикловОборудования = РегистрыСведений.торо_РемонтныеЦиклыОборудования.СоздатьНаборЗаписей();
			НаборРемонтныхЦикловОборудования.Отбор.ГруппаОбъектовРемонтов.Установить(ТекОбъект);
			НаборРемонтныхЦикловОборудования.Загрузить(ТаблицаБуфер);
			НаборРемонтныхЦикловОборудования.Записать();
			
			СтруктураИзменения.МодифицированностьРемЦиклов = Ложь;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать фиксированные ремонтные циклы: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьГарантии(ТекОбъект, СтруктураИзменения, Отказ)
	
	Если СтруктураИзменения.МодифицированностьГарантий Тогда
		
		Для каждого Строка из проф_ГарантииОбъектаРемонта Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекОбъект;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = проф_ГарантииОбъектаРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекОбъект));
		
		НаборЗаписей = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
		Для каждого Строка Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			СтруктураИзменения.МодифицированностьГарантий = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Запись в регистр сведений <Сроки гарантии объектов ремонта> не выполнена.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВспомогательныеТаблицы()
	
	проф_НормативныеРемонты.Очистить();
	проф_ПредшествующиеРемонты.Очистить();
	проф_ЗамещаемыеРемонты.Очистить();
	проф_ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
	проф_РемЦиклыОборудования.Очистить();
	проф_ТабЗапчастейОбъектовРемонта.Очистить();
	проф_ТабЗатратПоВидамРемонта.Очистить();
	проф_ГарантииОбъектаРемонта.Очистить();	
	
КонецПроцедуры	

//-- Проф-ИТ, #241, Ровенский О.В., 20.09.2023

//++ Проф-ИТ, #257, Иванова Е.С., 20.09.2023
Процедура проф_СоздатьДокументСостояниеОР()
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	//++ Проф-ИТ, #257, Корнилов М.С., 28.09.2023
	Если Не ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда
		Возврат;
	КонецЕсли;
	//-- Проф-ИТ, #257, Корнилов М.С., 28.09.2023
	
	Если ДополнительныеСвойства.Свойство("РодительИерархии") 
	И ЗначениеЗаполнено(ДополнительныеСвойства.РодительИерархии)
	И Не ДополнительныеСвойства.РодительИерархии.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	торо_СостоянияОбъектовРемонта.Ссылка КАК Ссылка,
	|	торо_СостоянияОбъектовРемонта.Проведен КАК Проведен
	|ИЗ
	|	Документ.торо_СостоянияОбъектовРемонта КАК торо_СостоянияОбъектовРемонта
	|ГДЕ
	|	торо_СостоянияОбъектовРемонта.ДокументОснование = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда  
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		Если Выборка.Проведен Тогда 
			Возврат;
		КонецЕсли;
		
		ДокументСостояниеОбъектаРемонта = Выборка.Ссылка.ПолучитьОбъект();
		ДокументСостояниеОбъектаРемонта.ОбъектыРемонта.Очистить();
	Иначе 
		ДокументСостояниеОбъектаРемонта = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
	КонецЕсли;
	
	ДокументСостояниеОбъектаРемонта.Организация 	  = Организация;
	ДокументСостояниеОбъектаРемонта.Подразделение 	  = Подразделение;
	ДокументСостояниеОбъектаРемонта.Дата 			  = ДатаВводаВЭксплуатацию;
	ДокументСостояниеОбъектаРемонта.ВидОперации 	  = ПредопределенноеЗначение(
		"Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации");
	ДокументСостояниеОбъектаРемонта.ДокументОснование = Ссылка;
	ДокументСостояниеОбъектаРемонта.ПометкаУдаления   = Ложь;
	
	ВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииПереданоВЭксплуатацию");
	Если ВидЭксплуатации = Неопределено Тогда
		ВидЭксплуатации = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена настройка системы ВидЭксплуатацииПереданоВЭксплуатацию 
			|в пространстве имен АвтоматическоеСозданиеСостояниеОбъектаРемонта";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ДокументСостояниеОбъектаРемонта.ВидЭксплуатации = ВидЭксплуатации; 
	
	СтрокаОбъектаРемонта = ДокументСостояниеОбъектаРемонта.ОбъектыРемонта.Добавить();
	СтрокаОбъектаРемонта.ОбъектРемонта 		= Ссылка;
	СтрокаОбъектаРемонта.ВидЭксплуатации 	= ВидЭксплуатации;
	СтрокаОбъектаРемонта.ДатаОкончания 		= ДатаВводаВЭксплуатацию;
	
	ДокументСостояниеОбъектаРемонта.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
//-- Проф-ИТ, #257, Иванова Е.С., 20.09.2023

#КонецОбласти